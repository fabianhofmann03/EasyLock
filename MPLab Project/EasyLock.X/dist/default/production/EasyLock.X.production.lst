

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 01 23:44:51 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    63                           	dabs	1,0x220,48
    64                           	dabs	1,0x1A0,80
    65                           	dabs	1,0x16F,1
    66                           	dabs	1,0x20EF,0,_data_storage
    67                           	dabs	1,0x7E,2
    68  0000                     
    69                           ; Version 2.40
    70                           ; Generated 17/11/2021 GMT
    71                           ; 
    72                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F1827 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  008C                     	;# 
   134  008D                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  0111                     	;# 
   153  0112                     	;# 
   154  0113                     	;# 
   155  0114                     	;# 
   156  0115                     	;# 
   157  0116                     	;# 
   158  0117                     	;# 
   159  0118                     	;# 
   160  0119                     	;# 
   161  011A                     	;# 
   162  011B                     	;# 
   163  011D                     	;# 
   164  011E                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0191                     	;# 
   168  0191                     	;# 
   169  0192                     	;# 
   170  0193                     	;# 
   171  0193                     	;# 
   172  0193                     	;# 
   173  0194                     	;# 
   174  0195                     	;# 
   175  0196                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019F                     	;# 
   187  020C                     	;# 
   188  020D                     	;# 
   189  0211                     	;# 
   190  0211                     	;# 
   191  0212                     	;# 
   192  0212                     	;# 
   193  0213                     	;# 
   194  0213                     	;# 
   195  0214                     	;# 
   196  0214                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0216                     	;# 
   201  0216                     	;# 
   202  0217                     	;# 
   203  0217                     	;# 
   204  0219                     	;# 
   205  021A                     	;# 
   206  021B                     	;# 
   207  021C                     	;# 
   208  021D                     	;# 
   209  021E                     	;# 
   210  021F                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029C                     	;# 
   226  029D                     	;# 
   227  029E                     	;# 
   228  029E                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0318                     	;# 
   234  0318                     	;# 
   235  0319                     	;# 
   236  031A                     	;# 
   237  0394                     	;# 
   238  0395                     	;# 
   239  0396                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0014                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  0111                     	;# 
   311  0112                     	;# 
   312  0113                     	;# 
   313  0114                     	;# 
   314  0115                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  0118                     	;# 
   318  0119                     	;# 
   319  011A                     	;# 
   320  011B                     	;# 
   321  011D                     	;# 
   322  011E                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020C                     	;# 
   346  020D                     	;# 
   347  0211                     	;# 
   348  0211                     	;# 
   349  0212                     	;# 
   350  0212                     	;# 
   351  0213                     	;# 
   352  0213                     	;# 
   353  0214                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0216                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0217                     	;# 
   362  0219                     	;# 
   363  021A                     	;# 
   364  021B                     	;# 
   365  021C                     	;# 
   366  021D                     	;# 
   367  021E                     	;# 
   368  021F                     	;# 
   369  0291                     	;# 
   370  0291                     	;# 
   371  0292                     	;# 
   372  0293                     	;# 
   373  0294                     	;# 
   374  0295                     	;# 
   375  0295                     	;# 
   376  0296                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  029B                     	;# 
   382  029C                     	;# 
   383  029C                     	;# 
   384  029D                     	;# 
   385  029E                     	;# 
   386  029E                     	;# 
   387  0311                     	;# 
   388  0311                     	;# 
   389  0312                     	;# 
   390  0313                     	;# 
   391  0318                     	;# 
   392  0318                     	;# 
   393  0319                     	;# 
   394  031A                     	;# 
   395  0394                     	;# 
   396  0395                     	;# 
   397  0396                     	;# 
   398  039A                     	;# 
   399  039C                     	;# 
   400  039D                     	;# 
   401  039E                     	;# 
   402  039F                     	;# 
   403  0415                     	;# 
   404  0416                     	;# 
   405  0417                     	;# 
   406  041C                     	;# 
   407  041D                     	;# 
   408  041E                     	;# 
   409  0FE4                     	;# 
   410  0FE5                     	;# 
   411  0FE6                     	;# 
   412  0FE7                     	;# 
   413  0FE8                     	;# 
   414  0FE9                     	;# 
   415  0FEA                     	;# 
   416  0FEB                     	;# 
   417  0FED                     	;# 
   418  0FEE                     	;# 
   419  0FEF                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0093                     	;# 
   454  0094                     	;# 
   455  0095                     	;# 
   456  0096                     	;# 
   457  0097                     	;# 
   458  0098                     	;# 
   459  0099                     	;# 
   460  009A                     	;# 
   461  009B                     	;# 
   462  009B                     	;# 
   463  009C                     	;# 
   464  009D                     	;# 
   465  009E                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  0111                     	;# 
   469  0112                     	;# 
   470  0113                     	;# 
   471  0114                     	;# 
   472  0115                     	;# 
   473  0116                     	;# 
   474  0117                     	;# 
   475  0118                     	;# 
   476  0119                     	;# 
   477  011A                     	;# 
   478  011B                     	;# 
   479  011D                     	;# 
   480  011E                     	;# 
   481  018C                     	;# 
   482  018D                     	;# 
   483  0191                     	;# 
   484  0191                     	;# 
   485  0192                     	;# 
   486  0193                     	;# 
   487  0193                     	;# 
   488  0193                     	;# 
   489  0194                     	;# 
   490  0195                     	;# 
   491  0196                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019C                     	;# 
   499  019C                     	;# 
   500  019D                     	;# 
   501  019E                     	;# 
   502  019F                     	;# 
   503  020C                     	;# 
   504  020D                     	;# 
   505  0211                     	;# 
   506  0211                     	;# 
   507  0212                     	;# 
   508  0212                     	;# 
   509  0213                     	;# 
   510  0213                     	;# 
   511  0214                     	;# 
   512  0214                     	;# 
   513  0215                     	;# 
   514  0215                     	;# 
   515  0215                     	;# 
   516  0216                     	;# 
   517  0216                     	;# 
   518  0217                     	;# 
   519  0217                     	;# 
   520  0219                     	;# 
   521  021A                     	;# 
   522  021B                     	;# 
   523  021C                     	;# 
   524  021D                     	;# 
   525  021E                     	;# 
   526  021F                     	;# 
   527  0291                     	;# 
   528  0291                     	;# 
   529  0292                     	;# 
   530  0293                     	;# 
   531  0294                     	;# 
   532  0295                     	;# 
   533  0295                     	;# 
   534  0296                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  029B                     	;# 
   540  029C                     	;# 
   541  029C                     	;# 
   542  029D                     	;# 
   543  029E                     	;# 
   544  029E                     	;# 
   545  0311                     	;# 
   546  0311                     	;# 
   547  0312                     	;# 
   548  0313                     	;# 
   549  0318                     	;# 
   550  0318                     	;# 
   551  0319                     	;# 
   552  031A                     	;# 
   553  0394                     	;# 
   554  0395                     	;# 
   555  0396                     	;# 
   556  039A                     	;# 
   557  039C                     	;# 
   558  039D                     	;# 
   559  039E                     	;# 
   560  039F                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0014                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001E                     	;# 
   606  001F                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0115                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  0118                     	;# 
   634  0119                     	;# 
   635  011A                     	;# 
   636  011B                     	;# 
   637  011D                     	;# 
   638  011E                     	;# 
   639  018C                     	;# 
   640  018D                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0193                     	;# 
   647  0194                     	;# 
   648  0195                     	;# 
   649  0196                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019D                     	;# 
   659  019E                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020D                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  0219                     	;# 
   679  021A                     	;# 
   680  021B                     	;# 
   681  021C                     	;# 
   682  021D                     	;# 
   683  021E                     	;# 
   684  021F                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0294                     	;# 
   690  0295                     	;# 
   691  0295                     	;# 
   692  0296                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  029B                     	;# 
   698  029C                     	;# 
   699  029C                     	;# 
   700  029D                     	;# 
   701  029E                     	;# 
   702  029E                     	;# 
   703  0311                     	;# 
   704  0311                     	;# 
   705  0312                     	;# 
   706  0313                     	;# 
   707  0318                     	;# 
   708  0318                     	;# 
   709  0319                     	;# 
   710  031A                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  039A                     	;# 
   715  039C                     	;# 
   716  039D                     	;# 
   717  039E                     	;# 
   718  039F                     	;# 
   719  0415                     	;# 
   720  0416                     	;# 
   721  0417                     	;# 
   722  041C                     	;# 
   723  041D                     	;# 
   724  041E                     	;# 
   725  0FE4                     	;# 
   726  0FE5                     	;# 
   727  0FE6                     	;# 
   728  0FE7                     	;# 
   729  0FE8                     	;# 
   730  0FE9                     	;# 
   731  0FEA                     	;# 
   732  0FEB                     	;# 
   733  0FED                     	;# 
   734  0FEE                     	;# 
   735  0FEF                     	;# 
   736  0000                     	;# 
   737  0001                     	;# 
   738  0002                     	;# 
   739  0003                     	;# 
   740  0004                     	;# 
   741  0005                     	;# 
   742  0006                     	;# 
   743  0007                     	;# 
   744  0008                     	;# 
   745  0009                     	;# 
   746  000A                     	;# 
   747  000B                     	;# 
   748  000C                     	;# 
   749  000D                     	;# 
   750  0011                     	;# 
   751  0012                     	;# 
   752  0013                     	;# 
   753  0014                     	;# 
   754  0015                     	;# 
   755  0016                     	;# 
   756  0016                     	;# 
   757  0017                     	;# 
   758  0018                     	;# 
   759  0019                     	;# 
   760  001A                     	;# 
   761  001B                     	;# 
   762  001C                     	;# 
   763  001E                     	;# 
   764  001F                     	;# 
   765  008C                     	;# 
   766  008D                     	;# 
   767  0091                     	;# 
   768  0092                     	;# 
   769  0093                     	;# 
   770  0094                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0098                     	;# 
   775  0099                     	;# 
   776  009A                     	;# 
   777  009B                     	;# 
   778  009B                     	;# 
   779  009C                     	;# 
   780  009D                     	;# 
   781  009E                     	;# 
   782  010C                     	;# 
   783  010D                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  011E                     	;# 
   797  018C                     	;# 
   798  018D                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019C                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  020D                     	;# 
   821  0211                     	;# 
   822  0211                     	;# 
   823  0212                     	;# 
   824  0212                     	;# 
   825  0213                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0214                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0216                     	;# 
   834  0217                     	;# 
   835  0217                     	;# 
   836  0219                     	;# 
   837  021A                     	;# 
   838  021B                     	;# 
   839  021C                     	;# 
   840  021D                     	;# 
   841  021E                     	;# 
   842  021F                     	;# 
   843  0291                     	;# 
   844  0291                     	;# 
   845  0292                     	;# 
   846  0293                     	;# 
   847  0294                     	;# 
   848  0295                     	;# 
   849  0295                     	;# 
   850  0296                     	;# 
   851  0298                     	;# 
   852  0298                     	;# 
   853  0299                     	;# 
   854  029A                     	;# 
   855  029B                     	;# 
   856  029C                     	;# 
   857  029C                     	;# 
   858  029D                     	;# 
   859  029E                     	;# 
   860  029E                     	;# 
   861  0311                     	;# 
   862  0311                     	;# 
   863  0312                     	;# 
   864  0313                     	;# 
   865  0318                     	;# 
   866  0318                     	;# 
   867  0319                     	;# 
   868  031A                     	;# 
   869  0394                     	;# 
   870  0395                     	;# 
   871  0396                     	;# 
   872  039A                     	;# 
   873  039C                     	;# 
   874  039D                     	;# 
   875  039E                     	;# 
   876  039F                     	;# 
   877  0415                     	;# 
   878  0416                     	;# 
   879  0417                     	;# 
   880  041C                     	;# 
   881  041D                     	;# 
   882  041E                     	;# 
   883  0FE4                     	;# 
   884  0FE5                     	;# 
   885  0FE6                     	;# 
   886  0FE7                     	;# 
   887  0FE8                     	;# 
   888  0FE9                     	;# 
   889  0FEA                     	;# 
   890  0FEB                     	;# 
   891  0FED                     	;# 
   892  0FEE                     	;# 
   893  0FEF                     	;# 
   894  0000                     	;# 
   895  0001                     	;# 
   896  0002                     	;# 
   897  0003                     	;# 
   898  0004                     	;# 
   899  0005                     	;# 
   900  0006                     	;# 
   901  0007                     	;# 
   902  0008                     	;# 
   903  0009                     	;# 
   904  000A                     	;# 
   905  000B                     	;# 
   906  000C                     	;# 
   907  000D                     	;# 
   908  0011                     	;# 
   909  0012                     	;# 
   910  0013                     	;# 
   911  0014                     	;# 
   912  0015                     	;# 
   913  0016                     	;# 
   914  0016                     	;# 
   915  0017                     	;# 
   916  0018                     	;# 
   917  0019                     	;# 
   918  001A                     	;# 
   919  001B                     	;# 
   920  001C                     	;# 
   921  001E                     	;# 
   922  001F                     	;# 
   923  008C                     	;# 
   924  008D                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0094                     	;# 
   929  0095                     	;# 
   930  0096                     	;# 
   931  0097                     	;# 
   932  0098                     	;# 
   933  0099                     	;# 
   934  009A                     	;# 
   935  009B                     	;# 
   936  009B                     	;# 
   937  009C                     	;# 
   938  009D                     	;# 
   939  009E                     	;# 
   940  010C                     	;# 
   941  010D                     	;# 
   942  0111                     	;# 
   943  0112                     	;# 
   944  0113                     	;# 
   945  0114                     	;# 
   946  0115                     	;# 
   947  0116                     	;# 
   948  0117                     	;# 
   949  0118                     	;# 
   950  0119                     	;# 
   951  011A                     	;# 
   952  011B                     	;# 
   953  011D                     	;# 
   954  011E                     	;# 
   955  018C                     	;# 
   956  018D                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0193                     	;# 
   963  0194                     	;# 
   964  0195                     	;# 
   965  0196                     	;# 
   966  0199                     	;# 
   967  019A                     	;# 
   968  019B                     	;# 
   969  019B                     	;# 
   970  019B                     	;# 
   971  019B                     	;# 
   972  019C                     	;# 
   973  019C                     	;# 
   974  019D                     	;# 
   975  019E                     	;# 
   976  019F                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  0211                     	;# 
   980  0211                     	;# 
   981  0212                     	;# 
   982  0212                     	;# 
   983  0213                     	;# 
   984  0213                     	;# 
   985  0214                     	;# 
   986  0214                     	;# 
   987  0215                     	;# 
   988  0215                     	;# 
   989  0215                     	;# 
   990  0216                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0217                     	;# 
   994  0219                     	;# 
   995  021A                     	;# 
   996  021B                     	;# 
   997  021C                     	;# 
   998  021D                     	;# 
   999  021E                     	;# 
  1000  021F                     	;# 
  1001  0291                     	;# 
  1002  0291                     	;# 
  1003  0292                     	;# 
  1004  0293                     	;# 
  1005  0294                     	;# 
  1006  0295                     	;# 
  1007  0295                     	;# 
  1008  0296                     	;# 
  1009  0298                     	;# 
  1010  0298                     	;# 
  1011  0299                     	;# 
  1012  029A                     	;# 
  1013  029B                     	;# 
  1014  029C                     	;# 
  1015  029C                     	;# 
  1016  029D                     	;# 
  1017  029E                     	;# 
  1018  029E                     	;# 
  1019  0311                     	;# 
  1020  0311                     	;# 
  1021  0312                     	;# 
  1022  0313                     	;# 
  1023  0318                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  039A                     	;# 
  1031  039C                     	;# 
  1032  039D                     	;# 
  1033  039E                     	;# 
  1034  039F                     	;# 
  1035  0415                     	;# 
  1036  0416                     	;# 
  1037  0417                     	;# 
  1038  041C                     	;# 
  1039  041D                     	;# 
  1040  041E                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0093                     	;# 
  1086  0094                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0098                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  0111                     	;# 
  1101  0112                     	;# 
  1102  0113                     	;# 
  1103  0114                     	;# 
  1104  0115                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  0118                     	;# 
  1108  0119                     	;# 
  1109  011A                     	;# 
  1110  011B                     	;# 
  1111  011D                     	;# 
  1112  011E                     	;# 
  1113  018C                     	;# 
  1114  018D                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020D                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0219                     	;# 
  1153  021A                     	;# 
  1154  021B                     	;# 
  1155  021C                     	;# 
  1156  021D                     	;# 
  1157  021E                     	;# 
  1158  021F                     	;# 
  1159  0291                     	;# 
  1160  0291                     	;# 
  1161  0292                     	;# 
  1162  0293                     	;# 
  1163  0294                     	;# 
  1164  0295                     	;# 
  1165  0295                     	;# 
  1166  0296                     	;# 
  1167  0298                     	;# 
  1168  0298                     	;# 
  1169  0299                     	;# 
  1170  029A                     	;# 
  1171  029B                     	;# 
  1172  029C                     	;# 
  1173  029C                     	;# 
  1174  029D                     	;# 
  1175  029E                     	;# 
  1176  029E                     	;# 
  1177  0311                     	;# 
  1178  0311                     	;# 
  1179  0312                     	;# 
  1180  0313                     	;# 
  1181  0318                     	;# 
  1182  0318                     	;# 
  1183  0319                     	;# 
  1184  031A                     	;# 
  1185  0394                     	;# 
  1186  0395                     	;# 
  1187  0396                     	;# 
  1188  039A                     	;# 
  1189  039C                     	;# 
  1190  039D                     	;# 
  1191  039E                     	;# 
  1192  039F                     	;# 
  1193  0415                     	;# 
  1194  0416                     	;# 
  1195  0417                     	;# 
  1196  041C                     	;# 
  1197  041D                     	;# 
  1198  041E                     	;# 
  1199  0FE4                     	;# 
  1200  0FE5                     	;# 
  1201  0FE6                     	;# 
  1202  0FE7                     	;# 
  1203  0FE8                     	;# 
  1204  0FE9                     	;# 
  1205  0FEA                     	;# 
  1206  0FEB                     	;# 
  1207  0FED                     	;# 
  1208  0FEE                     	;# 
  1209  0FEF                     	;# 
  1210  0000                     	;# 
  1211  0001                     	;# 
  1212  0002                     	;# 
  1213  0003                     	;# 
  1214  0004                     	;# 
  1215  0005                     	;# 
  1216  0006                     	;# 
  1217  0007                     	;# 
  1218  0008                     	;# 
  1219  0009                     	;# 
  1220  000A                     	;# 
  1221  000B                     	;# 
  1222  000C                     	;# 
  1223  000D                     	;# 
  1224  0011                     	;# 
  1225  0012                     	;# 
  1226  0013                     	;# 
  1227  0014                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008D                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0093                     	;# 
  1244  0094                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0097                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009A                     	;# 
  1251  009B                     	;# 
  1252  009B                     	;# 
  1253  009C                     	;# 
  1254  009D                     	;# 
  1255  009E                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  0111                     	;# 
  1259  0112                     	;# 
  1260  0113                     	;# 
  1261  0114                     	;# 
  1262  0115                     	;# 
  1263  0116                     	;# 
  1264  0117                     	;# 
  1265  0118                     	;# 
  1266  0119                     	;# 
  1267  011A                     	;# 
  1268  011B                     	;# 
  1269  011D                     	;# 
  1270  011E                     	;# 
  1271  018C                     	;# 
  1272  018D                     	;# 
  1273  0191                     	;# 
  1274  0191                     	;# 
  1275  0192                     	;# 
  1276  0193                     	;# 
  1277  0193                     	;# 
  1278  0193                     	;# 
  1279  0194                     	;# 
  1280  0195                     	;# 
  1281  0196                     	;# 
  1282  0199                     	;# 
  1283  019A                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019C                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019F                     	;# 
  1293  020C                     	;# 
  1294  020D                     	;# 
  1295  0211                     	;# 
  1296  0211                     	;# 
  1297  0212                     	;# 
  1298  0212                     	;# 
  1299  0213                     	;# 
  1300  0213                     	;# 
  1301  0214                     	;# 
  1302  0214                     	;# 
  1303  0215                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0216                     	;# 
  1307  0216                     	;# 
  1308  0217                     	;# 
  1309  0217                     	;# 
  1310  0219                     	;# 
  1311  021A                     	;# 
  1312  021B                     	;# 
  1313  021C                     	;# 
  1314  021D                     	;# 
  1315  021E                     	;# 
  1316  021F                     	;# 
  1317  0291                     	;# 
  1318  0291                     	;# 
  1319  0292                     	;# 
  1320  0293                     	;# 
  1321  0294                     	;# 
  1322  0295                     	;# 
  1323  0295                     	;# 
  1324  0296                     	;# 
  1325  0298                     	;# 
  1326  0298                     	;# 
  1327  0299                     	;# 
  1328  029A                     	;# 
  1329  029B                     	;# 
  1330  029C                     	;# 
  1331  029C                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029E                     	;# 
  1335  0311                     	;# 
  1336  0311                     	;# 
  1337  0312                     	;# 
  1338  0313                     	;# 
  1339  0318                     	;# 
  1340  0318                     	;# 
  1341  0319                     	;# 
  1342  031A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  039A                     	;# 
  1347  039C                     	;# 
  1348  039D                     	;# 
  1349  039E                     	;# 
  1350  039F                     	;# 
  1351  0415                     	;# 
  1352  0416                     	;# 
  1353  0417                     	;# 
  1354  041C                     	;# 
  1355  041D                     	;# 
  1356  041E                     	;# 
  1357  0FE4                     	;# 
  1358  0FE5                     	;# 
  1359  0FE6                     	;# 
  1360  0FE7                     	;# 
  1361  0FE8                     	;# 
  1362  0FE9                     	;# 
  1363  0FEA                     	;# 
  1364  0FEB                     	;# 
  1365  0FED                     	;# 
  1366  0FEE                     	;# 
  1367  0FEF                     	;# 
  1368  0000                     	;# 
  1369  0001                     	;# 
  1370  0002                     	;# 
  1371  0003                     	;# 
  1372  0004                     	;# 
  1373  0005                     	;# 
  1374  0006                     	;# 
  1375  0007                     	;# 
  1376  0008                     	;# 
  1377  0009                     	;# 
  1378  000A                     	;# 
  1379  000B                     	;# 
  1380  000C                     	;# 
  1381  000D                     	;# 
  1382  0011                     	;# 
  1383  0012                     	;# 
  1384  0013                     	;# 
  1385  0014                     	;# 
  1386  0015                     	;# 
  1387  0016                     	;# 
  1388  0016                     	;# 
  1389  0017                     	;# 
  1390  0018                     	;# 
  1391  0019                     	;# 
  1392  001A                     	;# 
  1393  001B                     	;# 
  1394  001C                     	;# 
  1395  001E                     	;# 
  1396  001F                     	;# 
  1397  008C                     	;# 
  1398  008D                     	;# 
  1399  0091                     	;# 
  1400  0092                     	;# 
  1401  0093                     	;# 
  1402  0094                     	;# 
  1403  0095                     	;# 
  1404  0096                     	;# 
  1405  0097                     	;# 
  1406  0098                     	;# 
  1407  0099                     	;# 
  1408  009A                     	;# 
  1409  009B                     	;# 
  1410  009B                     	;# 
  1411  009C                     	;# 
  1412  009D                     	;# 
  1413  009E                     	;# 
  1414  010C                     	;# 
  1415  010D                     	;# 
  1416  0111                     	;# 
  1417  0112                     	;# 
  1418  0113                     	;# 
  1419  0114                     	;# 
  1420  0115                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  0118                     	;# 
  1424  0119                     	;# 
  1425  011A                     	;# 
  1426  011B                     	;# 
  1427  011D                     	;# 
  1428  011E                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020C                     	;# 
  1452  020D                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0219                     	;# 
  1469  021A                     	;# 
  1470  021B                     	;# 
  1471  021C                     	;# 
  1472  021D                     	;# 
  1473  021E                     	;# 
  1474  021F                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0294                     	;# 
  1480  0295                     	;# 
  1481  0295                     	;# 
  1482  0296                     	;# 
  1483  0298                     	;# 
  1484  0298                     	;# 
  1485  0299                     	;# 
  1486  029A                     	;# 
  1487  029B                     	;# 
  1488  029C                     	;# 
  1489  029C                     	;# 
  1490  029D                     	;# 
  1491  029E                     	;# 
  1492  029E                     	;# 
  1493  0311                     	;# 
  1494  0311                     	;# 
  1495  0312                     	;# 
  1496  0313                     	;# 
  1497  0318                     	;# 
  1498  0318                     	;# 
  1499  0319                     	;# 
  1500  031A                     	;# 
  1501  0394                     	;# 
  1502  0395                     	;# 
  1503  0396                     	;# 
  1504  039A                     	;# 
  1505  039C                     	;# 
  1506  039D                     	;# 
  1507  039E                     	;# 
  1508  039F                     	;# 
  1509  0415                     	;# 
  1510  0416                     	;# 
  1511  0417                     	;# 
  1512  041C                     	;# 
  1513  041D                     	;# 
  1514  041E                     	;# 
  1515  0FE4                     	;# 
  1516  0FE5                     	;# 
  1517  0FE6                     	;# 
  1518  0FE7                     	;# 
  1519  0FE8                     	;# 
  1520  0FE9                     	;# 
  1521  0FEA                     	;# 
  1522  0FEB                     	;# 
  1523  0FED                     	;# 
  1524  0FEE                     	;# 
  1525  0FEF                     	;_data_storage
  1526                           
  1527                           	psect	idataBANK0
  1528  0002                     __pidataBANK0:
  1529                           
  1530                           ;initializer for _hall_codes
  1531  0002  347F               	retlw	127
  1532  0003  3467               	retlw	103
  1533  000D                     _PORTBbits	set	13
  1534  001C                     _T2CONbits	set	28
  1535  001C                     _T2CON	set	28
  1536  001A                     _TMR2	set	26
  1537  001B                     _PR2	set	27
  1538  0011                     _PIR1bits	set	17
  1539  000B                     _INTCONbits	set	11
  1540  009D                     _ADCON0bits	set	157
  1541  009D                     _ADCON0	set	157
  1542  009C                     _ADRESH	set	156
  1543  009B                     _ADRESL	set	155
  1544  009E                     _ADCON1	set	158
  1545  0095                     _OPTION_REGbits	set	149
  1546  008D                     _TRISB	set	141
  1547  008C                     _TRISA	set	140
  1548  0091                     _PIE1bits	set	145
  1549  0097                     _WDTCON	set	151
  1550  0098                     _OSCTUNE	set	152
  1551  0099                     _OSCCON	set	153
  1552  04D6                     _PLLR	set	1238
  1553  010C                     _LATAbits	set	268
  1554  011E                     _APFCON1	set	286
  1555  011D                     _APFCON0	set	285
  1556  010D                     _LATB	set	269
  1557  010C                     _LATA	set	268
  1558  0116                     _BORCON	set	278
  1559  018C                     _ANSELA	set	396
  1560  018D                     _ANSELB	set	397
  1561  0199                     _RCREG	set	409
  1562  019D                     _RCSTAbits	set	413
  1563  019A                     _TXREG	set	410
  1564  019E                     _TXSTAbits	set	414
  1565  019C                     _SPBRGH	set	412
  1566  019B                     _SPBRGL	set	411
  1567  019E                     _TXSTA	set	414
  1568  019D                     _RCSTA	set	413
  1569  019F                     _BAUDCON	set	415
  1570  0196                     _EECON2	set	406
  1571  0193                     _EEDATL	set	403
  1572  0194                     _EEDATH	set	404
  1573  0195                     _EECON1bits	set	405
  1574  0192                     _EEADRH	set	402
  1575  0191                     _EEADRL	set	401
  1576  020C                     _WPUA	set	524
  1577  020D                     _WPUB	set	525
  1578                           
  1579                           	psect	cinit
  1580  003C                     start_initialization:	
  1581                           ; #config settings
  1582                           
  1583  003C                     __initialization:	;BIGRAM
  1584                           
  1585                           ; Initialize objects allocated to BANK0
  1586  003C  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  1587  003F  00EE               	movwf	__pdataBANK0& (0+127)
  1588  0040  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1589  0043  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  1590                           
  1591                           ; Clear objects allocated to BIGRAM
  1592  0044  30EF               	movlw	low (0+8431)
  1593  0045  0084               	movwf	4
  1594  0046  3020               	movlw	high (0+8431)
  1595  0047  0085               	movwf	5
  1596  0048  3081               	movlw	129
  1597  0049  00FE               	movwf	btemp
  1598  004A  3000               	movlw	0
  1599  004B  00FF               	movwf	btemp+1
  1600  004C  318D  2543  3180   	fcall	clear_ram0
  1601                           
  1602                           ; Clear objects allocated to COMMON
  1603  004F  01FC               	clrf	__pbssCOMMON& (0+127)
  1604                           
  1605                           ; Clear objects allocated to BANK0
  1606  0050  3020               	movlw	low __pbssBANK0
  1607  0051  0084               	movwf	4
  1608  0052  3000               	movlw	high __pbssBANK0
  1609  0053  0085               	movwf	5
  1610  0054  3039               	movlw	57
  1611  0055  00FE               	movwf	btemp
  1612  0056  3000               	movlw	0
  1613  0057  00FF               	movwf	btemp+1
  1614  0058  318D  2543  3180   	fcall	clear_ram0
  1615                           
  1616                           ; Clear objects allocated to BANK1
  1617  005B  30A0               	movlw	low __pbssBANK1
  1618  005C  0084               	movwf	4
  1619  005D  3000               	movlw	high __pbssBANK1
  1620  005E  0085               	movwf	5
  1621  005F  3022               	movlw	34
  1622  0060  00FE               	movwf	btemp
  1623  0061  3000               	movlw	0
  1624  0062  00FF               	movwf	btemp+1
  1625  0063  318D  2543  3180   	fcall	clear_ram0
  1626  0066                     end_of_initialization:	
  1627                           ;End of C runtime variable initialization code
  1628                           
  1629  0066                     __end_of__initialization:
  1630  0066  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1631  0067  0020               	movlb	0
  1632  0068  3180  286A         	ljmp	_main	;jump to C main() function
  1633                           
  1634                           	psect	bssCOMMON
  1635  007C                     __pbssCOMMON:
  1636  007C                     _eusartRxHead:
  1637  007C                     	ds	1
  1638                           
  1639                           	psect	bssBANK0
  1640  0020                     __pbssBANK0:
  1641  0020                     _cmd_timer_len:
  1642  0020                     	ds	4
  1643  0024                     _cmd_time:
  1644  0024                     	ds	4
  1645  0028                     _receive_timer_len:
  1646  0028                     	ds	4
  1647  002C                     _receive_time:
  1648  002C                     	ds	4
  1649  0030                     send_stat@F3032:
  1650  0030                     	ds	2
  1651  0032                     main@old_cmd_exe_counter:
  1652  0032                     	ds	2
  1653  0034                     _cmd_exe_counter:
  1654  0034                     	ds	2
  1655  0036                     TMR2_ISR@CountCallBack:
  1656  0036                     	ds	2
  1657  0038                     _TMR2_InterruptHandler:
  1658  0038                     	ds	2
  1659  003A                     _ADC_InterruptHandler:
  1660  003A                     	ds	2
  1661  003C                     _EUSART_ErrorHandler:
  1662  003C                     	ds	2
  1663  003E                     _EUSART_OverrunErrorHandler:
  1664  003E                     	ds	2
  1665  0040                     _EUSART_FramingErrorHandler:
  1666  0040                     	ds	2
  1667  0042                     _EUSART_RxDefaultInterruptHandler:
  1668  0042                     	ds	2
  1669  0044                     _EUSART_TxDefaultInterruptHandler:
  1670  0044                     	ds	2
  1671  0046                     main@last_state:
  1672  0046                     	ds	1
  1673  0047                     main@data_storage_counter:
  1674  0047                     	ds	1
  1675  0048                     main@control_byte:
  1676  0048                     	ds	1
  1677  0049                     _button_status:
  1678  0049                     	ds	1
  1679  004A                     _new_hall_code_close:
  1680  004A                     	ds	1
  1681  004B                     _new_hall_code_open:
  1682  004B                     	ds	1
  1683  004C                     _lock_status:
  1684  004C                     	ds	1
  1685  004D                     _status_storage:
  1686  004D                     	ds	1
  1687  004E                     _request_storage:
  1688  004E                     	ds	1
  1689  004F                     _cmd:
  1690  004F                     	ds	1
  1691  0050                     _cmd_exe:
  1692  0050                     	ds	1
  1693  0051                     _cmd_state:
  1694  0051                     	ds	1
  1695  0052                     _working_state:
  1696  0052                     	ds	1
  1697  0053                     _eusartRxLastError:
  1698  0053                     	ds	1
  1699  0054                     _eusartRxCount:
  1700  0054                     	ds	1
  1701  0055                     _eusartRxTail:
  1702  0055                     	ds	1
  1703  0056                     _eusartTxBufferRemaining:
  1704  0056                     	ds	1
  1705  0057                     _eusartTxTail:
  1706  0057                     	ds	1
  1707  0058                     _eusartTxHead:
  1708  0058                     	ds	1
  1709                           
  1710                           	psect	dataBANK0
  1711  006E                     __pdataBANK0:
  1712  006E                     _hall_codes:
  1713  006E                     	ds	2
  1714                           
  1715                           	psect	bssBANK1
  1716  00A0                     __pbssBANK1:
  1717  00A0                     _eusartRxStatusBuffer:
  1718  00A0                     	ds	8
  1719  00A8                     _eusartRxBuffer:
  1720  00A8                     	ds	8
  1721  00B0                     _eusartTxBuffer:
  1722  00B0                     	ds	8
  1723  00B8                     _button_time:
  1724  00B8                     	ds	4
  1725  00BC                     send_req@F3022:
  1726  00BC                     	ds	3
  1727  00BF                     send_cmd@F3018:
  1728  00BF                     	ds	3
  1729                           
  1730                           	psect	clrtext
  1731  0D43                     clear_ram0:	
  1732                           ;	Called with FSR0 containing the base address, and
  1733                           ;	btemp/btemp+1 has the size to clear
  1734                           
  1735  0D43  0064               	clrwdt	;clear the watchdog before getting into this loop
  1736  0D44                     clrloop0:
  1737  0D44  0180               	clrf	0	;clear RAM location pointed to by FSR
  1738  0D45  3101               	addfsr 0,1
  1739  0D46  3001               	movlw	1
  1740  0D47  02FE               	subwf	btemp,f
  1741  0D48  3000               	movlw	0
  1742  0D49  3BFF               	subwfb	btemp+1,f
  1743  0D4A  087F               	movf	btemp+1,w
  1744  0D4B  047E               	iorwf	btemp,w
  1745  0D4C  1D03               	skipz
  1746  0D4D  2D44               	goto	clrloop0	;have we reached the end yet?
  1747  0D4E  3400               	retlw	0	;all done for this memory range, return
  1748                           
  1749                           	psect	cstackCOMMON
  1750  0070                     __pcstackCOMMON:
  1751  0070                     ?_PIN_MANAGER_Initialize:
  1752  0070                     ?_OSCILLATOR_Initialize:	
  1753                           ; 1 bytes @ 0x0
  1754                           
  1755  0070                     ?_WDT_Initialize:	
  1756                           ; 1 bytes @ 0x0
  1757                           
  1758  0070                     ?_TMR2_Initialize:	
  1759                           ; 1 bytes @ 0x0
  1760                           
  1761  0070                     ?_ADC_Initialize:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0070                     ?_EUSART_Initialize:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0070                     ?_EUSART_Receive_ISR:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0070                     ?_EUSART_Transmit_ISR:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0070                     ??_EUSART_Transmit_ISR:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0070                     ?_EUSART_DefaultErrorHandler:	
  1789                           ; 1 bytes @ 0x0
  1790                           
  1791  0070                     ?_EUSART_RxDataHandler:	
  1792                           ; 1 bytes @ 0x0
  1793                           
  1794  0070                     ??_EUSART_RxDataHandler:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0070                     ?_TMR2_ISR:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  0070                     ??_TMR2_ISR:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  0070                     ?_TMR2_DefaultInterruptHandler:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  0070                     ??_TMR2_DefaultInterruptHandler:	
  1807                           ; 1 bytes @ 0x0
  1808                           
  1809  0070                     ?_TMR2_CallBack:	
  1810                           ; 1 bytes @ 0x0
  1811                           
  1812  0070                     ??_TMR2_CallBack:	
  1813                           ; 1 bytes @ 0x0
  1814                           
  1815  0070                     ?_read_hall_codes:	
  1816                           ; 1 bytes @ 0x0
  1817                           
  1818  0070                     ?_stop_cmd:	
  1819                           ; 1 bytes @ 0x0
  1820                           
  1821  0070                     ?_send_stat:	
  1822                           ; 1 bytes @ 0x0
  1823                           
  1824  0070                     ?_send_req:	
  1825                           ; 1 bytes @ 0x0
  1826                           
  1827  0070                     ?_wait_for_requested:	
  1828                           ; 1 bytes @ 0x0
  1829                           
  1830  0070                     ?_SYSTEM_Initialize:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0070                     ?_DATAEE_ReadByte:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836  0070                     ?_EUSART_is_rx_ready:	
  1837                           ; 1 bytes @ 0x0
  1838                           
  1839  0070                     ?_EUSART_is_tx_done:	
  1840                           ; 1 bytes @ 0x0
  1841                           
  1842  0070                     ?_EUSART_Read:	
  1843                           ; 1 bytes @ 0x0
  1844                           
  1845  0070                     ?_EUSART_Write:	
  1846                           ; 1 bytes @ 0x0
  1847                           
  1848  0070                     ?_INTERRUPT_InterruptManager:	
  1849                           ; 1 bytes @ 0x0
  1850                           
  1851  0070                     ?_ADC_StartConversion:	
  1852                           ; 1 bytes @ 0x0
  1853                           
  1854  0070                     ?_ADC_IsConversionDone:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0070                     ?_ADC_GetConversionResult:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0070                     ?_timer_up:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0070                     ??_timer_up:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0070                     ?_main:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869                           
  1870                           ; 1 bytes @ 0x0
  1871  0070                     	ds	1
  1872  0071                     ??_PIN_MANAGER_Initialize:
  1873  0071                     ??_OSCILLATOR_Initialize:	
  1874                           ; 1 bytes @ 0x1
  1875                           
  1876  0071                     ??_WDT_Initialize:	
  1877                           ; 1 bytes @ 0x1
  1878                           
  1879  0071                     ??_ADC_Initialize:	
  1880                           ; 1 bytes @ 0x1
  1881                           
  1882  0071                     ?_EUSART_SetRxInterruptHandler:	
  1883                           ; 1 bytes @ 0x1
  1884                           
  1885  0071                     ??_EUSART_Receive_ISR:	
  1886                           ; 1 bytes @ 0x1
  1887                           
  1888  0071                     ?_EUSART_SetTxInterruptHandler:	
  1889                           ; 1 bytes @ 0x1
  1890                           
  1891  0071                     ?_EUSART_SetFramingErrorHandler:	
  1892                           ; 1 bytes @ 0x1
  1893                           
  1894  0071                     ?_EUSART_SetOverrunErrorHandler:	
  1895                           ; 1 bytes @ 0x1
  1896                           
  1897  0071                     ?_EUSART_SetErrorHandler:	
  1898                           ; 1 bytes @ 0x1
  1899                           
  1900  0071                     ??_EUSART_DefaultErrorHandler:	
  1901                           ; 1 bytes @ 0x1
  1902                           
  1903  0071                     ?_TMR2_SetInterruptHandler:	
  1904                           ; 1 bytes @ 0x1
  1905                           
  1906  0071                     ??_stop_cmd:	
  1907                           ; 1 bytes @ 0x1
  1908                           
  1909  0071                     ??_wait_for_requested:	
  1910                           ; 1 bytes @ 0x1
  1911                           
  1912  0071                     ?_DATAEE_WriteByte:	
  1913                           ; 1 bytes @ 0x1
  1914                           
  1915  0071                     ??_DATAEE_ReadByte:	
  1916                           ; 1 bytes @ 0x1
  1917                           
  1918  0071                     ??_EUSART_is_rx_ready:	
  1919                           ; 1 bytes @ 0x1
  1920                           
  1921  0071                     ??_EUSART_is_tx_done:	
  1922                           ; 1 bytes @ 0x1
  1923                           
  1924  0071                     ??_EUSART_Read:	
  1925                           ; 1 bytes @ 0x1
  1926                           
  1927  0071                     ??_EUSART_Write:	
  1928                           ; 1 bytes @ 0x1
  1929                           
  1930  0071                     ??_INTERRUPT_InterruptManager:	
  1931                           ; 1 bytes @ 0x1
  1932                           
  1933  0071                     ??_ADC_StartConversion:	
  1934                           ; 1 bytes @ 0x1
  1935                           
  1936  0071                     ??_ADC_IsConversionDone:	
  1937                           ; 1 bytes @ 0x1
  1938                           
  1939  0071                     ??_ADC_GetConversionResult:	
  1940                           ; 1 bytes @ 0x1
  1941                           
  1942  0071                     ?_del_array:	
  1943                           ; 1 bytes @ 0x1
  1944                           
  1945  0071                     ?_seek_confirmation:	
  1946                           ; 1 bytes @ 0x1
  1947                           
  1948  0071                     ?___wmul:	
  1949                           ; 2 bytes @ 0x1
  1950                           
  1951  0071                     DATAEE_WriteByte@bData:	
  1952                           ; 2 bytes @ 0x1
  1953                           
  1954  0071                     DATAEE_ReadByte@bAdd:	
  1955                           ; 1 bytes @ 0x1
  1956                           
  1957  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1958                           ; 1 bytes @ 0x1
  1959                           
  1960  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1961                           ; 2 bytes @ 0x1
  1962                           
  1963  0071                     EUSART_SetErrorHandler@interruptHandler:	
  1964                           ; 2 bytes @ 0x1
  1965                           
  1966  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1967                           ; 2 bytes @ 0x1
  1968                           
  1969  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1970                           ; 2 bytes @ 0x1
  1971                           
  1972  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  1973                           ; 2 bytes @ 0x1
  1974                           
  1975  0071                     del_array@array:	
  1976                           ; 2 bytes @ 0x1
  1977                           
  1978  0071                     seek_confirmation@wait_num:	
  1979                           ; 2 bytes @ 0x1
  1980                           
  1981  0071                     ___wmul@multiplier:	
  1982                           ; 2 bytes @ 0x1
  1983                           
  1984                           
  1985                           ; 2 bytes @ 0x1
  1986  0071                     	ds	1
  1987  0072                     ??_read_hall_codes:
  1988  0072                     ?_compare_pw:	
  1989                           ; 1 bytes @ 0x2
  1990                           
  1991  0072                     ??_DATAEE_WriteByte:	
  1992                           ; 1 bytes @ 0x2
  1993                           
  1994  0072                     DATAEE_WriteByte@bAdd:	
  1995                           ; 1 bytes @ 0x2
  1996                           
  1997  0072                     EUSART_Read@readValue:	
  1998                           ; 1 bytes @ 0x2
  1999                           
  2000  0072                     EUSART_Write@txData:	
  2001                           ; 1 bytes @ 0x2
  2002                           
  2003  0072                     wait_for_requested@req:	
  2004                           ; 1 bytes @ 0x2
  2005                           
  2006  0072                     compare_pw@pw:	
  2007                           ; 1 bytes @ 0x2
  2008                           
  2009                           
  2010                           ; 2 bytes @ 0x2
  2011  0072                     	ds	1
  2012  0073                     ??_TMR2_Initialize:
  2013  0073                     ??_EUSART_Initialize:	
  2014                           ; 1 bytes @ 0x3
  2015                           
  2016  0073                     ??_EUSART_SetRxInterruptHandler:	
  2017                           ; 1 bytes @ 0x3
  2018                           
  2019  0073                     ??_EUSART_SetTxInterruptHandler:	
  2020                           ; 1 bytes @ 0x3
  2021                           
  2022  0073                     ??_EUSART_SetFramingErrorHandler:	
  2023                           ; 1 bytes @ 0x3
  2024                           
  2025  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2026                           ; 1 bytes @ 0x3
  2027                           
  2028  0073                     ??_EUSART_SetErrorHandler:	
  2029                           ; 1 bytes @ 0x3
  2030                           
  2031  0073                     ??_TMR2_SetInterruptHandler:	
  2032                           ; 1 bytes @ 0x3
  2033                           
  2034  0073                     ?_send_msg_stopping:	
  2035                           ; 1 bytes @ 0x3
  2036                           
  2037  0073                     DATAEE_WriteByte@GIEBitValue:	
  2038                           ; 1 bytes @ 0x3
  2039                           
  2040  0073                     del_array@len:	
  2041                           ; 1 bytes @ 0x3
  2042                           
  2043  0073                     send_msg_stopping@msg:	
  2044                           ; 2 bytes @ 0x3
  2045                           
  2046  0073                     seek_confirmation@continue_num:	
  2047                           ; 2 bytes @ 0x3
  2048                           
  2049  0073                     ___wmul@multiplicand:	
  2050                           ; 2 bytes @ 0x3
  2051                           
  2052                           
  2053                           ; 2 bytes @ 0x3
  2054  0073                     	ds	1
  2055  0074                     ?_save_pw:
  2056  0074                     ?_save_hall_codes:	
  2057                           ; 1 bytes @ 0x4
  2058                           
  2059  0074                     ??_SYSTEM_Initialize:	
  2060                           ; 1 bytes @ 0x4
  2061                           
  2062  0074                     compare_pw@len:	
  2063                           ; 1 bytes @ 0x4
  2064                           
  2065  0074                     save_hall_codes@close:	
  2066                           ; 1 bytes @ 0x4
  2067                           
  2068  0074                     save_pw@pw:	
  2069                           ; 1 bytes @ 0x4
  2070                           
  2071                           
  2072                           ; 2 bytes @ 0x4
  2073  0074                     	ds	1
  2074  0075                     ??_compare_pw:
  2075  0075                     ??_save_hall_codes:	
  2076                           ; 1 bytes @ 0x5
  2077                           
  2078  0075                     ??_del_array:	
  2079                           ; 1 bytes @ 0x5
  2080                           
  2081  0075                     ??___wmul:	
  2082                           ; 1 bytes @ 0x5
  2083                           
  2084  0075                     send_msg_stopping@len:	
  2085                           ; 1 bytes @ 0x5
  2086                           
  2087  0075                     seek_confirmation@retry_num:	
  2088                           ; 1 bytes @ 0x5
  2089                           
  2090  0075                     ___wmul@product:	
  2091                           ; 2 bytes @ 0x5
  2092                           
  2093                           
  2094                           ; 2 bytes @ 0x5
  2095  0075                     	ds	1
  2096  0076                     ??_send_msg_stopping:
  2097  0076                     compare_pw@indata:	
  2098                           ; 1 bytes @ 0x6
  2099                           
  2100  0076                     save_pw@len:	
  2101                           ; 1 bytes @ 0x6
  2102                           
  2103  0076                     save_hall_codes@open:	
  2104                           ; 1 bytes @ 0x6
  2105                           
  2106  0076                     del_array@x:	
  2107                           ; 1 bytes @ 0x6
  2108                           
  2109                           
  2110                           ; 2 bytes @ 0x6
  2111  0076                     	ds	1
  2112  0077                     ??_save_pw:
  2113  0077                     ?___awdiv:	
  2114                           ; 1 bytes @ 0x7
  2115                           
  2116  0077                     compare_pw@res:	
  2117                           ; 2 bytes @ 0x7
  2118                           
  2119  0077                     send_msg_stopping@x:	
  2120                           ; 1 bytes @ 0x7
  2121                           
  2122  0077                     seek_confirmation@cancel_num:	
  2123                           ; 2 bytes @ 0x7
  2124                           
  2125  0077                     ___awdiv@divisor:	
  2126                           ; 2 bytes @ 0x7
  2127                           
  2128                           
  2129                           ; 2 bytes @ 0x7
  2130  0077                     	ds	1
  2131  0078                     compare_pw@eedata:
  2132  0078                     save_pw@x:	
  2133                           ; 1 bytes @ 0x8
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  0078                     	ds	1
  2138  0079                     ??_send_stat:
  2139  0079                     ??_send_req:	
  2140                           ; 1 bytes @ 0x9
  2141                           
  2142  0079                     ??_seek_confirmation:	
  2143                           ; 1 bytes @ 0x9
  2144                           
  2145  0079                     compare_pw@x:	
  2146                           ; 1 bytes @ 0x9
  2147                           
  2148  0079                     ___awdiv@dividend:	
  2149                           ; 2 bytes @ 0x9
  2150                           
  2151                           
  2152                           ; 2 bytes @ 0x9
  2153  0079                     	ds	2
  2154  007B                     ??___awdiv:
  2155                           
  2156                           ; 1 bytes @ 0xB
  2157  007B                     	ds	1
  2158                           
  2159                           	psect	cstackBANK0
  2160  0059                     __pcstackBANK0:
  2161  0059                     send_req@var:
  2162  0059                     send_stat@stat:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0059                     ___awdiv@counter:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168                           
  2169                           ; 1 bytes @ 0x0
  2170  0059                     	ds	1
  2171  005A                     ___awdiv@sign:
  2172  005A                     send_stat@status_protocol:	
  2173                           ; 1 bytes @ 0x1
  2174                           
  2175  005A                     send_req@request_protocol:	
  2176                           ; 2 bytes @ 0x1
  2177                           
  2178                           
  2179                           ; 3 bytes @ 0x1
  2180  005A                     	ds	1
  2181  005B                     ___awdiv@quotient:
  2182                           
  2183                           ; 2 bytes @ 0x2
  2184  005B                     	ds	2
  2185  005D                     ?_door_status_changed:
  2186  005D                     door_status_changed@val:	
  2187                           ; 1 bytes @ 0x4
  2188                           
  2189                           
  2190                           ; 2 bytes @ 0x4
  2191  005D                     	ds	2
  2192  005F                     ??_door_status_changed:
  2193                           
  2194                           ; 1 bytes @ 0x6
  2195  005F                     	ds	4
  2196  0063                     door_status_changed@open_or_close:
  2197                           
  2198                           ; 1 bytes @ 0xA
  2199  0063                     	ds	1
  2200  0064                     ??_main:
  2201                           
  2202                           ; 1 bytes @ 0xB
  2203  0064                     	ds	6
  2204  006A                     main@res:
  2205                           
  2206                           ; 1 bytes @ 0x11
  2207  006A                     	ds	1
  2208  006B                     main@res_914:
  2209                           
  2210                           ; 1 bytes @ 0x12
  2211  006B                     	ds	1
  2212  006C                     main@new_button_status:
  2213                           
  2214                           ; 1 bytes @ 0x13
  2215  006C                     	ds	1
  2216  006D                     main@input:
  2217                           
  2218                           ; 1 bytes @ 0x14
  2219  006D                     	ds	1
  2220                           
  2221                           	psect	maintext
  2222  006A                     __pmaintext:	
  2223 ;;
  2224 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2225 ;;
  2226 ;; *************** function _main *****************
  2227 ;; Defined at:
  2228 ;;		line 139 in file "main.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;		None
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  res             1   18[BANK0 ] unsigned char 
  2233 ;;  res             1   17[BANK0 ] unsigned char 
  2234 ;;  input           1   20[BANK0 ] unsigned char 
  2235 ;;  new_button_s    1   19[BANK0 ] _Bool 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : B1F/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2245 ;;      Params:         0       0       0       0       0       0
  2246 ;;      Locals:         0       4       0       0       0       0
  2247 ;;      Temps:          0       6       0       0       0       0
  2248 ;;      Totals:         0      10       0       0       0       0
  2249 ;;Total ram usage:       10 bytes
  2250 ;; Hardware stack levels required when called: 7
  2251 ;; This function calls:
  2252 ;;		_ADC_GetConversionResult
  2253 ;;		_ADC_Initialize
  2254 ;;		_ADC_IsConversionDone
  2255 ;;		_ADC_StartConversion
  2256 ;;		_EUSART_Initialize
  2257 ;;		_EUSART_Read
  2258 ;;		_EUSART_is_rx_ready
  2259 ;;		_SYSTEM_Initialize
  2260 ;;		_TMR2_Initialize
  2261 ;;		_TMR2_SetInterruptHandler
  2262 ;;		_compare_pw
  2263 ;;		_door_status_changed
  2264 ;;		_read_hall_codes
  2265 ;;		_save_hall_codes
  2266 ;;		_save_pw
  2267 ;;		_seek_confirmation
  2268 ;;		_send_req
  2269 ;;		_send_stat
  2270 ;;		_stop_cmd
  2271 ;;		_wait_for_requested
  2272 ;; This function is called by:
  2273 ;;		Startup code after reset
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           
  2278                           ;psect for function _main
  2279  006A                     _main:
  2280  006A                     l4397:	
  2281                           ;incstack = 0
  2282                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2283                           
  2284                           
  2285                           ;main.c: 141:     SYSTEM_Initialize();
  2286  006A  3187  27ED  3180   	fcall	_SYSTEM_Initialize
  2287                           
  2288                           ;main.c: 142:     EUSART_Initialize();
  2289  006D  318F  27C0  3180   	fcall	_EUSART_Initialize
  2290                           
  2291                           ;main.c: 143:     ADC_Initialize();
  2292  0070  318D  251A  3180   	fcall	_ADC_Initialize
  2293                           
  2294                           ;main.c: 144:     TMR2_Initialize();
  2295  0073  318D  256D  3180   	fcall	_TMR2_Initialize
  2296  0076                     l4399:
  2297                           
  2298                           ;main.c: 150:     (INTCONbits.GIE = 1);
  2299  0076  178B               	bsf	11,7	;volatile
  2300  0077                     l4401:
  2301                           
  2302                           ;main.c: 153:     (INTCONbits.PEIE = 1);
  2303  0077  170B               	bsf	11,6	;volatile
  2304  0078                     l4403:
  2305                           
  2306                           ;main.c: 155:     ADC_StartConversion();
  2307  0078  318C  24DC  3180   	fcall	_ADC_StartConversion
  2308  007B                     l4405:
  2309                           
  2310                           ;main.c: 156:     TMR2_SetInterruptHandler(timer_up);
  2311  007B  3022               	movlw	low _timer_up
  2312  007C  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2313  007D  3007               	movlw	high _timer_up
  2314  007E  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2315  007F  318D  250D  3180   	fcall	_TMR2_SetInterruptHandler
  2316  0082                     l4407:
  2317                           
  2318                           ;main.c: 158:     read_hall_codes();
  2319  0082  318D  255C  3180   	fcall	_read_hall_codes
  2320  0085                     l4409:
  2321                           
  2322                           ;main.c: 162:         _Bool new_button_status = !PORTBbits.RB0;
  2323  0085  1003               	clrc
  2324  0086  0020               	movlb	0	; select bank0
  2325  0087  1C0D               	btfss	13,0	;volatile
  2326  0088  1403               	setc
  2327  0089  3000               	movlw	0
  2328  008A  1803               	btfsc	3,0
  2329  008B  3001               	movlw	1
  2330  008C  00EC               	movwf	main@new_button_status
  2331  008D                     l4411:
  2332                           
  2333                           ;main.c: 163:         if(new_button_status != button_status) {
  2334  008D  086C               	movf	main@new_button_status,w
  2335  008E  0649               	xorwf	_button_status,w
  2336  008F  1903               	skipnz
  2337  0090  2892               	goto	u2651
  2338  0091  2893               	goto	u2650
  2339  0092                     u2651:
  2340  0092  28C1               	goto	l477
  2341  0093                     u2650:
  2342  0093                     l4413:
  2343                           
  2344                           ;main.c: 164:             if(button_status && button_time < 50) {
  2345  0093  0849               	movf	_button_status,w
  2346  0094  1903               	btfsc	3,2
  2347  0095  2897               	goto	u2661
  2348  0096  2898               	goto	u2660
  2349  0097                     u2661:
  2350  0097  28B8               	goto	l4421
  2351  0098                     u2660:
  2352  0098                     l4415:
  2353  0098  0021               	movlb	1	; select bank1
  2354  0099  1BBB               	btfsc	(_button_time+3)^(0+128),7
  2355  009A  28AA               	goto	u2670
  2356  009B  083B               	movf	(_button_time+3)^(0+128),w
  2357  009C  1D03               	btfss	3,2
  2358  009D  28A9               	goto	u2671
  2359  009E  083A               	movf	(_button_time+2)^(0+128),w
  2360  009F  1D03               	btfss	3,2
  2361  00A0  28A9               	goto	u2671
  2362  00A1  0839               	movf	(_button_time+1)^(0+128),w
  2363  00A2  1D03               	btfss	3,2
  2364  00A3  28A9               	goto	u2671
  2365  00A4  3032               	movlw	50
  2366  00A5  0238               	subwf	_button_time^(0+128),w
  2367  00A6  1803               	btfsc	3,0
  2368  00A7  28A9               	goto	u2671
  2369  00A8  28AA               	goto	u2670
  2370  00A9                     u2671:
  2371  00A9  28B8               	goto	l4421
  2372  00AA                     u2670:
  2373  00AA                     l4417:
  2374                           
  2375                           ;main.c: 165:                 if(lock_status) {
  2376  00AA  0020               	movlb	0	; select bank0
  2377  00AB  084C               	movf	_lock_status,w
  2378  00AC  1903               	btfsc	3,2
  2379  00AD  28AF               	goto	u2681
  2380  00AE  28B0               	goto	u2680
  2381  00AF                     u2681:
  2382  00AF  28B5               	goto	l479
  2383  00B0                     u2680:
  2384  00B0                     l4419:
  2385                           
  2386                           ;main.c: 166:                     working_state = WAITFORCLOSE;
  2387  00B0  3003               	movlw	3
  2388  00B1  00E4               	movwf	??_main
  2389  00B2  0864               	movf	??_main,w
  2390  00B3  00D2               	movwf	_working_state
  2391                           
  2392                           ;main.c: 167:                 }else {
  2393  00B4  28C1               	goto	l477
  2394  00B5                     l479:
  2395                           
  2396                           ;main.c: 168:                     working_state = OPENLOCK;
  2397  00B5  01D2               	clrf	_working_state
  2398  00B6  0AD2               	incf	_working_state,f
  2399  00B7  28C1               	goto	l477
  2400  00B8                     l4421:
  2401                           
  2402                           ;main.c: 171:                 button_time = 0;
  2403  00B8  3000               	movlw	0
  2404  00B9  0021               	movlb	1	; select bank1
  2405  00BA  00BB               	movwf	(_button_time+3)^(0+128)
  2406  00BB  3000               	movlw	0
  2407  00BC  00BA               	movwf	(_button_time+2)^(0+128)
  2408  00BD  3000               	movlw	0
  2409  00BE  00B9               	movwf	(_button_time+1)^(0+128)
  2410  00BF  3000               	movlw	0
  2411  00C0  00B8               	movwf	_button_time^(0+128)
  2412  00C1                     l477:	
  2413                           ;main.c: 173:         }
  2414                           
  2415                           
  2416                           ;main.c: 175:         button_status = new_button_status;
  2417  00C1  0020               	movlb	0	; select bank0
  2418  00C2  086C               	movf	main@new_button_status,w
  2419  00C3  00E4               	movwf	??_main
  2420  00C4  0864               	movf	??_main,w
  2421  00C5  00C9               	movwf	_button_status
  2422  00C6                     l4423:
  2423                           
  2424                           ;main.c: 176:         button_status = !PORTBbits.RB0;
  2425  00C6  1003               	clrc
  2426  00C7  1C0D               	btfss	13,0	;volatile
  2427  00C8  1403               	setc
  2428  00C9  3000               	movlw	0
  2429  00CA  1803               	btfsc	3,0
  2430  00CB  3001               	movlw	1
  2431  00CC  00C9               	movwf	_button_status
  2432  00CD                     l4425:
  2433                           
  2434                           ;main.c: 177:         if(receive_timer_len > 0 && receive_time > receive_timer_len) {
  2435  00CD  1BAB               	btfsc	_receive_timer_len+3,7
  2436  00CE  28DD               	goto	u2691
  2437  00CF  082B               	movf	_receive_timer_len+3,w
  2438  00D0  1D03               	btfss	3,2
  2439  00D1  28DE               	goto	u2690
  2440  00D2  082A               	movf	_receive_timer_len+2,w
  2441  00D3  1D03               	btfss	3,2
  2442  00D4  28DE               	goto	u2690
  2443  00D5  0829               	movf	_receive_timer_len+1,w
  2444  00D6  1D03               	btfss	3,2
  2445  00D7  28DE               	goto	u2690
  2446  00D8  3001               	movlw	1
  2447  00D9  0228               	subwf	_receive_timer_len,w
  2448  00DA  1C03               	btfss	3,0
  2449  00DB  28DD               	goto	u2691
  2450  00DC  28DE               	goto	u2690
  2451  00DD                     u2691:
  2452  00DD  2908               	goto	l4433
  2453  00DE                     u2690:
  2454  00DE                     l4427:
  2455  00DE  0020               	movlb	0	; select bank0
  2456  00DF  082B               	movf	_receive_timer_len+3,w
  2457  00E0  3A80               	xorlw	128
  2458  00E1  00E4               	movwf	??_main
  2459  00E2  082F               	movf	_receive_time+3,w
  2460  00E3  3A80               	xorlw	128
  2461  00E4  0264               	subwf	??_main,w
  2462  00E5  1D03               	skipz
  2463  00E6  28F1               	goto	u2703
  2464  00E7  082E               	movf	_receive_time+2,w
  2465  00E8  022A               	subwf	_receive_timer_len+2,w
  2466  00E9  1D03               	skipz
  2467  00EA  28F1               	goto	u2703
  2468  00EB  082D               	movf	_receive_time+1,w
  2469  00EC  0229               	subwf	_receive_timer_len+1,w
  2470  00ED  1D03               	skipz
  2471  00EE  28F1               	goto	u2703
  2472  00EF  082C               	movf	_receive_time,w
  2473  00F0  0228               	subwf	_receive_timer_len,w
  2474  00F1                     u2703:
  2475  00F1  1803               	skipnc
  2476  00F2  28F4               	goto	u2701
  2477  00F3  28F5               	goto	u2700
  2478  00F4                     u2701:
  2479  00F4  2908               	goto	l4433
  2480  00F5                     u2700:
  2481  00F5                     l4429:
  2482                           
  2483                           ;main.c: 178:             receive_time = 0;
  2484  00F5  3000               	movlw	0
  2485  00F6  00AF               	movwf	_receive_time+3
  2486  00F7  3000               	movlw	0
  2487  00F8  00AE               	movwf	_receive_time+2
  2488  00F9  3000               	movlw	0
  2489  00FA  00AD               	movwf	_receive_time+1
  2490  00FB  3000               	movlw	0
  2491  00FC  00AC               	movwf	_receive_time
  2492                           
  2493                           ;main.c: 179:             receive_timer_len = 0;
  2494  00FD  3000               	movlw	0
  2495  00FE  00AB               	movwf	_receive_timer_len+3
  2496  00FF  3000               	movlw	0
  2497  0100  00AA               	movwf	_receive_timer_len+2
  2498  0101  3000               	movlw	0
  2499  0102  00A9               	movwf	_receive_timer_len+1
  2500  0103  3000               	movlw	0
  2501  0104  00A8               	movwf	_receive_timer_len
  2502  0105                     l4431:
  2503                           
  2504                           ;main.c: 180:             stop_cmd();
  2505  0105  318D  257F  3180   	fcall	_stop_cmd
  2506  0108                     l4433:
  2507                           
  2508                           ;main.c: 182:         if(cmd_timer_len > 0 && cmd_time > cmd_timer_len) {
  2509  0108  0020               	movlb	0	; select bank0
  2510  0109  1BA3               	btfsc	_cmd_timer_len+3,7
  2511  010A  2919               	goto	u2711
  2512  010B  0823               	movf	_cmd_timer_len+3,w
  2513  010C  1D03               	btfss	3,2
  2514  010D  291A               	goto	u2710
  2515  010E  0822               	movf	_cmd_timer_len+2,w
  2516  010F  1D03               	btfss	3,2
  2517  0110  291A               	goto	u2710
  2518  0111  0821               	movf	_cmd_timer_len+1,w
  2519  0112  1D03               	btfss	3,2
  2520  0113  291A               	goto	u2710
  2521  0114  3001               	movlw	1
  2522  0115  0220               	subwf	_cmd_timer_len,w
  2523  0116  1C03               	btfss	3,0
  2524  0117  2919               	goto	u2711
  2525  0118  291A               	goto	u2710
  2526  0119                     u2711:
  2527  0119  2938               	goto	l4441
  2528  011A                     u2710:
  2529  011A                     l4435:
  2530  011A  0020               	movlb	0	; select bank0
  2531  011B  0823               	movf	_cmd_timer_len+3,w
  2532  011C  3A80               	xorlw	128
  2533  011D  00E4               	movwf	??_main
  2534  011E  0827               	movf	_cmd_time+3,w
  2535  011F  3A80               	xorlw	128
  2536  0120  0264               	subwf	??_main,w
  2537  0121  1D03               	skipz
  2538  0122  292D               	goto	u2723
  2539  0123  0826               	movf	_cmd_time+2,w
  2540  0124  0222               	subwf	_cmd_timer_len+2,w
  2541  0125  1D03               	skipz
  2542  0126  292D               	goto	u2723
  2543  0127  0825               	movf	_cmd_time+1,w
  2544  0128  0221               	subwf	_cmd_timer_len+1,w
  2545  0129  1D03               	skipz
  2546  012A  292D               	goto	u2723
  2547  012B  0824               	movf	_cmd_time,w
  2548  012C  0220               	subwf	_cmd_timer_len,w
  2549  012D                     u2723:
  2550  012D  1803               	skipnc
  2551  012E  2930               	goto	u2721
  2552  012F  2931               	goto	u2720
  2553  0130                     u2721:
  2554  0130  2938               	goto	l4441
  2555  0131                     u2720:
  2556  0131                     l4437:
  2557                           
  2558                           ;main.c: 183:             send_stat(CANCELD);
  2559  0131  3008               	movlw	8
  2560  0132  318D  25C1  3180   	fcall	_send_stat
  2561  0135                     l4439:
  2562                           
  2563                           ;main.c: 184:             stop_cmd();
  2564  0135  318D  257F  3180   	fcall	_stop_cmd
  2565  0138                     l4441:
  2566                           
  2567                           ;main.c: 186:         if (EUSART_is_rx_ready()) {
  2568  0138  318D  2522  3180   	fcall	_EUSART_is_rx_ready
  2569  013B  3A00               	xorlw	0
  2570  013C  1903               	skipnz
  2571  013D  293F               	goto	u2731
  2572  013E  2940               	goto	u2730
  2573  013F                     u2731:
  2574  013F  2AF2               	goto	l4571
  2575  0140                     u2730:
  2576  0140                     l4443:
  2577                           
  2578                           ;main.c: 187:             receive_timer_len = 50;
  2579  0140  3000               	movlw	0
  2580  0141  0020               	movlb	0	; select bank0
  2581  0142  00AB               	movwf	_receive_timer_len+3
  2582  0143  3000               	movlw	0
  2583  0144  00AA               	movwf	_receive_timer_len+2
  2584  0145  3000               	movlw	0
  2585  0146  00A9               	movwf	_receive_timer_len+1
  2586  0147  3032               	movlw	50
  2587  0148  00A8               	movwf	_receive_timer_len
  2588                           
  2589                           ;main.c: 188:             receive_time = 0;
  2590  0149  3000               	movlw	0
  2591  014A  00AF               	movwf	_receive_time+3
  2592  014B  3000               	movlw	0
  2593  014C  00AE               	movwf	_receive_time+2
  2594  014D  3000               	movlw	0
  2595  014E  00AD               	movwf	_receive_time+1
  2596  014F  3000               	movlw	0
  2597  0150  00AC               	movwf	_receive_time
  2598  0151                     l4445:
  2599                           
  2600                           ;main.c: 189:             uint8_t input = EUSART_Read();
  2601  0151  318E  26D4  3180   	fcall	_EUSART_Read
  2602  0154  0020               	movlb	0	; select bank0
  2603  0155  00E4               	movwf	??_main
  2604  0156  0864               	movf	??_main,w
  2605  0157  00ED               	movwf	main@input
  2606                           
  2607                           ;main.c: 190:             static uint8_t control_byte;;main.c: 191:             static u
      +                          int8_t data_storage_counter = 0;;main.c: 192:             static enum commandcontroll la
      +                          st_state = WAITFORCMD;;main.c: 193:             switch (cmd_state) {
  2608  0158  2AC6               	goto	l4565
  2609  0159                     l4447:
  2610                           
  2611                           ;main.c: 195:                     last_state = cmd_state;
  2612  0159  0851               	movf	_cmd_state,w
  2613  015A  00E4               	movwf	??_main
  2614  015B  0864               	movf	??_main,w
  2615  015C  00C6               	movwf	main@last_state
  2616  015D                     l4449:
  2617                           
  2618                           ;main.c: 196:                     if (input == 0b10000001) cmd_state = READCMD;
  2619  015D  3081               	movlw	129
  2620  015E  066D               	xorwf	main@input,w
  2621  015F  1D03               	btfss	3,2
  2622  0160  2962               	goto	u2741
  2623  0161  2963               	goto	u2740
  2624  0162                     u2741:
  2625  0162  2966               	goto	l4453
  2626  0163                     u2740:
  2627  0163                     l4451:
  2628  0163  01D1               	clrf	_cmd_state
  2629  0164  0AD1               	incf	_cmd_state,f
  2630  0165  2986               	goto	l494
  2631  0166                     l4453:
  2632  0166  3042               	movlw	66
  2633  0167  066D               	xorwf	main@input,w
  2634  0168  1D03               	btfss	3,2
  2635  0169  296B               	goto	u2751
  2636  016A  296C               	goto	u2750
  2637  016B                     u2751:
  2638  016B  2971               	goto	l4457
  2639  016C                     u2750:
  2640  016C                     l4455:
  2641  016C  3002               	movlw	2
  2642  016D  00E4               	movwf	??_main
  2643  016E  0864               	movf	??_main,w
  2644  016F  00D1               	movwf	_cmd_state
  2645  0170  2986               	goto	l494
  2646  0171                     l4457:
  2647  0171  3024               	movlw	36
  2648  0172  066D               	xorwf	main@input,w
  2649  0173  1D03               	btfss	3,2
  2650  0174  2976               	goto	u2761
  2651  0175  2977               	goto	u2760
  2652  0176                     u2761:
  2653  0176  297C               	goto	l4461
  2654  0177                     u2760:
  2655  0177                     l4459:
  2656  0177  3004               	movlw	4
  2657  0178  00E4               	movwf	??_main
  2658  0179  0864               	movf	??_main,w
  2659  017A  00D1               	movwf	_cmd_state
  2660  017B  2986               	goto	l494
  2661  017C                     l4461:
  2662  017C  3018               	movlw	24
  2663  017D  066D               	xorwf	main@input,w
  2664  017E  1D03               	btfss	3,2
  2665  017F  2981               	goto	u2771
  2666  0180  2982               	goto	u2770
  2667  0181                     u2771:
  2668  0181  2986               	goto	l494
  2669  0182                     u2770:
  2670  0182                     l4463:
  2671  0182  3006               	movlw	6
  2672  0183  00E4               	movwf	??_main
  2673  0184  0864               	movf	??_main,w
  2674  0185  00D1               	movwf	_cmd_state
  2675  0186                     l494:
  2676                           
  2677                           ;main.c: 200:                     control_byte = input;
  2678  0186  086D               	movf	main@input,w
  2679  0187  00E4               	movwf	??_main
  2680  0188  0864               	movf	??_main,w
  2681  0189  00C8               	movwf	main@control_byte
  2682                           
  2683                           ;main.c: 201:                     break;
  2684  018A  2AE8               	goto	l4567
  2685  018B                     l4465:
  2686                           
  2687                           ;main.c: 203:                     cmd = input;
  2688  018B  086D               	movf	main@input,w
  2689  018C  00E4               	movwf	??_main
  2690  018D  0864               	movf	??_main,w
  2691  018E  00CF               	movwf	_cmd
  2692                           
  2693                           ;main.c: 204:                     last_state = cmd_state;
  2694  018F  0851               	movf	_cmd_state,w
  2695  0190  00E4               	movwf	??_main
  2696  0191  0864               	movf	??_main,w
  2697  0192  00C6               	movwf	main@last_state
  2698                           
  2699                           ;main.c: 205:                     cmd_state = COMP;
  2700  0193  3007               	movlw	7
  2701  0194  00E4               	movwf	??_main
  2702  0195  0864               	movf	??_main,w
  2703  0196  00D1               	movwf	_cmd_state
  2704                           
  2705                           ;main.c: 206:                     break;
  2706  0197  2AE8               	goto	l4567
  2707  0198                     l4467:
  2708                           
  2709                           ;main.c: 208:                     request_storage = input;
  2710  0198  086D               	movf	main@input,w
  2711  0199  00E4               	movwf	??_main
  2712  019A  0864               	movf	??_main,w
  2713  019B  00CE               	movwf	_request_storage
  2714                           
  2715                           ;main.c: 209:                     last_state = cmd_state;
  2716  019C  0851               	movf	_cmd_state,w
  2717  019D  00E4               	movwf	??_main
  2718  019E  0864               	movf	??_main,w
  2719  019F  00C6               	movwf	main@last_state
  2720                           
  2721                           ;main.c: 210:                     cmd_state = COMP;
  2722  01A0  3007               	movlw	7
  2723  01A1  00E4               	movwf	??_main
  2724  01A2  0864               	movf	??_main,w
  2725  01A3  00D1               	movwf	_cmd_state
  2726                           
  2727                           ;main.c: 211:                     break;
  2728  01A4  2AE8               	goto	l4567
  2729  01A5                     l4469:
  2730                           
  2731                           ;main.c: 213:                     data_storage[0] = input;
  2732  01A5  30EF               	movlw	239
  2733  01A6  0086               	movwf	6
  2734  01A7  3020               	movlw	32
  2735  01A8  0087               	movwf	7
  2736  01A9  086D               	movf	main@input,w
  2737  01AA  3FC0               	movwi [0]fsr1
  2738  01AB                     l4471:
  2739                           
  2740                           ;main.c: 214:                     last_state = cmd_state;
  2741  01AB  0851               	movf	_cmd_state,w
  2742  01AC  00E4               	movwf	??_main
  2743  01AD  0864               	movf	??_main,w
  2744  01AE  00C6               	movwf	main@last_state
  2745  01AF                     l4473:
  2746                           
  2747                           ;main.c: 215:                     cmd_state = READDATLEN;
  2748  01AF  3003               	movlw	3
  2749  01B0  00E4               	movwf	??_main
  2750  01B1  0864               	movf	??_main,w
  2751  01B2  00D1               	movwf	_cmd_state
  2752                           
  2753                           ;main.c: 216:                     break;
  2754  01B3  2AE8               	goto	l4567
  2755  01B4                     l4475:
  2756                           
  2757                           ;main.c: 218:                     data_storage[1] = input;
  2758  01B4  30F0               	movlw	240
  2759  01B5  0086               	movwf	6
  2760  01B6  3020               	movlw	32
  2761  01B7  0087               	movwf	7
  2762  01B8  086D               	movf	main@input,w
  2763  01B9  0081               	movwf	1
  2764  01BA                     l4477:
  2765                           
  2766                           ;main.c: 219:                     last_state = cmd_state;
  2767  01BA  0851               	movf	_cmd_state,w
  2768  01BB  00E4               	movwf	??_main
  2769  01BC  0864               	movf	??_main,w
  2770  01BD  00C6               	movwf	main@last_state
  2771  01BE                     l4479:
  2772                           
  2773                           ;main.c: 220:                     cmd_state = READDAT;
  2774  01BE  3005               	movlw	5
  2775  01BF  00E4               	movwf	??_main
  2776  01C0  0864               	movf	??_main,w
  2777  01C1  00D1               	movwf	_cmd_state
  2778  01C2                     l4481:
  2779                           
  2780                           ;main.c: 221:                     if(data_storage[1] == 0) cmd_state = COMP;
  2781  01C2  30EF               	movlw	239
  2782  01C3  0086               	movwf	6
  2783  01C4  3020               	movlw	32
  2784  01C5  0087               	movwf	7
  2785  01C6  3141               	addfsr 1,1
  2786  01C7  0801               	movf	1,w
  2787  01C8  1D03               	btfss	3,2
  2788  01C9  29CB               	goto	u2781
  2789  01CA  29CC               	goto	u2780
  2790  01CB                     u2781:
  2791  01CB  2AE8               	goto	l4567
  2792  01CC                     u2780:
  2793  01CC                     l4483:
  2794  01CC  3007               	movlw	7
  2795  01CD  00E4               	movwf	??_main
  2796  01CE  0864               	movf	??_main,w
  2797  01CF  00D1               	movwf	_cmd_state
  2798  01D0  2AE8               	goto	l4567
  2799  01D1                     l4485:
  2800                           
  2801                           ;main.c: 224:                     if (data_storage[1] <= 127) data_storage[data_storage_
      +                          counter + 2] = input;
  2802  01D1  30EF               	movlw	239
  2803  01D2  0086               	movwf	6
  2804  01D3  3020               	movlw	32
  2805  01D4  0087               	movwf	7
  2806  01D5  3141               	addfsr 1,1
  2807  01D6  3080               	movlw	128
  2808  01D7  0201               	subwf	1,w
  2809  01D8  1803               	skipnc
  2810  01D9  29DB               	goto	u2791
  2811  01DA  29DC               	goto	u2790
  2812  01DB                     u2791:
  2813  01DB  29EF               	goto	l4489
  2814  01DC                     u2790:
  2815  01DC                     l4487:
  2816  01DC  0847               	movf	main@data_storage_counter,w
  2817  01DD  00E4               	movwf	??_main
  2818  01DE  01E5               	clrf	??_main+1
  2819  01DF  30F1               	movlw	241
  2820  01E0  00E6               	movwf	??_main+2
  2821  01E1  3020               	movlw	32
  2822  01E2  00E7               	movwf	??_main+3
  2823  01E3  0864               	movf	??_main,w
  2824  01E4  0766               	addwf	??_main+2,w
  2825  01E5  00E8               	movwf	??_main+4
  2826  01E6  0865               	movf	??_main+1,w
  2827  01E7  3D67               	addwfc	??_main+3,w
  2828  01E8  00E9               	movwf	??_main+5
  2829  01E9  0868               	movf	??_main+4,w
  2830  01EA  0086               	movwf	6
  2831  01EB  0869               	movf	??_main+5,w
  2832  01EC  0087               	movwf	7
  2833  01ED  086D               	movf	main@input,w
  2834  01EE  0081               	movwf	1
  2835  01EF                     l4489:
  2836                           
  2837                           ;main.c: 225:                     data_storage_counter++;
  2838  01EF  3001               	movlw	1
  2839  01F0  00E4               	movwf	??_main
  2840  01F1  0864               	movf	??_main,w
  2841  01F2  07C7               	addwf	main@data_storage_counter,f
  2842  01F3                     l4491:
  2843                           
  2844                           ;main.c: 226:                     if (data_storage_counter == (data_storage[1])) {
  2845  01F3  30EF               	movlw	239
  2846  01F4  0086               	movwf	6
  2847  01F5  3020               	movlw	32
  2848  01F6  0087               	movwf	7
  2849  01F7  3141               	addfsr 1,1
  2850  01F8  0801               	movf	1,w
  2851  01F9  0647               	xorwf	main@data_storage_counter,w
  2852  01FA  1D03               	skipz
  2853  01FB  29FD               	goto	u2801
  2854  01FC  29FE               	goto	u2800
  2855  01FD                     u2801:
  2856  01FD  2AE8               	goto	l4567
  2857  01FE                     u2800:
  2858  01FE                     l4493:
  2859                           
  2860                           ;main.c: 227:                         data_storage_counter = 0;
  2861  01FE  01C7               	clrf	main@data_storage_counter
  2862  01FF                     l4495:
  2863                           
  2864                           ;main.c: 228:                         last_state = cmd_state;
  2865  01FF  0851               	movf	_cmd_state,w
  2866  0200  00E4               	movwf	??_main
  2867  0201  0864               	movf	??_main,w
  2868  0202  00C6               	movwf	main@last_state
  2869  0203  29CC               	goto	l4483
  2870  0204                     l4499:
  2871                           
  2872                           ;main.c: 233:                     status_storage = input;
  2873  0204  086D               	movf	main@input,w
  2874  0205  00E4               	movwf	??_main
  2875  0206  0864               	movf	??_main,w
  2876  0207  00CD               	movwf	_status_storage
  2877                           
  2878                           ;main.c: 234:                     last_state = cmd_state;
  2879  0208  0851               	movf	_cmd_state,w
  2880  0209  00E4               	movwf	??_main
  2881  020A  0864               	movf	??_main,w
  2882  020B  00C6               	movwf	main@last_state
  2883  020C                     l4501:
  2884                           
  2885                           ;main.c: 235:                     status_storage = status_storage | (1<<7);
  2886  020C  084D               	movf	_status_storage,w
  2887  020D  3880               	iorlw	128
  2888  020E  00E4               	movwf	??_main
  2889  020F  0864               	movf	??_main,w
  2890  0210  00CD               	movwf	_status_storage
  2891                           
  2892                           ;main.c: 236:                     cmd_state = WAITFORCMD;
  2893  0211  01D1               	clrf	_cmd_state
  2894  0212                     l4503:
  2895                           
  2896                           ;main.c: 237:                     receive_timer_len = 0;
  2897  0212  3000               	movlw	0
  2898  0213  00AB               	movwf	_receive_timer_len+3
  2899  0214  3000               	movlw	0
  2900  0215  00AA               	movwf	_receive_timer_len+2
  2901  0216  3000               	movlw	0
  2902  0217  00A9               	movwf	_receive_timer_len+1
  2903  0218  3000               	movlw	0
  2904  0219  00A8               	movwf	_receive_timer_len
  2905                           
  2906                           ;main.c: 238:                     break;
  2907  021A  2AE8               	goto	l4567
  2908  021B                     l4505:
  2909                           
  2910                           ;main.c: 240:                     if (control_byte == input) {
  2911  021B  0848               	movf	main@control_byte,w
  2912  021C  066D               	xorwf	main@input,w
  2913  021D  1D03               	skipz
  2914  021E  2A20               	goto	u2811
  2915  021F  2A21               	goto	u2810
  2916  0220                     u2811:
  2917  0220  2AAF               	goto	l4555
  2918  0221                     u2810:
  2919  0221  2A99               	goto	l4553
  2920  0222                     l4509:
  2921                           
  2922                           ;main.c: 243:                                 if (control_byte != input) {
  2923  0222  0848               	movf	main@control_byte,w
  2924  0223  066D               	xorwf	main@input,w
  2925  0224  1903               	skipnz
  2926  0225  2A27               	goto	u2821
  2927  0226  2A28               	goto	u2820
  2928  0227                     u2821:
  2929  0227  2A2D               	goto	l4513
  2930  0228                     u2820:
  2931  0228                     l4511:
  2932                           
  2933                           ;main.c: 244:                                     send_stat(MESSAGE_CORRUPTED);
  2934  0228  3005               	movlw	5
  2935  0229  318D  25C1  3180   	fcall	_send_stat
  2936                           
  2937                           ;main.c: 245:                                 } else {
  2938  022C  2AAF               	goto	l4555
  2939  022D                     l4513:
  2940                           
  2941                           ;main.c: 246:                                     stop_cmd();
  2942  022D  318D  257F  3180   	fcall	_stop_cmd
  2943  0230                     l4515:
  2944                           
  2945                           ;main.c: 247:                                     send_stat(RECEIVED);
  2946  0230  3002               	movlw	2
  2947  0231  318D  25C1  3180   	fcall	_send_stat
  2948  0234                     l4517:
  2949                           
  2950                           ;main.c: 248:                                     cmd_exe = EXECMD;
  2951  0234  0020               	movlb	0	; select bank0
  2952  0235  01D0               	clrf	_cmd_exe
  2953  0236  0AD0               	incf	_cmd_exe,f
  2954  0237  2AAF               	goto	l4555
  2955  0238                     l4519:
  2956                           
  2957                           ;main.c: 252:                                 if (control_byte != input) {
  2958  0238  0848               	movf	main@control_byte,w
  2959  0239  066D               	xorwf	main@input,w
  2960  023A  1903               	skipnz
  2961  023B  2A3D               	goto	u2831
  2962  023C  2A3E               	goto	u2830
  2963  023D                     u2831:
  2964  023D  2A43               	goto	l4523
  2965  023E                     u2830:
  2966  023E                     l4521:
  2967                           
  2968                           ;main.c: 253:                                     send_stat(MESSAGE_CORRUPTED);
  2969  023E  3005               	movlw	5
  2970  023F  318D  25C1  3180   	fcall	_send_stat
  2971                           
  2972                           ;main.c: 254:                                 } else {
  2973  0242  2AAF               	goto	l4555
  2974  0243                     l4523:
  2975                           
  2976                           ;main.c: 255:                                     send_stat(RECEIVED);
  2977  0243  3002               	movlw	2
  2978  0244  318D  25C1  3180   	fcall	_send_stat
  2979  0247                     l4525:
  2980                           
  2981                           ;main.c: 256:                                     request_storage = request_storage | (1
      +                           << 7);
  2982  0247  0020               	movlb	0	; select bank0
  2983  0248  084E               	movf	_request_storage,w
  2984  0249  3880               	iorlw	128
  2985  024A  00E4               	movwf	??_main
  2986  024B  0864               	movf	??_main,w
  2987  024C  00CE               	movwf	_request_storage
  2988  024D  2AAF               	goto	l4555
  2989  024E                     l4527:
  2990                           
  2991                           ;main.c: 260:                                 if (data_storage[1] > 127) {
  2992  024E  30EF               	movlw	239
  2993  024F  0086               	movwf	6
  2994  0250  3020               	movlw	32
  2995  0251  0087               	movwf	7
  2996  0252  3141               	addfsr 1,1
  2997  0253  3080               	movlw	128
  2998  0254  0201               	subwf	1,w
  2999  0255  1C03               	skipc
  3000  0256  2A58               	goto	u2841
  3001  0257  2A59               	goto	u2840
  3002  0258                     u2841:
  3003  0258  2A5E               	goto	l4531
  3004  0259                     u2840:
  3005  0259                     l4529:
  3006                           
  3007                           ;main.c: 261:                                     send_stat(TOO_MUCH_DATA);
  3008  0259  3004               	movlw	4
  3009  025A  318D  25C1  3180   	fcall	_send_stat
  3010                           
  3011                           ;main.c: 262:                                 } else if (control_byte != input) {
  3012  025D  2AAF               	goto	l4555
  3013  025E                     l4531:
  3014  025E  0848               	movf	main@control_byte,w
  3015  025F  066D               	xorwf	main@input,w
  3016  0260  1903               	skipnz
  3017  0261  2A63               	goto	u2851
  3018  0262  2A64               	goto	u2850
  3019  0263                     u2851:
  3020  0263  2A69               	goto	l4535
  3021  0264                     u2850:
  3022  0264                     l4533:
  3023                           
  3024                           ;main.c: 263:                                     send_stat(MESSAGE_CORRUPTED);
  3025  0264  3005               	movlw	5
  3026  0265  318D  25C1  3180   	fcall	_send_stat
  3027                           
  3028                           ;main.c: 264:                                 } else {
  3029  0268  2AAF               	goto	l4555
  3030  0269                     l4535:
  3031                           
  3032                           ;main.c: 265:                                     send_stat(RECEIVED);
  3033  0269  3002               	movlw	2
  3034  026A  318D  25C1  3180   	fcall	_send_stat
  3035  026D                     l4537:
  3036                           
  3037                           ;main.c: 266:                                     data_storage[0] = data_storage[0] | (1
      +                           << 7);
  3038  026D  30EF               	movlw	239
  3039  026E  0086               	movwf	6
  3040  026F  3020               	movlw	32
  3041  0270  0087               	movwf	7
  3042  0271  30EF               	movlw	239
  3043  0272  0084               	movwf	4
  3044  0273  3020               	movlw	32
  3045  0274  0085               	movwf	5
  3046  0275  0800               	movf	0,w
  3047  0276  3880               	iorlw	128
  3048  0277  3FC0               	movwi [0]fsr1
  3049  0278  2AAF               	goto	l4555
  3050  0279                     l4539:
  3051                           
  3052                           ;main.c: 270:                                 if (data_storage[1] > 127) {
  3053  0279  30EF               	movlw	239
  3054  027A  0086               	movwf	6
  3055  027B  3020               	movlw	32
  3056  027C  0087               	movwf	7
  3057  027D  3141               	addfsr 1,1
  3058  027E  3080               	movlw	128
  3059  027F  0201               	subwf	1,w
  3060  0280  1C03               	skipc
  3061  0281  2A83               	goto	u2861
  3062  0282  2A84               	goto	u2860
  3063  0283                     u2861:
  3064  0283  2A89               	goto	l4543
  3065  0284                     u2860:
  3066  0284                     l4541:
  3067                           
  3068                           ;main.c: 271:                                     send_stat(TOO_MUCH_DATA);
  3069  0284  3004               	movlw	4
  3070  0285  318D  25C1  3180   	fcall	_send_stat
  3071                           
  3072                           ;main.c: 272:                                 } else if (control_byte != input) {
  3073  0288  2AAF               	goto	l4555
  3074  0289                     l4543:
  3075  0289  0848               	movf	main@control_byte,w
  3076  028A  066D               	xorwf	main@input,w
  3077  028B  1903               	skipnz
  3078  028C  2A8E               	goto	u2871
  3079  028D  2A8F               	goto	u2870
  3080  028E                     u2871:
  3081  028E  2A94               	goto	l4547
  3082  028F                     u2870:
  3083  028F                     l4545:
  3084                           
  3085                           ;main.c: 273:                                     send_stat(MESSAGE_CORRUPTED);
  3086  028F  3005               	movlw	5
  3087  0290  318D  25C1  3180   	fcall	_send_stat
  3088                           
  3089                           ;main.c: 274:                                 } else {
  3090  0293  2AAF               	goto	l4555
  3091  0294                     l4547:
  3092                           
  3093                           ;main.c: 275:                                     send_stat(RECEIVED);
  3094  0294  3002               	movlw	2
  3095  0295  318D  25C1  3180   	fcall	_send_stat
  3096  0298  2A6D               	goto	l4537
  3097  0299                     l4553:
  3098  0299  0846               	movf	main@last_state,w
  3099  029A  00E4               	movwf	??_main
  3100  029B  01E5               	clrf	??_main+1
  3101                           
  3102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3103                           ; Switch size 1, requested type "simple"
  3104                           ; Number of cases is 1, Range of values is 0 to 0
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte            4     3 (average)
  3108                           ; direct_byte            8     6 (fixed)
  3109                           ; jumptable            260     6 (fixed)
  3110                           ;	Chosen strategy is simple_byte
  3111  029C  0865               	movf	??_main+1,w
  3112  029D  3A00               	xorlw	0	; case 0
  3113  029E  1903               	skipnz
  3114  029F  2AA1               	goto	l5229
  3115  02A0  2AAF               	goto	l4555
  3116  02A1                     l5229:
  3117                           
  3118                           ; Switch size 1, requested type "simple"
  3119                           ; Number of cases is 4, Range of values is 1 to 5
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte           13     7 (average)
  3123                           ; direct_byte           19     9 (fixed)
  3124                           ; jumptable            263     9 (fixed)
  3125                           ;	Chosen strategy is simple_byte
  3126  02A1  0864               	movf	??_main,w
  3127  02A2  3A01               	xorlw	1	; case 1
  3128  02A3  1903               	skipnz
  3129  02A4  2A22               	goto	l4509
  3130  02A5  3A03               	xorlw	3	; case 2
  3131  02A6  1903               	skipnz
  3132  02A7  2A38               	goto	l4519
  3133  02A8  3A01               	xorlw	1	; case 3
  3134  02A9  1903               	skipnz
  3135  02AA  2A79               	goto	l4539
  3136  02AB  3A06               	xorlw	6	; case 5
  3137  02AC  1903               	skipnz
  3138  02AD  2A4E               	goto	l4527
  3139  02AE  2AAF               	goto	l4555
  3140  02AF                     l4555:
  3141                           
  3142                           ;main.c: 281:                     last_state = cmd_state;
  3143  02AF  0020               	movlb	0	; select bank0
  3144  02B0  0851               	movf	_cmd_state,w
  3145  02B1  00E4               	movwf	??_main
  3146  02B2  0864               	movf	??_main,w
  3147  02B3  00C6               	movwf	main@last_state
  3148  02B4                     l4557:
  3149                           
  3150                           ;main.c: 282:                     cmd_state = WAITFORCMD;
  3151  02B4  01D1               	clrf	_cmd_state
  3152  02B5                     l4559:
  3153                           
  3154                           ;main.c: 283:                     receive_timer_len = 0;
  3155  02B5  3000               	movlw	0
  3156  02B6  00AB               	movwf	_receive_timer_len+3
  3157  02B7  3000               	movlw	0
  3158  02B8  00AA               	movwf	_receive_timer_len+2
  3159  02B9  3000               	movlw	0
  3160  02BA  00A9               	movwf	_receive_timer_len+1
  3161  02BB  3000               	movlw	0
  3162  02BC  00A8               	movwf	_receive_timer_len
  3163  02BD                     l4561:
  3164                           
  3165                           ;main.c: 284:                     receive_time = 0;
  3166  02BD  3000               	movlw	0
  3167  02BE  00AF               	movwf	_receive_time+3
  3168  02BF  3000               	movlw	0
  3169  02C0  00AE               	movwf	_receive_time+2
  3170  02C1  3000               	movlw	0
  3171  02C2  00AD               	movwf	_receive_time+1
  3172  02C3  3000               	movlw	0
  3173  02C4  00AC               	movwf	_receive_time
  3174                           
  3175                           ;main.c: 285:                     break;
  3176  02C5  2AE8               	goto	l4567
  3177  02C6                     l4565:
  3178  02C6  0851               	movf	_cmd_state,w
  3179  02C7  00E4               	movwf	??_main
  3180  02C8  01E5               	clrf	??_main+1
  3181                           
  3182                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3183                           ; Switch size 1, requested type "simple"
  3184                           ; Number of cases is 1, Range of values is 0 to 0
  3185                           ; switch strategies available:
  3186                           ; Name         Instructions Cycles
  3187                           ; simple_byte            4     3 (average)
  3188                           ; direct_byte            8     6 (fixed)
  3189                           ; jumptable            260     6 (fixed)
  3190                           ;	Chosen strategy is simple_byte
  3191  02C9  0865               	movf	??_main+1,w
  3192  02CA  3A00               	xorlw	0	; case 0
  3193  02CB  1903               	skipnz
  3194  02CC  2ACE               	goto	l5231
  3195  02CD  2AE8               	goto	l4567
  3196  02CE                     l5231:
  3197                           
  3198                           ; Switch size 1, requested type "simple"
  3199                           ; Number of cases is 8, Range of values is 0 to 7
  3200                           ; switch strategies available:
  3201                           ; Name         Instructions Cycles
  3202                           ; direct_byte           22     6 (fixed)
  3203                           ; simple_byte           25    13 (average)
  3204                           ; jumptable            260     6 (fixed)
  3205                           ;	Chosen strategy is simple_byte
  3206  02CE  0864               	movf	??_main,w
  3207  02CF  3A00               	xorlw	0	; case 0
  3208  02D0  1903               	skipnz
  3209  02D1  2959               	goto	l4447
  3210  02D2  3A01               	xorlw	1	; case 1
  3211  02D3  1903               	skipnz
  3212  02D4  298B               	goto	l4465
  3213  02D5  3A03               	xorlw	3	; case 2
  3214  02D6  1903               	skipnz
  3215  02D7  2998               	goto	l4467
  3216  02D8  3A01               	xorlw	1	; case 3
  3217  02D9  1903               	skipnz
  3218  02DA  29B4               	goto	l4475
  3219  02DB  3A07               	xorlw	7	; case 4
  3220  02DC  1903               	skipnz
  3221  02DD  29A5               	goto	l4469
  3222  02DE  3A01               	xorlw	1	; case 5
  3223  02DF  1903               	skipnz
  3224  02E0  29D1               	goto	l4485
  3225  02E1  3A03               	xorlw	3	; case 6
  3226  02E2  1903               	skipnz
  3227  02E3  2A04               	goto	l4499
  3228  02E4  3A01               	xorlw	1	; case 7
  3229  02E5  1903               	skipnz
  3230  02E6  2A1B               	goto	l4505
  3231  02E7  2AE8               	goto	l4567
  3232  02E8                     l4567:
  3233                           
  3234                           ;main.c: 287:             if (last_state != WAITFORCMD) control_byte = control_byte ^ in
      +                          put;
  3235  02E8  0846               	movf	main@last_state,w
  3236  02E9  1903               	btfsc	3,2
  3237  02EA  2AEC               	goto	u2881
  3238  02EB  2AED               	goto	u2880
  3239  02EC                     u2881:
  3240  02EC  2AF2               	goto	l4571
  3241  02ED                     u2880:
  3242  02ED                     l4569:
  3243  02ED  0848               	movf	main@control_byte,w
  3244  02EE  066D               	xorwf	main@input,w
  3245  02EF  00E4               	movwf	??_main
  3246  02F0  0864               	movf	??_main,w
  3247  02F1  00C8               	movwf	main@control_byte
  3248  02F2                     l4571:
  3249                           
  3250                           ;main.c: 290:         if((status_storage & (1<<7)) > 0) {
  3251  02F2  0020               	movlb	0	; select bank0
  3252  02F3  1FCD               	btfss	_status_storage,7
  3253  02F4  2AF6               	goto	u2891
  3254  02F5  2AF7               	goto	u2890
  3255  02F6                     u2891:
  3256  02F6  2B1D               	goto	l531
  3257  02F7                     u2890:
  3258  02F7  2B0F               	goto	l4585
  3259  02F8                     l4575:
  3260                           
  3261                           ;main.c: 293:                     if(lock_status == 1) {
  3262  02F8  034C               	decf	_lock_status,w
  3263  02F9  1D03               	btfss	3,2
  3264  02FA  2AFC               	goto	u2901
  3265  02FB  2AFD               	goto	u2900
  3266  02FC                     u2901:
  3267  02FC  2B05               	goto	l534
  3268  02FD                     u2900:
  3269  02FD                     l4577:
  3270                           
  3271                           ;main.c: 294:                         ADC_StartConversion();
  3272  02FD  318C  24DC  3180   	fcall	_ADC_StartConversion
  3273  0300                     l4579:
  3274                           
  3275                           ;main.c: 295:                         working_state = WAITFORCLOSE;
  3276  0300  3003               	movlw	3
  3277  0301  0020               	movlb	0	; select bank0
  3278  0302  00E4               	movwf	??_main
  3279  0303  0864               	movf	??_main,w
  3280  0304  00D2               	movwf	_working_state
  3281  0305                     l534:	
  3282                           ;main.c: 296:                     }
  3283                           
  3284                           
  3285                           ;main.c: 297:                     stop_cmd();
  3286  0305  318D  257F  3180   	fcall	_stop_cmd
  3287  0308                     l4581:
  3288                           
  3289                           ;main.c: 298:                     status_storage = status_storage & (~(1<<7));
  3290  0308  0020               	movlb	0	; select bank0
  3291  0309  084D               	movf	_status_storage,w
  3292  030A  397F               	andlw	127
  3293  030B  00E4               	movwf	??_main
  3294  030C  0864               	movf	??_main,w
  3295  030D  00CD               	movwf	_status_storage
  3296                           
  3297                           ;main.c: 299:                     break;
  3298  030E  2B1D               	goto	l531
  3299  030F                     l4585:
  3300  030F  084D               	movf	_status_storage,w
  3301  0310  397F               	andlw	127
  3302  0311  00E4               	movwf	??_main
  3303  0312  01E5               	clrf	??_main+1
  3304                           
  3305                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3306                           ; Switch size 1, requested type "simple"
  3307                           ; Number of cases is 1, Range of values is 0 to 0
  3308                           ; switch strategies available:
  3309                           ; Name         Instructions Cycles
  3310                           ; simple_byte            4     3 (average)
  3311                           ; direct_byte            8     6 (fixed)
  3312                           ; jumptable            260     6 (fixed)
  3313                           ;	Chosen strategy is simple_byte
  3314  0313  0865               	movf	??_main+1,w
  3315  0314  3A00               	xorlw	0	; case 0
  3316  0315  1903               	skipnz
  3317  0316  2B18               	goto	l5233
  3318  0317  2B1D               	goto	l531
  3319  0318                     l5233:
  3320                           
  3321                           ; Switch size 1, requested type "simple"
  3322                           ; Number of cases is 1, Range of values is 8 to 8
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte            4     3 (average)
  3326                           ; direct_byte           11     9 (fixed)
  3327                           ; jumptable            263     9 (fixed)
  3328                           ;	Chosen strategy is simple_byte
  3329  0318  0864               	movf	??_main,w
  3330  0319  3A08               	xorlw	8	; case 8
  3331  031A  1903               	skipnz
  3332  031B  2AF8               	goto	l4575
  3333  031C  2B1D               	goto	l531
  3334  031D                     l531:	
  3335                           ;main.c: 301:         }
  3336                           
  3337                           
  3338                           ;main.c: 302:         if((request_storage & (1<<7)) > 0) {
  3339  031D  1FCE               	btfss	_request_storage,7
  3340  031E  2B20               	goto	u2911
  3341  031F  2B21               	goto	u2910
  3342  0320                     u2911:
  3343  0320  2D59               	goto	l4771
  3344  0321                     u2910:
  3345  0321  2B37               	goto	l4599
  3346  0322                     l4589:
  3347                           
  3348                           ;main.c: 305:                     if(lock_status) {
  3349  0322  084C               	movf	_lock_status,w
  3350  0323  1903               	btfsc	3,2
  3351  0324  2B26               	goto	u2921
  3352  0325  2B27               	goto	u2920
  3353  0326                     u2921:
  3354  0326  2B2C               	goto	l4593
  3355  0327                     u2920:
  3356  0327                     l4591:
  3357                           
  3358                           ;main.c: 306:                         send_stat(LOCK_OPEND);
  3359  0327  3006               	movlw	6
  3360  0328  318D  25C1  3180   	fcall	_send_stat
  3361                           
  3362                           ;main.c: 307:                     }else {
  3363  032B  2B30               	goto	l4595
  3364  032C                     l4593:
  3365                           
  3366                           ;main.c: 308:                         send_stat(LOCK_CLOSED);
  3367  032C  3007               	movlw	7
  3368  032D  318D  25C1  3180   	fcall	_send_stat
  3369  0330                     l4595:
  3370                           
  3371                           ;main.c: 310:                     request_storage = status_storage & (~(1<<7));
  3372  0330  0020               	movlb	0	; select bank0
  3373  0331  084D               	movf	_status_storage,w
  3374  0332  397F               	andlw	127
  3375  0333  00E4               	movwf	??_main
  3376  0334  0864               	movf	??_main,w
  3377  0335  00CE               	movwf	_request_storage
  3378                           
  3379                           ;main.c: 311:                     break;
  3380  0336  2D59               	goto	l4771
  3381  0337                     l4599:
  3382  0337  084E               	movf	_request_storage,w
  3383  0338  397F               	andlw	127
  3384  0339  00E4               	movwf	??_main
  3385  033A  01E5               	clrf	??_main+1
  3386                           
  3387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3388                           ; Switch size 1, requested type "simple"
  3389                           ; Number of cases is 1, Range of values is 0 to 0
  3390                           ; switch strategies available:
  3391                           ; Name         Instructions Cycles
  3392                           ; simple_byte            4     3 (average)
  3393                           ; direct_byte            8     6 (fixed)
  3394                           ; jumptable            260     6 (fixed)
  3395                           ;	Chosen strategy is simple_byte
  3396  033B  0865               	movf	??_main+1,w
  3397  033C  3A00               	xorlw	0	; case 0
  3398  033D  1903               	skipnz
  3399  033E  2B40               	goto	l5235
  3400  033F  2D59               	goto	l4771
  3401  0340                     l5235:
  3402                           
  3403                           ; Switch size 1, requested type "simple"
  3404                           ; Number of cases is 1, Range of values is 3 to 3
  3405                           ; switch strategies available:
  3406                           ; Name         Instructions Cycles
  3407                           ; simple_byte            4     3 (average)
  3408                           ; direct_byte           11     9 (fixed)
  3409                           ; jumptable            263     9 (fixed)
  3410                           ;	Chosen strategy is simple_byte
  3411  0340  0864               	movf	??_main,w
  3412  0341  3A03               	xorlw	3	; case 3
  3413  0342  1903               	skipnz
  3414  0343  2B22               	goto	l4589
  3415  0344  2D59               	goto	l4771
  3416  0345                     l4601:
  3417                           
  3418                           ;main.c: 317:                     cmd_timer_len = 0;
  3419  0345  3000               	movlw	0
  3420  0346  00A3               	movwf	_cmd_timer_len+3
  3421  0347  3000               	movlw	0
  3422  0348  00A2               	movwf	_cmd_timer_len+2
  3423  0349  3000               	movlw	0
  3424  034A  00A1               	movwf	_cmd_timer_len+1
  3425  034B  3000               	movlw	0
  3426  034C  00A0               	movwf	_cmd_timer_len
  3427                           
  3428                           ;main.c: 318:                break;
  3429  034D  2DC7               	goto	l4809
  3430  034E                     l4603:
  3431                           
  3432                           ;main.c: 320:                 if(old_cmd_exe_counter != cmd_exe_counter) {
  3433  034E  0835               	movf	_cmd_exe_counter+1,w
  3434  034F  0633               	xorwf	main@old_cmd_exe_counter+1,w
  3435  0350  1D03               	skipz
  3436  0351  2B54               	goto	u2935
  3437  0352  0834               	movf	_cmd_exe_counter,w
  3438  0353  0632               	xorwf	main@old_cmd_exe_counter,w
  3439  0354                     u2935:
  3440  0354  1903               	skipnz
  3441  0355  2B57               	goto	u2931
  3442  0356  2B58               	goto	u2930
  3443  0357                     u2931:
  3444  0357  2B68               	goto	l548
  3445  0358                     u2930:
  3446  0358                     l4605:
  3447                           
  3448                           ;main.c: 321:                     cmd_time = 0;
  3449  0358  3000               	movlw	0
  3450  0359  00A7               	movwf	_cmd_time+3
  3451  035A  3000               	movlw	0
  3452  035B  00A6               	movwf	_cmd_time+2
  3453  035C  3000               	movlw	0
  3454  035D  00A5               	movwf	_cmd_time+1
  3455  035E  3000               	movlw	0
  3456  035F  00A4               	movwf	_cmd_time
  3457                           
  3458                           ;main.c: 322:                     cmd_timer_len = 1000;
  3459  0360  3000               	movlw	0
  3460  0361  00A3               	movwf	_cmd_timer_len+3
  3461  0362  3000               	movlw	0
  3462  0363  00A2               	movwf	_cmd_timer_len+2
  3463  0364  3003               	movlw	3
  3464  0365  00A1               	movwf	_cmd_timer_len+1
  3465  0366  30E8               	movlw	232
  3466  0367  00A0               	movwf	_cmd_timer_len
  3467  0368                     l548:	
  3468                           ;main.c: 323:                 }
  3469                           
  3470                           
  3471                           ;main.c: 324:                 old_cmd_exe_counter = cmd_exe_counter;
  3472  0368  0835               	movf	_cmd_exe_counter+1,w
  3473  0369  00B3               	movwf	main@old_cmd_exe_counter+1
  3474  036A  0834               	movf	_cmd_exe_counter,w
  3475  036B  00B2               	movwf	main@old_cmd_exe_counter
  3476                           
  3477                           ;main.c: 325:                 switch (cmd) {
  3478  036C  2D46               	goto	l4767
  3479  036D                     l4607:
  3480                           
  3481                           ;main.c: 329:                                 send_req(PASSWORD);
  3482  036D  3001               	movlw	1
  3483  036E  318F  2757  3180   	fcall	_send_req
  3484  0371                     l4609:
  3485                           
  3486                           ;main.c: 330:                                 cmd_exe_counter++;
  3487  0371  3001               	movlw	1
  3488  0372  0020               	movlb	0	; select bank0
  3489  0373  07B4               	addwf	_cmd_exe_counter,f
  3490  0374  3000               	movlw	0
  3491  0375  3DB5               	addwfc	_cmd_exe_counter+1,f
  3492                           
  3493                           ;main.c: 331:                                 break;
  3494  0376  2DC7               	goto	l4809
  3495  0377                     l4611:
  3496                           
  3497                           ;main.c: 333:                                 cmd_exe_counter = seek_confirmation(1, 2, 
      +                          0, 255);
  3498  0377  3001               	movlw	1
  3499  0378  00F1               	movwf	seek_confirmation@wait_num
  3500  0379  3000               	movlw	0
  3501  037A  00F2               	movwf	seek_confirmation@wait_num+1
  3502  037B  3002               	movlw	2
  3503  037C  00F3               	movwf	seek_confirmation@continue_num
  3504  037D  3000               	movlw	0
  3505  037E  00F4               	movwf	seek_confirmation@continue_num+1
  3506  037F  3000               	movlw	0
  3507  0380  00F5               	movwf	seek_confirmation@retry_num
  3508  0381  00F6               	movwf	seek_confirmation@retry_num+1
  3509  0382  30FF               	movlw	255
  3510  0383  00F7               	movwf	seek_confirmation@cancel_num
  3511  0384  3000               	movlw	0
  3512  0385  00F8               	movwf	seek_confirmation@cancel_num+1
  3513  0386  318F  2728  3180   	fcall	_seek_confirmation
  3514  0389  0872               	movf	?_seek_confirmation+1,w
  3515  038A  0020               	movlb	0	; select bank0
  3516  038B  00B5               	movwf	_cmd_exe_counter+1
  3517  038C  0871               	movf	?_seek_confirmation,w
  3518  038D  00B4               	movwf	_cmd_exe_counter
  3519                           
  3520                           ;main.c: 334:                                 break;
  3521  038E  2DC7               	goto	l4809
  3522  038F                     l4613:
  3523                           
  3524                           ;main.c: 336:                                 if(wait_for_requested(PASSWORD)) {
  3525  038F  3001               	movlw	1
  3526  0390  318D  25F3  3180   	fcall	_wait_for_requested
  3527  0393  3A00               	xorlw	0
  3528  0394  1903               	skipnz
  3529  0395  2B97               	goto	u2941
  3530  0396  2B98               	goto	u2940
  3531  0397                     u2941:
  3532  0397  2DC7               	goto	l4809
  3533  0398                     u2940:
  3534  0398                     l4615:
  3535                           
  3536                           ;main.c: 337:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3537  0398  30F1               	movlw	241
  3538  0399  00F2               	movwf	compare_pw@pw
  3539  039A  3020               	movlw	32
  3540  039B  00F3               	movwf	compare_pw@pw+1
  3541  039C  30EF               	movlw	239
  3542  039D  0086               	movwf	6
  3543  039E  3020               	movlw	32
  3544  039F  0087               	movwf	7
  3545  03A0  3141               	addfsr 1,1
  3546  03A1  0801               	movf	1,w
  3547  03A2  0020               	movlb	0	; select bank0
  3548  03A3  00E4               	movwf	??_main
  3549  03A4  0864               	movf	??_main,w
  3550  03A5  00F4               	movwf	compare_pw@len
  3551  03A6  3187  27AD  3180   	fcall	_compare_pw
  3552  03A9  3A00               	xorlw	0
  3553  03AA  1D03               	skipz
  3554  03AB  2BAD               	goto	u2951
  3555  03AC  2BAE               	goto	u2950
  3556  03AD                     u2951:
  3557  03AD  2B71               	goto	l4609
  3558  03AE                     u2950:
  3559  03AE                     l4617:
  3560  03AE  0020               	movlb	0	; select bank0
  3561  03AF  180D               	btfsc	13,0	;volatile
  3562  03B0  2BB2               	goto	u2961
  3563  03B1  2BB3               	goto	u2960
  3564  03B2                     u2961:
  3565  03B2  2BB4               	goto	l4621
  3566  03B3                     u2960:
  3567  03B3  2B71               	goto	l4609
  3568  03B4                     l4621:
  3569                           
  3570                           ;main.c: 340:                                         send_stat(DENY);
  3571  03B4  3003               	movlw	3
  3572  03B5  318D  25C1  3180   	fcall	_send_stat
  3573  03B8                     l4623:
  3574                           
  3575                           ;main.c: 341:                                         stop_cmd();
  3576  03B8  318D  257F  3180   	fcall	_stop_cmd
  3577  03BB  2DC7               	goto	l4809
  3578  03BC                     l4625:
  3579                           
  3580                           ;main.c: 346:                                 send_req(NEW_PASSWORD);
  3581  03BC  3002               	movlw	2
  3582  03BD  318F  2757  3180   	fcall	_send_req
  3583  03C0  2B71               	goto	l4609
  3584  03C1                     l4629:
  3585                           
  3586                           ;main.c: 350:                                 cmd_exe_counter = seek_confirmation(4, 5, 
      +                          3, 255);
  3587  03C1  3004               	movlw	4
  3588  03C2  00F1               	movwf	seek_confirmation@wait_num
  3589  03C3  3000               	movlw	0
  3590  03C4  00F2               	movwf	seek_confirmation@wait_num+1
  3591  03C5  3005               	movlw	5
  3592  03C6  00F3               	movwf	seek_confirmation@continue_num
  3593  03C7  3000               	movlw	0
  3594  03C8  00F4               	movwf	seek_confirmation@continue_num+1
  3595  03C9  3003               	movlw	3
  3596  03CA  00F5               	movwf	seek_confirmation@retry_num
  3597  03CB  3000               	movlw	0
  3598  03CC  00F6               	movwf	seek_confirmation@retry_num+1
  3599  03CD  30FF               	movlw	255
  3600  03CE  00F7               	movwf	seek_confirmation@cancel_num
  3601  03CF  3000               	movlw	0
  3602  03D0  00F8               	movwf	seek_confirmation@cancel_num+1
  3603  03D1  318F  2728  3180   	fcall	_seek_confirmation
  3604  03D4  0872               	movf	?_seek_confirmation+1,w
  3605  03D5  0020               	movlb	0	; select bank0
  3606  03D6  00B5               	movwf	_cmd_exe_counter+1
  3607  03D7  0871               	movf	?_seek_confirmation,w
  3608  03D8  00B4               	movwf	_cmd_exe_counter
  3609                           
  3610                           ;main.c: 351:                                 break;
  3611  03D9  2DC7               	goto	l4809
  3612  03DA                     l4631:
  3613                           
  3614                           ;main.c: 353:                                 if(wait_for_requested(NEW_PASSWORD)) {
  3615  03DA  3002               	movlw	2
  3616  03DB  318D  25F3  3180   	fcall	_wait_for_requested
  3617  03DE  3A00               	xorlw	0
  3618  03DF  1903               	skipnz
  3619  03E0  2BE2               	goto	u2971
  3620  03E1  2BE3               	goto	u2970
  3621  03E2                     u2971:
  3622  03E2  2D69               	goto	l546
  3623  03E3                     u2970:
  3624  03E3                     l4633:
  3625                           
  3626                           ;main.c: 354:                                     save_pw(&data_storage[2], data_storage
      +                          [1]);
  3627  03E3  30F1               	movlw	241
  3628  03E4  00F4               	movwf	save_pw@pw
  3629  03E5  3020               	movlw	32
  3630  03E6  00F5               	movwf	save_pw@pw+1
  3631  03E7  30EF               	movlw	239
  3632  03E8  0086               	movwf	6
  3633  03E9  3020               	movlw	32
  3634  03EA  0087               	movwf	7
  3635  03EB  3141               	addfsr 1,1
  3636  03EC  0801               	movf	1,w
  3637  03ED  0020               	movlb	0	; select bank0
  3638  03EE  00E4               	movwf	??_main
  3639  03EF  0864               	movf	??_main,w
  3640  03F0  00F6               	movwf	save_pw@len
  3641  03F1  3187  2768  3180   	fcall	_save_pw
  3642                           
  3643                           ;main.c: 355:                                     send_stat(COMMAND_EXECUTED);
  3644  03F4  3001               	movlw	1
  3645  03F5  318D  25C1  3180   	fcall	_send_stat
  3646  03F8  2BB8               	goto	l4623
  3647  03F9                     l4637:
  3648                           
  3649                           ;main.c: 360:                                 send_stat(CANCELD);
  3650  03F9  3008               	movlw	8
  3651  03FA  318D  25C1  3180   	fcall	_send_stat
  3652  03FD  2BB8               	goto	l4623
  3653  03FE                     l4643:
  3654                           
  3655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3656                           ; Switch size 1, requested type "simple"
  3657                           ; Number of cases is 1, Range of values is 0 to 0
  3658                           ; switch strategies available:
  3659                           ; Name         Instructions Cycles
  3660                           ; simple_byte            4     3 (average)
  3661                           ; direct_byte            8     6 (fixed)
  3662                           ; jumptable            260     6 (fixed)
  3663                           ;	Chosen strategy is simple_byte
  3664  03FE  0835               	movf	_cmd_exe_counter+1,w
  3665  03FF  3A00               	xorlw	0	; case 0
  3666  0400  1903               	skipnz
  3667  0401  2C03               	goto	l5237
  3668  0402  2DC7               	goto	l4809
  3669  0403                     l5237:
  3670                           
  3671                           ; Switch size 1, requested type "simple"
  3672                           ; Number of cases is 7, Range of values is 0 to 255
  3673                           ; switch strategies available:
  3674                           ; Name         Instructions Cycles
  3675                           ; simple_byte           22    12 (average)
  3676                           ; jumptable            260     6 (fixed)
  3677                           ;	Chosen strategy is simple_byte
  3678  0403  0834               	movf	_cmd_exe_counter,w
  3679  0404  3A00               	xorlw	0	; case 0
  3680  0405  1903               	skipnz
  3681  0406  2B6D               	goto	l4607
  3682  0407  3A01               	xorlw	1	; case 1
  3683  0408  1903               	skipnz
  3684  0409  2B77               	goto	l4611
  3685  040A  3A03               	xorlw	3	; case 2
  3686  040B  1903               	skipnz
  3687  040C  2B8F               	goto	l4613
  3688  040D  3A01               	xorlw	1	; case 3
  3689  040E  1903               	skipnz
  3690  040F  2BBC               	goto	l4625
  3691  0410  3A07               	xorlw	7	; case 4
  3692  0411  1903               	skipnz
  3693  0412  2BC1               	goto	l4629
  3694  0413  3A01               	xorlw	1	; case 5
  3695  0414  1903               	skipnz
  3696  0415  2BDA               	goto	l4631
  3697  0416  3AFA               	xorlw	250	; case 255
  3698  0417  1903               	skipnz
  3699  0418  2BF9               	goto	l4637
  3700  0419  2DC7               	goto	l4809
  3701  041A                     l4645:
  3702                           
  3703                           ;main.c: 368:                                 if(lock_status == 1) {
  3704  041A  034C               	decf	_lock_status,w
  3705  041B  1D03               	btfss	3,2
  3706  041C  2C1E               	goto	u2981
  3707  041D  2C1F               	goto	u2980
  3708  041E                     u2981:
  3709  041E  2C28               	goto	l4653
  3710  041F                     u2980:
  3711  041F                     l4647:
  3712                           
  3713                           ;main.c: 369:                                     working_state = WAITFORCLOSE;
  3714  041F  3003               	movlw	3
  3715  0420  00E4               	movwf	??_main
  3716  0421  0864               	movf	??_main,w
  3717  0422  00D2               	movwf	_working_state
  3718  0423                     l4649:
  3719                           
  3720                           ;main.c: 370:                                     send_stat(COMMAND_EXECUTED);
  3721  0423  3001               	movlw	1
  3722  0424  318D  25C1  3180   	fcall	_send_stat
  3723  0427  2BB8               	goto	l4623
  3724  0428                     l4653:
  3725                           
  3726                           ;main.c: 373:                                     send_req(PASSWORD);
  3727  0428  3001               	movlw	1
  3728  0429  318F  2757  3180   	fcall	_send_req
  3729  042C  2B71               	goto	l4609
  3730  042D                     l4659:
  3731                           
  3732                           ;main.c: 381:                                 if(wait_for_requested(PASSWORD)) {
  3733  042D  3001               	movlw	1
  3734  042E  318D  25F3  3180   	fcall	_wait_for_requested
  3735  0431  3A00               	xorlw	0
  3736  0432  1903               	skipnz
  3737  0433  2C35               	goto	u2991
  3738  0434  2C36               	goto	u2990
  3739  0435                     u2991:
  3740  0435  2D69               	goto	l546
  3741  0436                     u2990:
  3742  0436                     l4661:
  3743                           
  3744                           ;main.c: 382:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3745  0436  30F1               	movlw	241
  3746  0437  00F2               	movwf	compare_pw@pw
  3747  0438  3020               	movlw	32
  3748  0439  00F3               	movwf	compare_pw@pw+1
  3749  043A  30EF               	movlw	239
  3750  043B  0086               	movwf	6
  3751  043C  3020               	movlw	32
  3752  043D  0087               	movwf	7
  3753  043E  3141               	addfsr 1,1
  3754  043F  0801               	movf	1,w
  3755  0440  0020               	movlb	0	; select bank0
  3756  0441  00E4               	movwf	??_main
  3757  0442  0864               	movf	??_main,w
  3758  0443  00F4               	movwf	compare_pw@len
  3759  0444  3187  27AD  3180   	fcall	_compare_pw
  3760  0447  3A00               	xorlw	0
  3761  0448  1D03               	skipz
  3762  0449  2C4B               	goto	u3001
  3763  044A  2C4C               	goto	u3000
  3764  044B                     u3001:
  3765  044B  2C51               	goto	l578
  3766  044C                     u3000:
  3767  044C                     l4663:
  3768  044C  0020               	movlb	0	; select bank0
  3769  044D  180D               	btfsc	13,0	;volatile
  3770  044E  2C50               	goto	u3011
  3771  044F  2C51               	goto	u3010
  3772  0450                     u3011:
  3773  0450  2C59               	goto	l4667
  3774  0451                     u3010:
  3775  0451                     l578:
  3776                           
  3777                           ;main.c: 383:                                         working_state = OPENLOCK;
  3778  0451  0020               	movlb	0	; select bank0
  3779  0452  01D2               	clrf	_working_state
  3780  0453  0AD2               	incf	_working_state,f
  3781  0454                     l4665:
  3782                           
  3783                           ;main.c: 384:                                         send_stat(COMMAND_EXECUTED);
  3784  0454  3001               	movlw	1
  3785  0455  318D  25C1  3180   	fcall	_send_stat
  3786                           
  3787                           ;main.c: 385:                                     }else {
  3788  0458  2BB8               	goto	l4623
  3789  0459                     l4667:
  3790                           
  3791                           ;main.c: 386:                                         send_stat(DENY);
  3792  0459  3003               	movlw	3
  3793  045A  318D  25C1  3180   	fcall	_send_stat
  3794  045D  2BB8               	goto	l4623
  3795  045E                     l4671:
  3796                           
  3797                           ;main.c: 392:                                 send_stat(CANCELD);
  3798  045E  3008               	movlw	8
  3799  045F  318D  25C1  3180   	fcall	_send_stat
  3800  0462  2BB8               	goto	l4623
  3801  0463                     l4677:
  3802                           
  3803                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3804                           ; Switch size 1, requested type "simple"
  3805                           ; Number of cases is 1, Range of values is 0 to 0
  3806                           ; switch strategies available:
  3807                           ; Name         Instructions Cycles
  3808                           ; simple_byte            4     3 (average)
  3809                           ; direct_byte            8     6 (fixed)
  3810                           ; jumptable            260     6 (fixed)
  3811                           ;	Chosen strategy is simple_byte
  3812  0463  0835               	movf	_cmd_exe_counter+1,w
  3813  0464  3A00               	xorlw	0	; case 0
  3814  0465  1903               	skipnz
  3815  0466  2C68               	goto	l5239
  3816  0467  2D69               	goto	l546
  3817  0468                     l5239:
  3818                           
  3819                           ; Switch size 1, requested type "simple"
  3820                           ; Number of cases is 4, Range of values is 0 to 255
  3821                           ; switch strategies available:
  3822                           ; Name         Instructions Cycles
  3823                           ; simple_byte           13     7 (average)
  3824                           ; jumptable            260     6 (fixed)
  3825                           ;	Chosen strategy is simple_byte
  3826  0468  0834               	movf	_cmd_exe_counter,w
  3827  0469  3A00               	xorlw	0	; case 0
  3828  046A  1903               	skipnz
  3829  046B  2C1A               	goto	l4645
  3830  046C  3A01               	xorlw	1	; case 1
  3831  046D  1903               	skipnz
  3832  046E  2B77               	goto	l4611
  3833  046F  3A03               	xorlw	3	; case 2
  3834  0470  1903               	skipnz
  3835  0471  2C2D               	goto	l4659
  3836  0472  3AFD               	xorlw	253	; case 255
  3837  0473  1903               	skipnz
  3838  0474  2C5E               	goto	l4671
  3839  0475  2D69               	goto	l546
  3840  0476                     l4679:
  3841                           
  3842                           ;main.c: 401:                                 send_req(PASSWORD);
  3843  0476  3001               	movlw	1
  3844  0477  318F  2757  3180   	fcall	_send_req
  3845  047A  2B71               	goto	l4609
  3846  047B                     l4685:
  3847                           
  3848                           ;main.c: 408:                                 if(wait_for_requested(PASSWORD)) {
  3849  047B  3001               	movlw	1
  3850  047C  318D  25F3  3180   	fcall	_wait_for_requested
  3851  047F  3A00               	xorlw	0
  3852  0480  1903               	skipnz
  3853  0481  2C83               	goto	u3021
  3854  0482  2C84               	goto	u3020
  3855  0483                     u3021:
  3856  0483  2DC7               	goto	l4809
  3857  0484                     u3020:
  3858  0484                     l4687:
  3859                           
  3860                           ;main.c: 409:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3861  0484  30F1               	movlw	241
  3862  0485  00F2               	movwf	compare_pw@pw
  3863  0486  3020               	movlw	32
  3864  0487  00F3               	movwf	compare_pw@pw+1
  3865  0488  30EF               	movlw	239
  3866  0489  0086               	movwf	6
  3867  048A  3020               	movlw	32
  3868  048B  0087               	movwf	7
  3869  048C  3141               	addfsr 1,1
  3870  048D  0801               	movf	1,w
  3871  048E  0020               	movlb	0	; select bank0
  3872  048F  00E4               	movwf	??_main
  3873  0490  0864               	movf	??_main,w
  3874  0491  00F4               	movwf	compare_pw@len
  3875  0492  3187  27AD  3180   	fcall	_compare_pw
  3876  0495  3A00               	xorlw	0
  3877  0496  1D03               	skipz
  3878  0497  2C99               	goto	u3031
  3879  0498  2C9A               	goto	u3030
  3880  0499                     u3031:
  3881  0499  2C9F               	goto	l4691
  3882  049A                     u3030:
  3883  049A                     l4689:
  3884  049A  0020               	movlb	0	; select bank0
  3885  049B  180D               	btfsc	13,0	;volatile
  3886  049C  2C9E               	goto	u3041
  3887  049D  2C9F               	goto	u3040
  3888  049E                     u3041:
  3889  049E  2CAF               	goto	l4703
  3890  049F                     u3040:
  3891  049F                     l4691:
  3892                           
  3893                           ;main.c: 410:                                         working_state = IDLE;
  3894  049F  0020               	movlb	0	; select bank0
  3895  04A0  01D2               	clrf	_working_state
  3896  04A1                     l4693:
  3897  04A1  0022               	movlb	2	; select bank2
  3898  04A2  140C               	bsf	12,0	;volatile
  3899  04A3                     l4695:
  3900                           
  3901                           ;main.c: 412:                                         send_stat(LOCK_OPEND);
  3902  04A3  3006               	movlw	6
  3903  04A4  318D  25C1  3180   	fcall	_send_stat
  3904  04A7                     l4697:
  3905                           
  3906                           ;main.c: 413:                                         lock_status = 1;
  3907  04A7  0020               	movlb	0	; select bank0
  3908  04A8  01CC               	clrf	_lock_status
  3909  04A9  0ACC               	incf	_lock_status,f
  3910  04AA                     l4699:
  3911                           
  3912                           ;main.c: 414:                                         send_stat(CONTINUE);
  3913  04AA  3009               	movlw	9
  3914  04AB  318D  25C1  3180   	fcall	_send_stat
  3915  04AE  2B71               	goto	l4609
  3916  04AF                     l4703:
  3917                           
  3918                           ;main.c: 417:                                         send_stat(DENY);
  3919  04AF  3003               	movlw	3
  3920  04B0  318D  25C1  3180   	fcall	_send_stat
  3921  04B3  2BB8               	goto	l4623
  3922  04B4                     l4707:
  3923                           
  3924                           ;main.c: 424:                                 cmd_timer_len = 12000;
  3925  04B4  3000               	movlw	0
  3926  04B5  00A3               	movwf	_cmd_timer_len+3
  3927  04B6  3000               	movlw	0
  3928  04B7  00A2               	movwf	_cmd_timer_len+2
  3929  04B8  302E               	movlw	46
  3930  04B9  00A1               	movwf	_cmd_timer_len+1
  3931  04BA  30E0               	movlw	224
  3932  04BB  00A0               	movwf	_cmd_timer_len
  3933  04BC                     l4709:
  3934                           
  3935                           ;main.c: 425:                                 if((status_storage & (1<<7)) > 0 && (statu
      +                          s_storage & (~(1<<7))) == CONTINUE) {
  3936  04BC  1FCD               	btfss	_status_storage,7
  3937  04BD  2CBF               	goto	u3051
  3938  04BE  2CC0               	goto	u3050
  3939  04BF                     u3051:
  3940  04BF  2CD1               	goto	l4717
  3941  04C0                     u3050:
  3942  04C0                     l4711:
  3943  04C0  307F               	movlw	127
  3944  04C1  054D               	andwf	_status_storage,w
  3945  04C2  00E4               	movwf	??_main
  3946  04C3  3009               	movlw	9
  3947  04C4  0664               	xorwf	??_main,w
  3948  04C5  1D03               	btfss	3,2
  3949  04C6  2CC8               	goto	u3061
  3950  04C7  2CC9               	goto	u3060
  3951  04C8                     u3061:
  3952  04C8  2CD1               	goto	l4717
  3953  04C9                     u3060:
  3954  04C9                     l4713:
  3955                           
  3956                           ;main.c: 426:                                     ADC_StartConversion();
  3957  04C9  318C  24DC  3180   	fcall	_ADC_StartConversion
  3958  04CC                     l4715:
  3959                           
  3960                           ;main.c: 427:                                     cmd_exe_counter ++;
  3961  04CC  3001               	movlw	1
  3962  04CD  0020               	movlb	0	; select bank0
  3963  04CE  07B4               	addwf	_cmd_exe_counter,f
  3964  04CF  3000               	movlw	0
  3965  04D0  3DB5               	addwfc	_cmd_exe_counter+1,f
  3966  04D1                     l4717:
  3967                           
  3968                           ;main.c: 429:                                 status_storage = status_storage & (~(1<<7)
      +                          );
  3969  04D1  084D               	movf	_status_storage,w
  3970  04D2  397F               	andlw	127
  3971  04D3  00E4               	movwf	??_main
  3972  04D4  0864               	movf	??_main,w
  3973  04D5  00CD               	movwf	_status_storage
  3974                           
  3975                           ;main.c: 430:                                 break;
  3976  04D6  2DC7               	goto	l4809
  3977  04D7                     l4719:
  3978                           
  3979                           ;main.c: 432:                                 if(ADC_IsConversionDone()) {
  3980  04D7  318D  2513  3180   	fcall	_ADC_IsConversionDone
  3981  04DA  3A00               	xorlw	0
  3982  04DB  1903               	skipnz
  3983  04DC  2CDE               	goto	u3071
  3984  04DD  2CDF               	goto	u3070
  3985  04DE                     u3071:
  3986  04DE  2D69               	goto	l546
  3987  04DF                     u3070:
  3988  04DF                     l4721:
  3989                           
  3990                           ;main.c: 433:                                     new_hall_code_close = ADC_GetConversio
      +                          nResult();
  3991  04DF  318C  24D9  3180   	fcall	_ADC_GetConversionResult
  3992  04E2  0020               	movlb	0	; select bank0
  3993  04E3  00E4               	movwf	??_main
  3994  04E4  0864               	movf	??_main,w
  3995  04E5  00CA               	movwf	_new_hall_code_close
  3996  04E6                     l4723:
  3997                           
  3998                           ;main.c: 434:                                     send_stat(CONTINUE);
  3999  04E6  3009               	movlw	9
  4000  04E7  318D  25C1  3180   	fcall	_send_stat
  4001  04EA  2B71               	goto	l4609
  4002  04EB                     l598:	
  4003                           ;main.c: 438:                             case 5:
  4004                           
  4005                           
  4006                           ;main.c: 439:                                 if((status_storage & (1<<7)) > 0 && (statu
      +                          s_storage & (~(1<<7))) == CONTINUE) {
  4007  04EB  1FCD               	btfss	_status_storage,7
  4008  04EC  2CEE               	goto	u3081
  4009  04ED  2CEF               	goto	u3080
  4010  04EE                     u3081:
  4011  04EE  2CD1               	goto	l4717
  4012  04EF                     u3080:
  4013  04EF                     l4727:
  4014  04EF  307F               	movlw	127
  4015  04F0  054D               	andwf	_status_storage,w
  4016  04F1  00E4               	movwf	??_main
  4017  04F2  3009               	movlw	9
  4018  04F3  0664               	xorwf	??_main,w
  4019  04F4  1D03               	btfss	3,2
  4020  04F5  2CF7               	goto	u3091
  4021  04F6  2CF8               	goto	u3090
  4022  04F7                     u3091:
  4023  04F7  2CD1               	goto	l4717
  4024  04F8                     u3090:
  4025  04F8  2CC9               	goto	l4713
  4026  04F9                     l4735:
  4027                           
  4028                           ;main.c: 446:                                 if(ADC_IsConversionDone()) {
  4029  04F9  318D  2513  3180   	fcall	_ADC_IsConversionDone
  4030  04FC  3A00               	xorlw	0
  4031  04FD  1903               	skipnz
  4032  04FE  2D00               	goto	u3101
  4033  04FF  2D01               	goto	u3100
  4034  0500                     u3101:
  4035  0500  2D69               	goto	l546
  4036  0501                     u3100:
  4037  0501                     l4737:
  4038                           
  4039                           ;main.c: 447:                                     new_hall_code_open = ADC_GetConversion
      +                          Result();
  4040  0501  318C  24D9  3180   	fcall	_ADC_GetConversionResult
  4041  0504  0020               	movlb	0	; select bank0
  4042  0505  00E4               	movwf	??_main
  4043  0506  0864               	movf	??_main,w
  4044  0507  00CB               	movwf	_new_hall_code_open
  4045  0508                     l4739:
  4046                           
  4047                           ;main.c: 448:                                     send_stat(COMMAND_EXECUTED);
  4048  0508  3001               	movlw	1
  4049  0509  318D  25C1  3180   	fcall	_send_stat
  4050  050C                     l4741:
  4051                           
  4052                           ;main.c: 449:                                     save_hall_codes(new_hall_code_open, ne
      +                          w_hall_code_close);
  4053  050C  0020               	movlb	0	; select bank0
  4054  050D  084A               	movf	_new_hall_code_close,w
  4055  050E  00E4               	movwf	??_main
  4056  050F  0864               	movf	??_main,w
  4057  0510  00F4               	movwf	save_hall_codes@close
  4058  0511  084B               	movf	_new_hall_code_open,w
  4059  0512  318E  2689  3180   	fcall	_save_hall_codes
  4060  0515                     l4743:
  4061                           
  4062                           ;main.c: 450:                                     read_hall_codes();
  4063  0515  318D  255C  3180   	fcall	_read_hall_codes
  4064  0518                     l4745:
  4065                           
  4066                           ;main.c: 451:                                     working_state = OPENLOCK;
  4067  0518  0020               	movlb	0	; select bank0
  4068  0519  01D2               	clrf	_working_state
  4069  051A  0AD2               	incf	_working_state,f
  4070  051B                     l4747:
  4071                           
  4072                           ;main.c: 452:                                     stop_cmd();
  4073  051B  318D  257F  3180   	fcall	_stop_cmd
  4074  051E                     l4749:
  4075                           
  4076                           ;main.c: 453:                                     new_hall_code_open = 0;
  4077  051E  0020               	movlb	0	; select bank0
  4078  051F  01CB               	clrf	_new_hall_code_open
  4079  0520                     l4751:
  4080                           
  4081                           ;main.c: 454:                                     new_hall_code_close = 0;
  4082  0520  01CA               	clrf	_new_hall_code_close
  4083  0521  2DC7               	goto	l4809
  4084  0522                     l4753:
  4085                           
  4086                           ;main.c: 458:                                 send_stat(CANCELD);
  4087  0522  3008               	movlw	8
  4088  0523  318D  25C1  3180   	fcall	_send_stat
  4089  0526  2D1B               	goto	l4747
  4090  0527                     l4763:
  4091                           
  4092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4093                           ; Switch size 1, requested type "simple"
  4094                           ; Number of cases is 1, Range of values is 0 to 0
  4095                           ; switch strategies available:
  4096                           ; Name         Instructions Cycles
  4097                           ; simple_byte            4     3 (average)
  4098                           ; direct_byte            8     6 (fixed)
  4099                           ; jumptable            260     6 (fixed)
  4100                           ;	Chosen strategy is simple_byte
  4101  0527  0835               	movf	_cmd_exe_counter+1,w
  4102  0528  3A00               	xorlw	0	; case 0
  4103  0529  1903               	skipnz
  4104  052A  2D2C               	goto	l5241
  4105  052B  2D69               	goto	l546
  4106  052C                     l5241:
  4107                           
  4108                           ; Switch size 1, requested type "simple"
  4109                           ; Number of cases is 8, Range of values is 0 to 255
  4110                           ; switch strategies available:
  4111                           ; Name         Instructions Cycles
  4112                           ; simple_byte           25    13 (average)
  4113                           ; jumptable            260     6 (fixed)
  4114                           ;	Chosen strategy is simple_byte
  4115  052C  0834               	movf	_cmd_exe_counter,w
  4116  052D  3A00               	xorlw	0	; case 0
  4117  052E  1903               	skipnz
  4118  052F  2C76               	goto	l4679
  4119  0530  3A01               	xorlw	1	; case 1
  4120  0531  1903               	skipnz
  4121  0532  2B77               	goto	l4611
  4122  0533  3A03               	xorlw	3	; case 2
  4123  0534  1903               	skipnz
  4124  0535  2C7B               	goto	l4685
  4125  0536  3A01               	xorlw	1	; case 3
  4126  0537  1903               	skipnz
  4127  0538  2CB4               	goto	l4707
  4128  0539  3A07               	xorlw	7	; case 4
  4129  053A  1903               	skipnz
  4130  053B  2CD7               	goto	l4719
  4131  053C  3A01               	xorlw	1	; case 5
  4132  053D  1903               	skipnz
  4133  053E  2CEB               	goto	l598
  4134  053F  3A03               	xorlw	3	; case 6
  4135  0540  1903               	skipnz
  4136  0541  2CF9               	goto	l4735
  4137  0542  3AF9               	xorlw	249	; case 255
  4138  0543  1903               	skipnz
  4139  0544  2D22               	goto	l4753
  4140  0545  2D69               	goto	l546
  4141  0546                     l4767:
  4142  0546  084F               	movf	_cmd,w
  4143  0547  00E4               	movwf	??_main
  4144  0548  01E5               	clrf	??_main+1
  4145                           
  4146                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4147                           ; Switch size 1, requested type "simple"
  4148                           ; Number of cases is 1, Range of values is 0 to 0
  4149                           ; switch strategies available:
  4150                           ; Name         Instructions Cycles
  4151                           ; simple_byte            4     3 (average)
  4152                           ; direct_byte            8     6 (fixed)
  4153                           ; jumptable            260     6 (fixed)
  4154                           ;	Chosen strategy is simple_byte
  4155  0549  0865               	movf	??_main+1,w
  4156  054A  3A00               	xorlw	0	; case 0
  4157  054B  1903               	skipnz
  4158  054C  2D4E               	goto	l5243
  4159  054D  2DC7               	goto	l4809
  4160  054E                     l5243:
  4161                           
  4162                           ; Switch size 1, requested type "simple"
  4163                           ; Number of cases is 3, Range of values is 1 to 3
  4164                           ; switch strategies available:
  4165                           ; Name         Instructions Cycles
  4166                           ; simple_byte           10     6 (average)
  4167                           ; direct_byte           15     9 (fixed)
  4168                           ; jumptable            263     9 (fixed)
  4169                           ;	Chosen strategy is simple_byte
  4170  054E  0864               	movf	??_main,w
  4171  054F  3A01               	xorlw	1	; case 1
  4172  0550  1903               	skipnz
  4173  0551  2BFE               	goto	l4643
  4174  0552  3A03               	xorlw	3	; case 2
  4175  0553  1903               	skipnz
  4176  0554  2C63               	goto	l4677
  4177  0555  3A01               	xorlw	1	; case 3
  4178  0556  1903               	skipnz
  4179  0557  2D27               	goto	l4763
  4180  0558  2DC7               	goto	l4809
  4181  0559                     l4771:
  4182  0559  0850               	movf	_cmd_exe,w
  4183  055A  00E4               	movwf	??_main
  4184  055B  01E5               	clrf	??_main+1
  4185                           
  4186                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4187                           ; Switch size 1, requested type "simple"
  4188                           ; Number of cases is 1, Range of values is 0 to 0
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte            4     3 (average)
  4192                           ; direct_byte            8     6 (fixed)
  4193                           ; jumptable            260     6 (fixed)
  4194                           ;	Chosen strategy is simple_byte
  4195  055C  0865               	movf	??_main+1,w
  4196  055D  3A00               	xorlw	0	; case 0
  4197  055E  1903               	skipnz
  4198  055F  2D61               	goto	l5245
  4199  0560  2DC7               	goto	l4809
  4200  0561                     l5245:
  4201                           
  4202                           ; Switch size 1, requested type "simple"
  4203                           ; Number of cases is 2, Range of values is 0 to 1
  4204                           ; switch strategies available:
  4205                           ; Name         Instructions Cycles
  4206                           ; simple_byte            7     4 (average)
  4207                           ; direct_byte           10     6 (fixed)
  4208                           ; jumptable            260     6 (fixed)
  4209                           ;	Chosen strategy is simple_byte
  4210  0561  0864               	movf	??_main,w
  4211  0562  3A00               	xorlw	0	; case 0
  4212  0563  1903               	skipnz
  4213  0564  2B45               	goto	l4601
  4214  0565  3A01               	xorlw	1	; case 1
  4215  0566  1903               	skipnz
  4216  0567  2B4E               	goto	l4603
  4217  0568  2DC7               	goto	l4809
  4218  0569                     l546:
  4219                           
  4220                           ;main.c: 470:         switch (working_state) {
  4221  0569  2DC7               	goto	l4809
  4222  056A                     l607:	
  4223                           ;main.c: 475:                 do { LATAbits.LATA0 = 1; } while(0);
  4224                           
  4225  056A  0022               	movlb	2	; select bank2
  4226  056B  140C               	bsf	12,0	;volatile
  4227  056C                     l4773:
  4228                           
  4229                           ;main.c: 476:                 send_stat(LOCK_OPEND);
  4230  056C  3006               	movlw	6
  4231  056D  318D  25C1  3180   	fcall	_send_stat
  4232  0570                     l4775:
  4233                           
  4234                           ;main.c: 477:                 lock_status = 1;
  4235  0570  0020               	movlb	0	; select bank0
  4236  0571  01CC               	clrf	_lock_status
  4237  0572  0ACC               	incf	_lock_status,f
  4238  0573                     l4777:
  4239                           
  4240                           ;main.c: 478:                 working_state = WAITFOROPEN;
  4241  0573  3002               	movlw	2
  4242  0574  00E4               	movwf	??_main
  4243  0575  0864               	movf	??_main,w
  4244  0576  00D2               	movwf	_working_state
  4245  0577                     l4779:
  4246                           
  4247                           ;main.c: 479:                 ADC_StartConversion();
  4248  0577  318C  24DC  3180   	fcall	_ADC_StartConversion
  4249                           
  4250                           ;main.c: 480:                 break;
  4251  057A  2885               	goto	l4409
  4252  057B                     l4781:
  4253                           
  4254                           ;main.c: 482:                 if(ADC_IsConversionDone()) {
  4255  057B  318D  2513  3180   	fcall	_ADC_IsConversionDone
  4256  057E  3A00               	xorlw	0
  4257  057F  1903               	skipnz
  4258  0580  2D82               	goto	u3111
  4259  0581  2D83               	goto	u3110
  4260  0582                     u3111:
  4261  0582  2885               	goto	l4409
  4262  0583                     u3110:
  4263  0583                     l4783:
  4264                           
  4265                           ;main.c: 483:                     uint8_t res = ADRESH;
  4266  0583  0021               	movlb	1	; select bank1
  4267  0584  081C               	movf	28,w	;volatile
  4268  0585  0020               	movlb	0	; select bank0
  4269  0586  00E4               	movwf	??_main
  4270  0587  0864               	movf	??_main,w
  4271  0588  00EA               	movwf	main@res
  4272  0589                     l4785:
  4273                           
  4274                           ;main.c: 484:                     if(door_status_changed(1, res)) {
  4275  0589  086A               	movf	main@res,w
  4276  058A  00E4               	movwf	??_main
  4277  058B  01E5               	clrf	??_main+1
  4278  058C  0864               	movf	??_main,w
  4279  058D  00DD               	movwf	door_status_changed@val
  4280  058E  0865               	movf	??_main+1,w
  4281  058F  00DE               	movwf	door_status_changed@val+1
  4282  0590  3001               	movlw	1
  4283  0591  3185  25E0  3180   	fcall	_door_status_changed
  4284  0594  3A00               	xorlw	0
  4285  0595  1903               	skipnz
  4286  0596  2D98               	goto	u3121
  4287  0597  2D99               	goto	u3120
  4288  0598                     u3121:
  4289  0598  2D77               	goto	l4779
  4290  0599                     u3120:
  4291  0599                     l4787:
  4292                           
  4293                           ;main.c: 485:                         working_state = WAITFORCLOSE;
  4294  0599  3003               	movlw	3
  4295  059A  0020               	movlb	0	; select bank0
  4296  059B  00E4               	movwf	??_main
  4297  059C  0864               	movf	??_main,w
  4298  059D  00D2               	movwf	_working_state
  4299  059E  2D77               	goto	l4779
  4300  059F                     l4791:
  4301                           
  4302                           ;main.c: 491:                 if(ADC_IsConversionDone()) {
  4303  059F  318D  2513  3180   	fcall	_ADC_IsConversionDone
  4304  05A2  3A00               	xorlw	0
  4305  05A3  1903               	skipnz
  4306  05A4  2DA6               	goto	u3131
  4307  05A5  2DA7               	goto	u3130
  4308  05A6                     u3131:
  4309  05A6  2885               	goto	l4409
  4310  05A7                     u3130:
  4311  05A7                     l4793:
  4312                           
  4313                           ;main.c: 492:                     uint8_t res = ADRESH;
  4314  05A7  0021               	movlb	1	; select bank1
  4315  05A8  081C               	movf	28,w	;volatile
  4316  05A9  0020               	movlb	0	; select bank0
  4317  05AA  00E4               	movwf	??_main
  4318  05AB  0864               	movf	??_main,w
  4319  05AC  00EB               	movwf	main@res_914
  4320  05AD                     l4795:
  4321                           
  4322                           ;main.c: 493:                     if(door_status_changed(0, res)) {
  4323  05AD  086B               	movf	main@res_914,w
  4324  05AE  00E4               	movwf	??_main
  4325  05AF  01E5               	clrf	??_main+1
  4326  05B0  0864               	movf	??_main,w
  4327  05B1  00DD               	movwf	door_status_changed@val
  4328  05B2  0865               	movf	??_main+1,w
  4329  05B3  00DE               	movwf	door_status_changed@val+1
  4330  05B4  3000               	movlw	0
  4331  05B5  3185  25E0  3180   	fcall	_door_status_changed
  4332  05B8  3A00               	xorlw	0
  4333  05B9  1903               	skipnz
  4334  05BA  2DBC               	goto	u3141
  4335  05BB  2DBD               	goto	u3140
  4336  05BC                     u3141:
  4337  05BC  2D77               	goto	l4779
  4338  05BD                     u3140:
  4339  05BD                     l4797:
  4340                           
  4341                           ;main.c: 494:                         send_stat(LOCK_CLOSED);
  4342  05BD  3007               	movlw	7
  4343  05BE  318D  25C1  3180   	fcall	_send_stat
  4344  05C1                     l4799:
  4345                           
  4346                           ;main.c: 495:                         lock_status = 0;
  4347  05C1  0020               	movlb	0	; select bank0
  4348  05C2  01CC               	clrf	_lock_status
  4349  05C3                     l4801:
  4350                           
  4351                           ;main.c: 496:                         working_state = IDLE;
  4352  05C3  01D2               	clrf	_working_state
  4353  05C4                     l4803:
  4354  05C4  0022               	movlb	2	; select bank2
  4355  05C5  100C               	bcf	12,0	;volatile
  4356  05C6  2D77               	goto	l4779
  4357  05C7                     l4809:
  4358  05C7  0020               	movlb	0	; select bank0
  4359  05C8  0852               	movf	_working_state,w
  4360  05C9  00E4               	movwf	??_main
  4361  05CA  01E5               	clrf	??_main+1
  4362                           
  4363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4364                           ; Switch size 1, requested type "simple"
  4365                           ; Number of cases is 1, Range of values is 0 to 0
  4366                           ; switch strategies available:
  4367                           ; Name         Instructions Cycles
  4368                           ; simple_byte            4     3 (average)
  4369                           ; direct_byte            8     6 (fixed)
  4370                           ; jumptable            260     6 (fixed)
  4371                           ;	Chosen strategy is simple_byte
  4372  05CB  0865               	movf	??_main+1,w
  4373  05CC  3A00               	xorlw	0	; case 0
  4374  05CD  1903               	skipnz
  4375  05CE  2DD0               	goto	l5247
  4376  05CF  2885               	goto	l4409
  4377  05D0                     l5247:
  4378                           
  4379                           ; Switch size 1, requested type "simple"
  4380                           ; Number of cases is 4, Range of values is 0 to 3
  4381                           ; switch strategies available:
  4382                           ; Name         Instructions Cycles
  4383                           ; simple_byte           13     7 (average)
  4384                           ; direct_byte           14     6 (fixed)
  4385                           ; jumptable            260     6 (fixed)
  4386                           ;	Chosen strategy is simple_byte
  4387  05D0  0864               	movf	??_main,w
  4388  05D1  3A00               	xorlw	0	; case 0
  4389  05D2  1903               	skipnz
  4390  05D3  2885               	goto	l4409
  4391  05D4  3A01               	xorlw	1	; case 1
  4392  05D5  1903               	skipnz
  4393  05D6  2D6A               	goto	l607
  4394  05D7  3A03               	xorlw	3	; case 2
  4395  05D8  1903               	skipnz
  4396  05D9  2D7B               	goto	l4781
  4397  05DA  3A01               	xorlw	1	; case 3
  4398  05DB  1903               	skipnz
  4399  05DC  2D9F               	goto	l4791
  4400  05DD  2885               	goto	l4409
  4401  05DE  3180  283A         	ljmp	start
  4402  05E0                     __end_of_main:
  4403                           
  4404                           	psect	text1
  4405  0DF3                     __ptext1:	
  4406 ;; *************** function _wait_for_requested *****************
  4407 ;; Defined at:
  4408 ;;		line 602 in file "main.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  req             1    wreg     unsigned char 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  req             1    2[COMMON] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      _Bool 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4422 ;;      Params:         0       0       0       0       0       0
  4423 ;;      Locals:         1       0       0       0       0       0
  4424 ;;      Temps:          1       0       0       0       0       0
  4425 ;;      Totals:         2       0       0       0       0       0
  4426 ;;Total ram usage:        2 bytes
  4427 ;; Hardware stack levels used: 1
  4428 ;; Hardware stack levels required when called: 4
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_main
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           
  4437                           ;psect for function _wait_for_requested
  4438  0DF3                     _wait_for_requested:
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _wait_for_requested: [wreg+fsr1l+fsr1h+status,2+status,0]
  4442                           ;wait_for_requested@req stored from wreg
  4443  0DF3  00F2               	movwf	wait_for_requested@req
  4444  0DF4                     l3317:
  4445                           
  4446                           ;main.c: 603:     if(((data_storage[0] & (1<<7)) > 0) && (req == (data_storage[0] & (~(1
      +                          <<7))))) {
  4447  0DF4  30EF               	movlw	239
  4448  0DF5  0086               	movwf	6
  4449  0DF6  3020               	movlw	32
  4450  0DF7  0087               	movwf	7
  4451  0DF8  1F81               	btfss	1,7
  4452  0DF9  2DFB               	goto	u1601
  4453  0DFA  2DFC               	goto	u1600
  4454  0DFB                     u1601:
  4455  0DFB  2E0B               	goto	l3325
  4456  0DFC                     u1600:
  4457  0DFC                     l3319:
  4458  0DFC  30EF               	movlw	239
  4459  0DFD  0086               	movwf	6
  4460  0DFE  3020               	movlw	32
  4461  0DFF  0087               	movwf	7
  4462  0E00  307F               	movlw	127
  4463  0E01  0501               	andwf	1,w
  4464  0E02  00F1               	movwf	??_wait_for_requested
  4465  0E03  0871               	movf	??_wait_for_requested,w
  4466  0E04  0672               	xorwf	wait_for_requested@req,w
  4467  0E05  1D03               	skipz
  4468  0E06  2E08               	goto	u1611
  4469  0E07  2E09               	goto	u1610
  4470  0E08                     u1611:
  4471  0E08  2E0B               	goto	l3325
  4472  0E09                     u1610:
  4473  0E09                     l3321:
  4474                           
  4475                           ;main.c: 604:         return 1;
  4476  0E09  3001               	movlw	1
  4477  0E0A  2E0C               	goto	l693
  4478  0E0B                     l3325:
  4479                           
  4480                           ;main.c: 606:     return 0;
  4481  0E0B  3000               	movlw	0
  4482  0E0C                     l693:
  4483  0E0C  0008               	return
  4484  0E0D                     __end_of_wait_for_requested:
  4485                           
  4486                           	psect	text2
  4487  0D7F                     __ptext2:	
  4488 ;; *************** function _stop_cmd *****************
  4489 ;; Defined at:
  4490 ;;		line 609 in file "main.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4504 ;;      Params:         0       0       0       0       0       0
  4505 ;;      Locals:         0       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0
  4507 ;;      Totals:         0       0       0       0       0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used: 1
  4510 ;; Hardware stack levels required when called: 4
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function _stop_cmd
  4520  0D7F                     _stop_cmd:
  4521  0D7F                     l3249:	
  4522                           ;incstack = 0
  4523                           ; Regs used in _stop_cmd: [wreg+status,2]
  4524                           
  4525                           
  4526                           ;main.c: 610:     cmd_time = 0;
  4527  0D7F  3000               	movlw	0
  4528  0D80  0020               	movlb	0	; select bank0
  4529  0D81  00A7               	movwf	_cmd_time+3
  4530  0D82  3000               	movlw	0
  4531  0D83  00A6               	movwf	_cmd_time+2
  4532  0D84  3000               	movlw	0
  4533  0D85  00A5               	movwf	_cmd_time+1
  4534  0D86  3000               	movlw	0
  4535  0D87  00A4               	movwf	_cmd_time
  4536                           
  4537                           ;main.c: 611:     cmd_timer_len = 0;
  4538  0D88  3000               	movlw	0
  4539  0D89  00A3               	movwf	_cmd_timer_len+3
  4540  0D8A  3000               	movlw	0
  4541  0D8B  00A2               	movwf	_cmd_timer_len+2
  4542  0D8C  3000               	movlw	0
  4543  0D8D  00A1               	movwf	_cmd_timer_len+1
  4544  0D8E  3000               	movlw	0
  4545  0D8F  00A0               	movwf	_cmd_timer_len
  4546  0D90                     l3251:
  4547                           
  4548                           ;main.c: 612:     cmd_exe_counter = 0;
  4549  0D90  01B4               	clrf	_cmd_exe_counter
  4550  0D91  01B5               	clrf	_cmd_exe_counter+1
  4551  0D92                     l3253:
  4552                           
  4553                           ;main.c: 613:     cmd_exe = WAITTOSTART;
  4554  0D92  01D0               	clrf	_cmd_exe
  4555  0D93                     l696:
  4556  0D93  0008               	return
  4557  0D94                     __end_of_stop_cmd:
  4558                           
  4559                           	psect	text3
  4560  0DC1                     __ptext3:	
  4561 ;; *************** function _send_stat *****************
  4562 ;; Defined at:
  4563 ;;		line 546 in file "main.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  stat            1    wreg     unsigned char 
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;  stat            1    0[BANK0 ] unsigned char 
  4568 ;;  status_proto    2    1[BANK0 ] unsigned char [2]
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4578 ;;      Params:         0       0       0       0       0       0
  4579 ;;      Locals:         0       3       0       0       0       0
  4580 ;;      Temps:          1       0       0       0       0       0
  4581 ;;      Totals:         1       3       0       0       0       0
  4582 ;;Total ram usage:        4 bytes
  4583 ;; Hardware stack levels used: 1
  4584 ;; Hardware stack levels required when called: 6
  4585 ;; This function calls:
  4586 ;;		_send_msg_stopping
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _send_stat
  4594  0DC1                     _send_stat:
  4595                           
  4596                           ;incstack = 0
  4597                           ; Regs used in _send_stat: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4598                           ;send_stat@stat stored from wreg
  4599  0DC1  0020               	movlb	0	; select bank0
  4600  0DC2  00D9               	movwf	send_stat@stat
  4601  0DC3                     l4343:
  4602                           
  4603                           ;main.c: 547:     uint8_t status_protocol[] = {0b00011000, stat};
  4604  0DC3  01DA               	clrf	send_stat@status_protocol
  4605  0DC4  01DB               	clrf	send_stat@status_protocol+1
  4606  0DC5                     l4345:
  4607  0DC5  3018               	movlw	24
  4608  0DC6  00F9               	movwf	??_send_stat
  4609  0DC7  0879               	movf	??_send_stat,w
  4610  0DC8  00DA               	movwf	send_stat@status_protocol
  4611  0DC9                     l4347:
  4612  0DC9  0859               	movf	send_stat@stat,w
  4613  0DCA  00F9               	movwf	??_send_stat
  4614  0DCB  0879               	movf	??_send_stat,w
  4615  0DCC  00DB               	movwf	send_stat@status_protocol+1
  4616  0DCD                     l4349:
  4617                           
  4618                           ;main.c: 548:     send_msg_stopping(status_protocol, 2);
  4619  0DCD  305A               	movlw	low send_stat@status_protocol
  4620  0DCE  00F3               	movwf	send_msg_stopping@msg
  4621  0DCF  3000               	movlw	high send_stat@status_protocol
  4622  0DD0  00F4               	movwf	send_msg_stopping@msg+1
  4623  0DD1  3002               	movlw	2
  4624  0DD2  00F9               	movwf	??_send_stat
  4625  0DD3  0879               	movf	??_send_stat,w
  4626  0DD4  00F5               	movwf	send_msg_stopping@len
  4627  0DD5  318E  26AD  318D   	fcall	_send_msg_stopping
  4628  0DD8                     l655:
  4629  0DD8  0008               	return
  4630  0DD9                     __end_of_send_stat:
  4631                           
  4632                           	psect	text4
  4633  0F57                     __ptext4:	
  4634 ;; *************** function _send_req *****************
  4635 ;; Defined at:
  4636 ;;		line 524 in file "main.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  var             1    wreg     unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  var             1    0[BANK0 ] unsigned char 
  4641 ;;  request_prot    3    1[BANK0 ] unsigned char [3]
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4651 ;;      Params:         0       0       0       0       0       0
  4652 ;;      Locals:         0       4       0       0       0       0
  4653 ;;      Temps:          1       0       0       0       0       0
  4654 ;;      Totals:         1       4       0       0       0       0
  4655 ;;Total ram usage:        5 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 6
  4658 ;; This function calls:
  4659 ;;		_del_array
  4660 ;;		_send_msg_stopping
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _send_req
  4668  0F57                     _send_req:
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _send_req: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4672                           ;send_req@var stored from wreg
  4673  0F57  0020               	movlb	0	; select bank0
  4674  0F58  00D9               	movwf	send_req@var
  4675  0F59                     l4351:
  4676                           
  4677                           ;main.c: 525:     del_array(data_storage, 127 + 2);
  4678  0F59  30EF               	movlw	239
  4679  0F5A  00F1               	movwf	del_array@array
  4680  0F5B  3020               	movlw	32
  4681  0F5C  00F2               	movwf	del_array@array+1
  4682  0F5D  3081               	movlw	129
  4683  0F5E  00F3               	movwf	del_array@len
  4684  0F5F  3000               	movlw	0
  4685  0F60  00F4               	movwf	del_array@len+1
  4686  0F61  318E  260D  318F   	fcall	_del_array
  4687  0F64                     l4353:
  4688                           
  4689                           ;main.c: 526:     uint8_t request_protocol[] = {0b01000010, var, 0};
  4690  0F64  3000               	movlw	0
  4691  0F65  0020               	movlb	0	; select bank0
  4692  0F66  00DA               	movwf	send_req@request_protocol
  4693  0F67  3000               	movlw	0
  4694  0F68  00DB               	movwf	send_req@request_protocol+1
  4695  0F69  3000               	movlw	0
  4696  0F6A  00DC               	movwf	send_req@request_protocol+2
  4697  0F6B                     l4355:
  4698  0F6B  3042               	movlw	66
  4699  0F6C  00F9               	movwf	??_send_req
  4700  0F6D  0879               	movf	??_send_req,w
  4701  0F6E  00DA               	movwf	send_req@request_protocol
  4702  0F6F                     l4357:
  4703  0F6F  0859               	movf	send_req@var,w
  4704  0F70  00F9               	movwf	??_send_req
  4705  0F71  0879               	movf	??_send_req,w
  4706  0F72  00DB               	movwf	send_req@request_protocol+1
  4707  0F73                     l4359:
  4708  0F73  01DC               	clrf	send_req@request_protocol+2
  4709  0F74                     l4361:
  4710                           
  4711                           ;main.c: 527:     request_protocol[2] = request_protocol[0] ^ request_protocol[1];
  4712  0F74  085B               	movf	send_req@request_protocol+1,w
  4713  0F75  065A               	xorwf	send_req@request_protocol,w
  4714  0F76  00F9               	movwf	??_send_req
  4715  0F77  0879               	movf	??_send_req,w
  4716  0F78  00DC               	movwf	send_req@request_protocol+2
  4717  0F79                     l4363:
  4718                           
  4719                           ;main.c: 528:     send_msg_stopping(request_protocol, 3);
  4720  0F79  305A               	movlw	low send_req@request_protocol
  4721  0F7A  00F3               	movwf	send_msg_stopping@msg
  4722  0F7B  3000               	movlw	high send_req@request_protocol
  4723  0F7C  00F4               	movwf	send_msg_stopping@msg+1
  4724  0F7D  3003               	movlw	3
  4725  0F7E  00F9               	movwf	??_send_req
  4726  0F7F  0879               	movf	??_send_req,w
  4727  0F80  00F5               	movwf	send_msg_stopping@len
  4728  0F81  318E  26AD  318F   	fcall	_send_msg_stopping
  4729  0F84                     l4365:
  4730                           
  4731                           ;main.c: 529:     status_storage = 0;
  4732  0F84  0020               	movlb	0	; select bank0
  4733  0F85  01CD               	clrf	_status_storage
  4734  0F86                     l644:
  4735  0F86  0008               	return
  4736  0F87                     __end_of_send_req:
  4737                           
  4738                           	psect	text5
  4739  0EAD                     __ptext5:	
  4740 ;; *************** function _send_msg_stopping *****************
  4741 ;; Defined at:
  4742 ;;		line 510 in file "main.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  msg             2    3[COMMON] PTR unsigned char 
  4745 ;;		 -> send_stat@status_protocol(2), RAM(4096), send_dat@var(1), send_dat@len(1), 
  4746 ;;		 -> send_dat@control_byte(1), send_req@request_protocol(3), send_cmd@command_protocol(3), 
  4747 ;;  len             1    5[COMMON] unsigned char 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  x               2    7[COMMON] int 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4759 ;;      Params:         3       0       0       0       0       0
  4760 ;;      Locals:         2       0       0       0       0       0
  4761 ;;      Temps:          1       0       0       0       0       0
  4762 ;;      Totals:         6       0       0       0       0       0
  4763 ;;Total ram usage:        6 bytes
  4764 ;; Hardware stack levels used: 1
  4765 ;; Hardware stack levels required when called: 5
  4766 ;; This function calls:
  4767 ;;		_EUSART_Write
  4768 ;;		_EUSART_is_tx_done
  4769 ;; This function is called by:
  4770 ;;		_send_req
  4771 ;;		_send_stat
  4772 ;;		_send_cmd
  4773 ;;		_send_dat
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           
  4778                           ;psect for function _send_msg_stopping
  4779  0EAD                     _send_msg_stopping:
  4780  0EAD                     l4275:	
  4781                           ;incstack = 0
  4782                           ; Regs used in _send_msg_stopping: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4783                           
  4784                           
  4785                           ;main.c: 511:     for (int x = 0; x < len; x++) {
  4786  0EAD  01F7               	clrf	send_msg_stopping@x
  4787  0EAE  01F8               	clrf	send_msg_stopping@x+1
  4788  0EAF  2EC6               	goto	l4283
  4789  0EB0                     l4277:
  4790  0EB0  318C  24EB  318E   	fcall	_EUSART_is_tx_done
  4791  0EB3  3A00               	xorlw	0
  4792  0EB4  1903               	skipnz
  4793  0EB5  2EB7               	goto	u2401
  4794  0EB6  2EB8               	goto	u2400
  4795  0EB7                     u2401:
  4796  0EB7  2EB0               	goto	l4277
  4797  0EB8                     u2400:
  4798  0EB8                     l4279:
  4799                           
  4800                           ;main.c: 513:         EUSART_Write(*(msg + x));
  4801  0EB8  0877               	movf	send_msg_stopping@x,w
  4802  0EB9  0773               	addwf	send_msg_stopping@msg,w
  4803  0EBA  0086               	movwf	6
  4804  0EBB  0878               	movf	send_msg_stopping@x+1,w
  4805  0EBC  3D74               	addwfc	send_msg_stopping@msg+1,w
  4806  0EBD  0087               	movwf	7
  4807  0EBE  0801               	movf	1,w
  4808  0EBF  318E  26FE  318E   	fcall	_EUSART_Write
  4809  0EC2                     l4281:
  4810                           
  4811                           ;main.c: 514:     }
  4812  0EC2  3001               	movlw	1
  4813  0EC3  07F7               	addwf	send_msg_stopping@x,f
  4814  0EC4  3000               	movlw	0
  4815  0EC5  3DF8               	addwfc	send_msg_stopping@x+1,f
  4816  0EC6                     l4283:
  4817  0EC6  0878               	movf	send_msg_stopping@x+1,w
  4818  0EC7  3A80               	xorlw	128
  4819  0EC8  00F6               	movwf	??_send_msg_stopping
  4820  0EC9  3080               	movlw	128
  4821  0ECA  0276               	subwf	??_send_msg_stopping,w
  4822  0ECB  1D03               	skipz
  4823  0ECC  2ECF               	goto	u2415
  4824  0ECD  0875               	movf	send_msg_stopping@len,w
  4825  0ECE  0277               	subwf	send_msg_stopping@x,w
  4826  0ECF                     u2415:
  4827  0ECF  1C03               	skipc
  4828  0ED0  2ED2               	goto	u2411
  4829  0ED1  2ED3               	goto	u2410
  4830  0ED2                     u2411:
  4831  0ED2  2EB0               	goto	l4277
  4832  0ED3                     u2410:
  4833  0ED3                     l634:
  4834  0ED3  0008               	return
  4835  0ED4                     __end_of_send_msg_stopping:
  4836                           
  4837                           	psect	text6
  4838  0CEB                     __ptext6:	
  4839 ;; *************** function _EUSART_is_tx_done *****************
  4840 ;; Defined at:
  4841 ;;		line 142 in file "mcc_generated_files/eusart.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      _Bool 
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4855 ;;      Params:         0       0       0       0       0       0
  4856 ;;      Locals:         0       0       0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0
  4858 ;;      Totals:         0       0       0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used: 1
  4861 ;; Hardware stack levels required when called: 4
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_send_msg_stopping
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function _EUSART_is_tx_done
  4871  0CEB                     _EUSART_is_tx_done:
  4872  0CEB                     l4253:	
  4873                           ;incstack = 0
  4874                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  4875                           
  4876                           
  4877                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  4878  0CEB  0023               	movlb	3	; select bank3
  4879  0CEC  0C1E               	rrf	30,w	;volatile
  4880  0CED  3901               	andlw	1
  4881  0CEE                     l168:
  4882  0CEE  0008               	return
  4883  0CEF                     __end_of_EUSART_is_tx_done:
  4884                           
  4885                           	psect	text7
  4886  0EFE                     __ptext7:	
  4887 ;; *************** function _EUSART_Write *****************
  4888 ;; Defined at:
  4889 ;;		line 173 in file "mcc_generated_files/eusart.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  txData          1    wreg     unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  txData          1    2[COMMON] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4903 ;;      Params:         0       0       0       0       0       0
  4904 ;;      Locals:         1       0       0       0       0       0
  4905 ;;      Temps:          1       0       0       0       0       0
  4906 ;;      Totals:         2       0       0       0       0       0
  4907 ;;Total ram usage:        2 bytes
  4908 ;; Hardware stack levels used: 1
  4909 ;; Hardware stack levels required when called: 4
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_send_msg_stopping
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _EUSART_Write
  4919  0EFE                     _EUSART_Write:
  4920                           
  4921                           ;incstack = 0
  4922                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4923                           ;EUSART_Write@txData stored from wreg
  4924  0EFE  00F2               	movwf	EUSART_Write@txData
  4925  0EFF                     l4257:
  4926  0EFF                     l4259:	
  4927                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  4928                           
  4929                           
  4930                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  4931  0EFF  0020               	movlb	0	; select bank0
  4932  0F00  0856               	movf	_eusartTxBufferRemaining,w	;volatile
  4933  0F01  1903               	btfsc	3,2
  4934  0F02  2F04               	goto	u2371
  4935  0F03  2F05               	goto	u2370
  4936  0F04                     u2371:
  4937  0F04  2EFF               	goto	l4259
  4938  0F05                     u2370:
  4939  0F05                     l183:
  4940                           
  4941                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  4942  0F05  0021               	movlb	1	; select bank1
  4943  0F06  1A11               	btfsc	17,4	;volatile
  4944  0F07  2F09               	goto	u2381
  4945  0F08  2F0A               	goto	u2380
  4946  0F09                     u2381:
  4947  0F09  2F0E               	goto	l184
  4948  0F0A                     u2380:
  4949  0F0A                     l4261:
  4950                           
  4951                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  4952  0F0A  0872               	movf	EUSART_Write@txData,w
  4953  0F0B  0023               	movlb	3	; select bank3
  4954  0F0C  009A               	movwf	26	;volatile
  4955                           
  4956                           ;mcc_generated_files/eusart.c: 182:     }
  4957  0F0D  2F25               	goto	l4273
  4958  0F0E                     l184:	
  4959                           ;mcc_generated_files/eusart.c: 183:     else
  4960                           
  4961                           
  4962                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  4963  0F0E  1211               	bcf	17,4	;volatile
  4964  0F0F                     l4263:
  4965                           
  4966                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  4967  0F0F  0872               	movf	EUSART_Write@txData,w
  4968  0F10  00F1               	movwf	??_EUSART_Write
  4969  0F11  0020               	movlb	0	; select bank0
  4970  0F12  0858               	movf	_eusartTxHead,w
  4971  0F13  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4972  0F14  0086               	movwf	6
  4973  0F15  0187               	clrf	7
  4974  0F16  0871               	movf	??_EUSART_Write,w
  4975  0F17  0081               	movwf	1
  4976  0F18                     l4265:
  4977  0F18  3001               	movlw	1
  4978  0F19  00F1               	movwf	??_EUSART_Write
  4979  0F1A  0871               	movf	??_EUSART_Write,w
  4980  0F1B  07D8               	addwf	_eusartTxHead,f	;volatile
  4981  0F1C                     l4267:
  4982                           
  4983                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4984  0F1C  3008               	movlw	8
  4985  0F1D  0258               	subwf	_eusartTxHead,w	;volatile
  4986  0F1E  1C03               	skipc
  4987  0F1F  2F21               	goto	u2391
  4988  0F20  2F22               	goto	u2390
  4989  0F21                     u2391:
  4990  0F21  2F23               	goto	l4271
  4991  0F22                     u2390:
  4992  0F22                     l4269:
  4993                           
  4994                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  4995  0F22  01D8               	clrf	_eusartTxHead	;volatile
  4996  0F23                     l4271:
  4997                           
  4998                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  4999  0F23  3001               	movlw	1
  5000  0F24  02D6               	subwf	_eusartTxBufferRemaining,f	;volatile
  5001  0F25                     l4273:
  5002                           
  5003                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  5004  0F25  0021               	movlb	1	; select bank1
  5005  0F26  1611               	bsf	17,4	;volatile
  5006  0F27                     l187:
  5007  0F27  0008               	return
  5008  0F28                     __end_of_EUSART_Write:
  5009                           
  5010                           	psect	text8
  5011  0E0D                     __ptext8:	
  5012 ;; *************** function _del_array *****************
  5013 ;; Defined at:
  5014 ;;		line 506 in file "main.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  array           2    1[COMMON] PTR unsigned char 
  5017 ;;		 -> data_storage(129), 
  5018 ;;  len             2    3[COMMON] short 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;  x               2    6[COMMON] short 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5030 ;;      Params:         4       0       0       0       0       0
  5031 ;;      Locals:         2       0       0       0       0       0
  5032 ;;      Temps:          1       0       0       0       0       0
  5033 ;;      Totals:         7       0       0       0       0       0
  5034 ;;Total ram usage:        7 bytes
  5035 ;; Hardware stack levels used: 1
  5036 ;; Hardware stack levels required when called: 4
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_send_req
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _del_array
  5046  0E0D                     _del_array:
  5047  0E0D                     l3093:	
  5048                           ;incstack = 0
  5049                           ; Regs used in _del_array: [wreg+fsr1l+fsr1h+status,2+status,0]
  5050                           
  5051                           
  5052                           ;main.c: 507:     for (int16_t x = 0; x < len; x++) *(array + x) = 0;
  5053  0E0D  01F6               	clrf	del_array@x
  5054  0E0E  01F7               	clrf	del_array@x+1
  5055  0E0F  2E1B               	goto	l3099
  5056  0E10                     l3095:
  5057  0E10  0876               	movf	del_array@x,w
  5058  0E11  0771               	addwf	del_array@array,w
  5059  0E12  0086               	movwf	6
  5060  0E13  0877               	movf	del_array@x+1,w
  5061  0E14  3D72               	addwfc	del_array@array+1,w
  5062  0E15  0087               	movwf	7
  5063  0E16  0181               	clrf	1
  5064  0E17                     l3097:
  5065  0E17  3001               	movlw	1
  5066  0E18  07F6               	addwf	del_array@x,f
  5067  0E19  3000               	movlw	0
  5068  0E1A  3DF7               	addwfc	del_array@x+1,f
  5069  0E1B                     l3099:
  5070  0E1B  0877               	movf	del_array@x+1,w
  5071  0E1C  3A80               	xorlw	128
  5072  0E1D  00F5               	movwf	??_del_array
  5073  0E1E  0874               	movf	del_array@len+1,w
  5074  0E1F  3A80               	xorlw	128
  5075  0E20  0275               	subwf	??_del_array,w
  5076  0E21  1D03               	skipz
  5077  0E22  2E25               	goto	u1325
  5078  0E23  0873               	movf	del_array@len,w
  5079  0E24  0276               	subwf	del_array@x,w
  5080  0E25                     u1325:
  5081  0E25  1C03               	skipc
  5082  0E26  2E28               	goto	u1321
  5083  0E27  2E29               	goto	u1320
  5084  0E28                     u1321:
  5085  0E28  2E10               	goto	l3095
  5086  0E29                     u1320:
  5087  0E29                     l625:
  5088  0E29  0008               	return
  5089  0E2A                     __end_of_del_array:
  5090                           
  5091                           	psect	text9
  5092  0F28                     __ptext9:	
  5093 ;; *************** function _seek_confirmation *****************
  5094 ;; Defined at:
  5095 ;;		line 584 in file "main.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  wait_num        2    1[COMMON] int 
  5098 ;;  continue_num    2    3[COMMON] int 
  5099 ;;  retry_num       2    5[COMMON] int 
  5100 ;;  cancel_num      2    7[COMMON] int 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  2    1[COMMON] int 
  5105 ;; Registers used:
  5106 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5112 ;;      Params:         8       0       0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0
  5114 ;;      Temps:          2       0       0       0       0       0
  5115 ;;      Totals:        10       0       0       0       0       0
  5116 ;;Total ram usage:       10 bytes
  5117 ;; Hardware stack levels used: 1
  5118 ;; Hardware stack levels required when called: 4
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		_main
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           
  5127                           ;psect for function _seek_confirmation
  5128  0F28                     _seek_confirmation:
  5129  0F28                     l3279:	
  5130                           ;incstack = 0
  5131                           ; Regs used in _seek_confirmation: [wreg-fsr0h+status,2+status,0]
  5132                           
  5133                           
  5134                           ;main.c: 585:     if((status_storage & (1<<7)) > 0) {
  5135  0F28  0020               	movlb	0	; select bank0
  5136  0F29  1FCD               	btfss	_status_storage,7
  5137  0F2A  2F2C               	goto	u1591
  5138  0F2B  2F2D               	goto	u1590
  5139  0F2C                     u1591:
  5140  0F2C  2F56               	goto	l3307
  5141  0F2D                     u1590:
  5142  0F2D  2F3D               	goto	l3303
  5143  0F2E                     l3283:
  5144                           
  5145                           ;main.c: 588:                 return continue_num;
  5146  0F2E  0874               	movf	seek_confirmation@continue_num+1,w
  5147  0F2F  00F2               	movwf	?_seek_confirmation+1
  5148  0F30  0873               	movf	seek_confirmation@continue_num,w
  5149  0F31  00F1               	movwf	?_seek_confirmation
  5150  0F32  2F56               	goto	l686
  5151  0F33                     l3289:
  5152                           
  5153                           ;main.c: 591:                 return cancel_num;
  5154  0F33  0878               	movf	seek_confirmation@cancel_num+1,w
  5155  0F34  00F2               	movwf	?_seek_confirmation+1
  5156  0F35  0877               	movf	seek_confirmation@cancel_num,w
  5157  0F36  00F1               	movwf	?_seek_confirmation
  5158  0F37  2F56               	goto	l686
  5159  0F38                     l3295:
  5160                           
  5161                           ;main.c: 594:                 return retry_num;
  5162  0F38  0876               	movf	seek_confirmation@retry_num+1,w
  5163  0F39  00F2               	movwf	?_seek_confirmation+1
  5164  0F3A  0875               	movf	seek_confirmation@retry_num,w
  5165  0F3B  00F1               	movwf	?_seek_confirmation
  5166  0F3C  2F56               	goto	l686
  5167  0F3D                     l3303:
  5168  0F3D  084D               	movf	_status_storage,w
  5169  0F3E  397F               	andlw	127
  5170  0F3F  00F9               	movwf	??_seek_confirmation
  5171  0F40  01FA               	clrf	??_seek_confirmation+1
  5172                           
  5173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5174                           ; Switch size 1, requested type "simple"
  5175                           ; Number of cases is 1, Range of values is 0 to 0
  5176                           ; switch strategies available:
  5177                           ; Name         Instructions Cycles
  5178                           ; simple_byte            4     3 (average)
  5179                           ; direct_byte            8     6 (fixed)
  5180                           ; jumptable            260     6 (fixed)
  5181                           ;	Chosen strategy is simple_byte
  5182  0F41  087A               	movf	??_seek_confirmation+1,w
  5183  0F42  3A00               	xorlw	0	; case 0
  5184  0F43  1903               	skipnz
  5185  0F44  2F46               	goto	l5249
  5186  0F45  2F51               	goto	l3305
  5187  0F46                     l5249:
  5188                           
  5189                           ; Switch size 1, requested type "simple"
  5190                           ; Number of cases is 3, Range of values is 2 to 5
  5191                           ; switch strategies available:
  5192                           ; Name         Instructions Cycles
  5193                           ; simple_byte           10     6 (average)
  5194                           ; direct_byte           17     9 (fixed)
  5195                           ; jumptable            263     9 (fixed)
  5196                           ;	Chosen strategy is simple_byte
  5197  0F46  0879               	movf	??_seek_confirmation,w
  5198  0F47  3A02               	xorlw	2	; case 2
  5199  0F48  1903               	skipnz
  5200  0F49  2F2E               	goto	l3283
  5201  0F4A  3A06               	xorlw	6	; case 4
  5202  0F4B  1903               	skipnz
  5203  0F4C  2F33               	goto	l3289
  5204  0F4D  3A01               	xorlw	1	; case 5
  5205  0F4E  1903               	skipnz
  5206  0F4F  2F38               	goto	l3295
  5207  0F50  2F51               	goto	l3305
  5208  0F51                     l3305:
  5209                           
  5210                           ;main.c: 597:         status_storage = status_storage & (~(1<<7));
  5211  0F51  084D               	movf	_status_storage,w
  5212  0F52  397F               	andlw	127
  5213  0F53  00F9               	movwf	??_seek_confirmation
  5214  0F54  0879               	movf	??_seek_confirmation,w
  5215  0F55  00CD               	movwf	_status_storage
  5216  0F56                     l3307:
  5217  0F56                     l686:	
  5218                           ;main.c: 599:     return wait_num;
  5219                           
  5220  0F56  0008               	return
  5221  0F57                     __end_of_seek_confirmation:
  5222                           
  5223                           	psect	text10
  5224  0768                     __ptext10:	
  5225 ;; *************** function _save_pw *****************
  5226 ;; Defined at:
  5227 ;;		line 569 in file "main.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  pw              2    4[COMMON] PTR unsigned char 
  5230 ;;		 -> data_storage(129), 
  5231 ;;  len             1    6[COMMON] unsigned char 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  x               2    8[COMMON] int 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5243 ;;      Params:         3       0       0       0       0       0
  5244 ;;      Locals:         2       0       0       0       0       0
  5245 ;;      Temps:          1       0       0       0       0       0
  5246 ;;      Totals:         6       0       0       0       0       0
  5247 ;;Total ram usage:        6 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; Hardware stack levels required when called: 5
  5250 ;; This function calls:
  5251 ;;		_DATAEE_ReadByte
  5252 ;;		_DATAEE_WriteByte
  5253 ;; This function is called by:
  5254 ;;		_main
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _save_pw
  5260  0768                     _save_pw:
  5261  0768                     l3353:	
  5262                           ;incstack = 0
  5263                           ; Regs used in _save_pw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5264                           
  5265                           
  5266                           ;main.c: 570:     if (DATAEE_ReadByte(4) != len) DATAEE_WriteByte(4, len);
  5267  0768  3004               	movlw	4
  5268  0769  318D  2537  3187   	fcall	_DATAEE_ReadByte
  5269  076C  0676               	xorwf	save_pw@len,w
  5270  076D  1903               	skipnz
  5271  076E  2F70               	goto	u1651
  5272  076F  2F71               	goto	u1650
  5273  0770                     u1651:
  5274  0770  2F79               	goto	l3357
  5275  0771                     u1650:
  5276  0771                     l3355:
  5277  0771  0876               	movf	save_pw@len,w
  5278  0772  00F7               	movwf	??_save_pw
  5279  0773  0877               	movf	??_save_pw,w
  5280  0774  00F1               	movwf	DATAEE_WriteByte@bData
  5281  0775  3004               	movlw	4
  5282  0776  318E  262A  3187   	fcall	_DATAEE_WriteByte
  5283  0779                     l3357:
  5284                           
  5285                           ;main.c: 571:     for (int x = 0; x < len; x++) if (DATAEE_ReadByte(x + 4 + 1) != *(pw +
      +                           x)) DATAEE_WriteByte(x + 4 + 1, *(pw + x));
  5286  0779  01F8               	clrf	save_pw@x
  5287  077A  01F9               	clrf	save_pw@x+1
  5288  077B  2F9F               	goto	l3365
  5289  077C                     l3359:
  5290  077C  0878               	movf	save_pw@x,w
  5291  077D  0774               	addwf	save_pw@pw,w
  5292  077E  0086               	movwf	6
  5293  077F  0879               	movf	save_pw@x+1,w
  5294  0780  3D75               	addwfc	save_pw@pw+1,w
  5295  0781  0087               	movwf	7
  5296  0782  0878               	movf	save_pw@x,w
  5297  0783  3E05               	addlw	5
  5298  0784  318D  2537  3187   	fcall	_DATAEE_ReadByte
  5299  0787  0601               	xorwf	1,w
  5300  0788  1903               	skipnz
  5301  0789  2F8B               	goto	u1661
  5302  078A  2F8C               	goto	u1660
  5303  078B                     u1661:
  5304  078B  2F9B               	goto	l3363
  5305  078C                     u1660:
  5306  078C                     l3361:
  5307  078C  0878               	movf	save_pw@x,w
  5308  078D  0774               	addwf	save_pw@pw,w
  5309  078E  0086               	movwf	6
  5310  078F  0879               	movf	save_pw@x+1,w
  5311  0790  3D75               	addwfc	save_pw@pw+1,w
  5312  0791  0087               	movwf	7
  5313  0792  0801               	movf	1,w
  5314  0793  00F7               	movwf	??_save_pw
  5315  0794  0877               	movf	??_save_pw,w
  5316  0795  00F1               	movwf	DATAEE_WriteByte@bData
  5317  0796  0878               	movf	save_pw@x,w
  5318  0797  3E05               	addlw	5
  5319  0798  318E  262A  3187   	fcall	_DATAEE_WriteByte
  5320  079B                     l3363:
  5321  079B  3001               	movlw	1
  5322  079C  07F8               	addwf	save_pw@x,f
  5323  079D  3000               	movlw	0
  5324  079E  3DF9               	addwfc	save_pw@x+1,f
  5325  079F                     l3365:
  5326  079F  0879               	movf	save_pw@x+1,w
  5327  07A0  3A80               	xorlw	128
  5328  07A1  00F7               	movwf	??_save_pw
  5329  07A2  3080               	movlw	128
  5330  07A3  0277               	subwf	??_save_pw,w
  5331  07A4  1D03               	skipz
  5332  07A5  2FA8               	goto	u1675
  5333  07A6  0876               	movf	save_pw@len,w
  5334  07A7  0278               	subwf	save_pw@x,w
  5335  07A8                     u1675:
  5336  07A8  1C03               	skipc
  5337  07A9  2FAB               	goto	u1671
  5338  07AA  2FAC               	goto	u1670
  5339  07AB                     u1671:
  5340  07AB  2F7C               	goto	l3359
  5341  07AC                     u1670:
  5342  07AC                     l672:
  5343  07AC  0008               	return
  5344  07AD                     __end_of_save_pw:
  5345                           
  5346                           	psect	text11
  5347  0E89                     __ptext11:	
  5348 ;; *************** function _save_hall_codes *****************
  5349 ;; Defined at:
  5350 ;;		line 579 in file "main.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  open            1    wreg     unsigned char 
  5353 ;;  close           1    4[COMMON] unsigned char 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  open            1    6[COMMON] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0, pclath, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5365 ;;      Params:         1       0       0       0       0       0
  5366 ;;      Locals:         1       0       0       0       0       0
  5367 ;;      Temps:          1       0       0       0       0       0
  5368 ;;      Totals:         3       0       0       0       0       0
  5369 ;;Total ram usage:        3 bytes
  5370 ;; Hardware stack levels used: 1
  5371 ;; Hardware stack levels required when called: 5
  5372 ;; This function calls:
  5373 ;;		_DATAEE_ReadByte
  5374 ;;		_DATAEE_WriteByte
  5375 ;; This function is called by:
  5376 ;;		_main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _save_hall_codes
  5382  0E89                     _save_hall_codes:
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _save_hall_codes: [wreg+status,2+status,0+pclath+cstack]
  5386                           ;save_hall_codes@open stored from wreg
  5387  0E89  00F6               	movwf	save_hall_codes@open
  5388  0E8A                     l3367:
  5389                           
  5390                           ;main.c: 580:     if (DATAEE_ReadByte(0) != open) DATAEE_WriteByte(0, open);
  5391  0E8A  3000               	movlw	0
  5392  0E8B  318D  2537  318E   	fcall	_DATAEE_ReadByte
  5393  0E8E  0676               	xorwf	save_hall_codes@open,w
  5394  0E8F  1903               	skipnz
  5395  0E90  2E92               	goto	u1681
  5396  0E91  2E93               	goto	u1680
  5397  0E92                     u1681:
  5398  0E92  2E9B               	goto	l3371
  5399  0E93                     u1680:
  5400  0E93                     l3369:
  5401  0E93  0876               	movf	save_hall_codes@open,w
  5402  0E94  00F5               	movwf	??_save_hall_codes
  5403  0E95  0875               	movf	??_save_hall_codes,w
  5404  0E96  00F1               	movwf	DATAEE_WriteByte@bData
  5405  0E97  3000               	movlw	0
  5406  0E98  318E  262A  318E   	fcall	_DATAEE_WriteByte
  5407  0E9B                     l3371:
  5408                           
  5409                           ;main.c: 581:     if (DATAEE_ReadByte(1) != close) DATAEE_WriteByte(1, close);
  5410  0E9B  3001               	movlw	1
  5411  0E9C  318D  2537  318E   	fcall	_DATAEE_ReadByte
  5412  0E9F  0674               	xorwf	save_hall_codes@close,w
  5413  0EA0  1903               	skipnz
  5414  0EA1  2EA3               	goto	u1691
  5415  0EA2  2EA4               	goto	u1690
  5416  0EA3                     u1691:
  5417  0EA3  2EAC               	goto	l680
  5418  0EA4                     u1690:
  5419  0EA4                     l3373:
  5420  0EA4  0874               	movf	save_hall_codes@close,w
  5421  0EA5  00F5               	movwf	??_save_hall_codes
  5422  0EA6  0875               	movf	??_save_hall_codes,w
  5423  0EA7  00F1               	movwf	DATAEE_WriteByte@bData
  5424  0EA8  3001               	movlw	1
  5425  0EA9  318E  262A  318E   	fcall	_DATAEE_WriteByte
  5426  0EAC                     l680:
  5427  0EAC  0008               	return
  5428  0EAD                     __end_of_save_hall_codes:
  5429                           
  5430                           	psect	text12
  5431  0E2A                     __ptext12:	
  5432 ;; *************** function _DATAEE_WriteByte *****************
  5433 ;; Defined at:
  5434 ;;		line 187 in file "mcc_generated_files/memory.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  bAdd            1    wreg     unsigned char 
  5437 ;;  bData           1    1[COMMON] unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  bAdd            1    2[COMMON] unsigned char 
  5440 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5450 ;;      Params:         1       0       0       0       0       0
  5451 ;;      Locals:         2       0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0
  5453 ;;      Totals:         3       0       0       0       0       0
  5454 ;;Total ram usage:        3 bytes
  5455 ;; Hardware stack levels used: 1
  5456 ;; Hardware stack levels required when called: 4
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_save_pw
  5461 ;;		_save_hall_codes
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _DATAEE_WriteByte
  5467  0E2A                     _DATAEE_WriteByte:
  5468                           
  5469                           ;incstack = 0
  5470                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  5471                           ;DATAEE_WriteByte@bAdd stored from wreg
  5472  0E2A  00F2               	movwf	DATAEE_WriteByte@bAdd
  5473  0E2B                     l3051:
  5474  0E2B                     l3053:
  5475                           
  5476                           ;mcc_generated_files/memory.c: 191:     EEADRL = (uint8_t)(bAdd & 0x0ff);
  5477  0E2B  0872               	movf	DATAEE_WriteByte@bAdd,w
  5478  0E2C  0023               	movlb	3	; select bank3
  5479  0E2D  0091               	movwf	17	;volatile
  5480  0E2E                     l3055:
  5481                           
  5482                           ;mcc_generated_files/memory.c: 192:     EEDATL = bData;
  5483  0E2E  0871               	movf	DATAEE_WriteByte@bData,w
  5484  0E2F  0093               	movwf	19	;volatile
  5485  0E30                     l3057:
  5486                           
  5487                           ;mcc_generated_files/memory.c: 193:     EECON1bits.EEPGD = 0;
  5488  0E30  1395               	bcf	21,7	;volsfr
  5489  0E31                     l3059:
  5490                           
  5491                           ;mcc_generated_files/memory.c: 194:     EECON1bits.CFGS = 0;
  5492  0E31  1315               	bcf	21,6	;volsfr
  5493  0E32                     l3061:
  5494                           
  5495                           ;mcc_generated_files/memory.c: 195:     EECON1bits.WREN = 1;
  5496  0E32  1515               	bsf	21,2	;volsfr
  5497  0E33                     l3063:
  5498                           
  5499                           ;mcc_generated_files/memory.c: 197:     GIEBitValue = INTCONbits.GIE;
  5500  0E33  3000               	movlw	0
  5501  0E34  1B8B               	btfsc	11,7	;volatile
  5502  0E35  3001               	movlw	1
  5503  0E36  00F3               	movwf	DATAEE_WriteByte@GIEBitValue
  5504  0E37                     l3065:
  5505                           
  5506                           ;mcc_generated_files/memory.c: 198:     INTCONbits.GIE = 0;
  5507  0E37  138B               	bcf	11,7	;volatile
  5508                           
  5509                           ;mcc_generated_files/memory.c: 199:     EECON2 = 0x55;
  5510  0E38  3055               	movlw	85
  5511  0E39  0096               	movwf	22	;volsfr
  5512                           
  5513                           ;mcc_generated_files/memory.c: 200:     EECON2 = 0xAA;
  5514  0E3A  30AA               	movlw	170
  5515  0E3B  0096               	movwf	22	;volsfr
  5516  0E3C                     l3067:
  5517                           
  5518                           ;mcc_generated_files/memory.c: 201:     EECON1bits.WR = 1;
  5519  0E3C  1495               	bsf	21,1	;volsfr
  5520  0E3D                     l78:	
  5521                           ;mcc_generated_files/memory.c: 204:     {;mcc_generated_files/memory.c: 205:     }
  5522                           
  5523                           
  5524                           ;mcc_generated_files/memory.c: 203:     while (EECON1bits.WR)
  5525  0E3D  1895               	btfsc	21,1	;volsfr
  5526  0E3E  2E40               	goto	u1301
  5527  0E3F  2E41               	goto	u1300
  5528  0E40                     u1301:
  5529  0E40  2E3D               	goto	l78
  5530  0E41                     u1300:
  5531  0E41                     l80:
  5532                           
  5533                           ;mcc_generated_files/memory.c: 207:     EECON1bits.WREN = 0;
  5534  0E41  1115               	bcf	21,2	;volsfr
  5535  0E42                     l3069:
  5536                           
  5537                           ;mcc_generated_files/memory.c: 208:     INTCONbits.GIE = GIEBitValue;
  5538  0E42  0C73               	rrf	DATAEE_WriteByte@GIEBitValue,w
  5539  0E43  1C03               	skipc
  5540  0E44  138B               	bcf	11,7	;volatile
  5541  0E45  1803               	skipnc
  5542  0E46  178B               	bsf	11,7	;volatile
  5543  0E47                     l81:
  5544  0E47  0008               	return
  5545  0E48                     __end_of_DATAEE_WriteByte:
  5546                           
  5547                           	psect	text13
  5548  0D5C                     __ptext13:	
  5549 ;; *************** function _read_hall_codes *****************
  5550 ;; Defined at:
  5551 ;;		line 574 in file "main.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;		None
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, pclath, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5565 ;;      Params:         0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0
  5567 ;;      Temps:          1       0       0       0       0       0
  5568 ;;      Totals:         1       0       0       0       0       0
  5569 ;;Total ram usage:        1 bytes
  5570 ;; Hardware stack levels used: 1
  5571 ;; Hardware stack levels required when called: 5
  5572 ;; This function calls:
  5573 ;;		_DATAEE_ReadByte
  5574 ;; This function is called by:
  5575 ;;		_main
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _read_hall_codes
  5581  0D5C                     _read_hall_codes:
  5582  0D5C                     l3247:	
  5583                           ;incstack = 0
  5584                           ; Regs used in _read_hall_codes: [wreg+pclath+cstack]
  5585                           
  5586                           
  5587                           ;main.c: 575:     hall_codes[0] = (uint8_t) DATAEE_ReadByte(0);
  5588  0D5C  3000               	movlw	0
  5589  0D5D  318D  2537  318D   	fcall	_DATAEE_ReadByte
  5590  0D60  00F2               	movwf	??_read_hall_codes
  5591  0D61  0872               	movf	??_read_hall_codes,w
  5592  0D62  0020               	movlb	0	; select bank0
  5593  0D63  00EE               	movwf	_hall_codes
  5594                           
  5595                           ;main.c: 576:     hall_codes[1] = (uint8_t) DATAEE_ReadByte(1);
  5596  0D64  3001               	movlw	1
  5597  0D65  318D  2537  318D   	fcall	_DATAEE_ReadByte
  5598  0D68  00F2               	movwf	??_read_hall_codes
  5599  0D69  0872               	movf	??_read_hall_codes,w
  5600  0D6A  0020               	movlb	0	; select bank0
  5601  0D6B  00EF               	movwf	_hall_codes+1
  5602  0D6C                     l675:
  5603  0D6C  0008               	return
  5604  0D6D                     __end_of_read_hall_codes:
  5605                           
  5606                           	psect	text14
  5607  05E0                     __ptext14:	
  5608 ;; *************** function _door_status_changed *****************
  5609 ;; Defined at:
  5610 ;;		line 616 in file "main.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  open_or_clos    1    wreg     _Bool 
  5613 ;;  val             2    4[BANK0 ] short 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  open_or_clos    1   10[BANK0 ] _Bool 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      _Bool 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, pclath, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5625 ;;      Params:         0       2       0       0       0       0
  5626 ;;      Locals:         0       1       0       0       0       0
  5627 ;;      Temps:          0       4       0       0       0       0
  5628 ;;      Totals:         0       7       0       0       0       0
  5629 ;;Total ram usage:        7 bytes
  5630 ;; Hardware stack levels used: 1
  5631 ;; Hardware stack levels required when called: 5
  5632 ;; This function calls:
  5633 ;;		___awdiv
  5634 ;;		___wmul
  5635 ;; This function is called by:
  5636 ;;		_main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _door_status_changed
  5642  05E0                     _door_status_changed:
  5643                           
  5644                           ;incstack = 0
  5645                           ; Regs used in _door_status_changed: [wreg+status,2+status,0+pclath+cstack]
  5646                           ;door_status_changed@open_or_close stored from wreg
  5647  05E0  0020               	movlb	0	; select bank0
  5648  05E1  00E3               	movwf	door_status_changed@open_or_close
  5649  05E2                     l4367:
  5650                           
  5651                           ;main.c: 617:     if(open_or_close) {
  5652  05E2  0863               	movf	door_status_changed@open_or_close,w
  5653  05E3  1903               	btfsc	3,2
  5654  05E4  2DE6               	goto	u2561
  5655  05E5  2DE7               	goto	u2560
  5656  05E6                     u2561:
  5657  05E6  2E54               	goto	l4381
  5658  05E7                     u2560:
  5659  05E7                     l4369:
  5660                           
  5661                           ;main.c: 618:         if((hall_codes[0] > hall_codes[1] && val >= hall_codes[1] + ((hall
      +                          _codes[0] - hall_codes[1]) * 9 / 10)) || (hall_codes[0] < hall_codes[1] && val <= hall_c
      +                          odes[1] - ((hall_codes[1] - hall_codes[0]) * 9 / 10))) return 1;
  5662  05E7  086E               	movf	_hall_codes,w
  5663  05E8  026F               	subwf	_hall_codes+1,w
  5664  05E9  1803               	skipnc
  5665  05EA  2DEC               	goto	u2571
  5666  05EB  2DED               	goto	u2570
  5667  05EC                     u2571:
  5668  05EC  2E1B               	goto	l4373
  5669  05ED                     u2570:
  5670  05ED                     l4371:
  5671  05ED  300A               	movlw	10
  5672  05EE  00F7               	movwf	___awdiv@divisor
  5673  05EF  3000               	movlw	0
  5674  05F0  00F8               	movwf	___awdiv@divisor+1
  5675  05F1  086F               	movf	_hall_codes+1,w
  5676  05F2  026E               	subwf	_hall_codes,w
  5677  05F3  00F1               	movwf	___wmul@multiplier
  5678  05F4  01F2               	clrf	___wmul@multiplier+1
  5679  05F5  1C03               	skipc
  5680  05F6  03F2               	decf	___wmul@multiplier+1,f
  5681  05F7  3009               	movlw	9
  5682  05F8  00F3               	movwf	___wmul@multiplicand
  5683  05F9  3000               	movlw	0
  5684  05FA  00F4               	movwf	___wmul@multiplicand+1
  5685  05FB  318E  2648  3185   	fcall	___wmul
  5686  05FE  0872               	movf	?___wmul+1,w
  5687  05FF  00FA               	movwf	___awdiv@dividend+1
  5688  0600  0871               	movf	?___wmul,w
  5689  0601  00F9               	movwf	___awdiv@dividend
  5690  0602  3186  26C2  3185   	fcall	___awdiv
  5691  0605  0020               	movlb	0	; select bank0
  5692  0606  086F               	movf	_hall_codes+1,w
  5693  0607  0777               	addwf	?___awdiv,w
  5694  0608  00DF               	movwf	??_door_status_changed
  5695  0609  0878               	movf	?___awdiv+1,w
  5696  060A  1803               	skipnc
  5697  060B  0A78               	incf	?___awdiv+1,w
  5698  060C  00E0               	movwf	??_door_status_changed+1
  5699  060D  085E               	movf	door_status_changed@val+1,w
  5700  060E  3A80               	xorlw	128
  5701  060F  00E1               	movwf	??_door_status_changed+2
  5702  0610  0860               	movf	??_door_status_changed+1,w
  5703  0611  3A80               	xorlw	128
  5704  0612  0261               	subwf	??_door_status_changed+2,w
  5705  0613  1D03               	skipz
  5706  0614  2E17               	goto	u2585
  5707  0615  085F               	movf	??_door_status_changed,w
  5708  0616  025D               	subwf	door_status_changed@val,w
  5709  0617                     u2585:
  5710  0617  1803               	skipnc
  5711  0618  2E1A               	goto	u2581
  5712  0619  2E1B               	goto	u2580
  5713  061A                     u2581:
  5714  061A  2E52               	goto	l4377
  5715  061B                     u2580:
  5716  061B                     l4373:
  5717  061B  0020               	movlb	0	; select bank0
  5718  061C  086F               	movf	_hall_codes+1,w
  5719  061D  026E               	subwf	_hall_codes,w
  5720  061E  1803               	skipnc
  5721  061F  2E21               	goto	u2591
  5722  0620  2E22               	goto	u2590
  5723  0621                     u2591:
  5724  0621  2EC0               	goto	l4393
  5725  0622                     u2590:
  5726  0622                     l4375:
  5727  0622  300A               	movlw	10
  5728  0623  00F7               	movwf	___awdiv@divisor
  5729  0624  3000               	movlw	0
  5730  0625  00F8               	movwf	___awdiv@divisor+1
  5731  0626  086E               	movf	_hall_codes,w
  5732  0627  026F               	subwf	_hall_codes+1,w
  5733  0628  00F1               	movwf	___wmul@multiplier
  5734  0629  01F2               	clrf	___wmul@multiplier+1
  5735  062A  1C03               	skipc
  5736  062B  03F2               	decf	___wmul@multiplier+1,f
  5737  062C  3009               	movlw	9
  5738  062D  00F3               	movwf	___wmul@multiplicand
  5739  062E  3000               	movlw	0
  5740  062F  00F4               	movwf	___wmul@multiplicand+1
  5741  0630  318E  2648  3185   	fcall	___wmul
  5742  0633  0872               	movf	?___wmul+1,w
  5743  0634  00FA               	movwf	___awdiv@dividend+1
  5744  0635  0871               	movf	?___wmul,w
  5745  0636  00F9               	movwf	___awdiv@dividend
  5746  0637  3186  26C2  3185   	fcall	___awdiv
  5747  063A  0020               	movlb	0	; select bank0
  5748  063B  086F               	movf	_hall_codes+1,w
  5749  063C  00DF               	movwf	??_door_status_changed
  5750  063D  0877               	movf	?___awdiv,w
  5751  063E  025F               	subwf	??_door_status_changed,w
  5752  063F  00E0               	movwf	??_door_status_changed+1
  5753  0640  0978               	comf	?___awdiv+1,w
  5754  0641  1803               	skipnc
  5755  0642  0A89               	incf	9,f
  5756  0643  00E1               	movwf	??_door_status_changed+2
  5757  0644  0861               	movf	??_door_status_changed+2,w
  5758  0645  3A80               	xorlw	128
  5759  0646  00E2               	movwf	??_door_status_changed+3
  5760  0647  085E               	movf	door_status_changed@val+1,w
  5761  0648  3A80               	xorlw	128
  5762  0649  0262               	subwf	??_door_status_changed+3,w
  5763  064A  1D03               	skipz
  5764  064B  2E4E               	goto	u2605
  5765  064C  085D               	movf	door_status_changed@val,w
  5766  064D  0260               	subwf	??_door_status_changed+1,w
  5767  064E                     u2605:
  5768  064E  1C03               	skipc
  5769  064F  2E51               	goto	u2601
  5770  0650  2E52               	goto	u2600
  5771  0651                     u2601:
  5772  0651  2EC0               	goto	l4393
  5773  0652                     u2600:
  5774  0652                     l4377:
  5775  0652  3001               	movlw	1
  5776  0653  2EC1               	goto	l705
  5777  0654                     l4381:
  5778                           
  5779                           ;main.c: 620:         if((hall_codes[1] > hall_codes[0] && val >= hall_codes[0] + ((hall
      +                          _codes[1] - hall_codes[0]) * 9 / 10)) || (hall_codes[1] < hall_codes[0] && val <= hall_c
      +                          odes[0] - ((hall_codes[0] - hall_codes[1]) * 9 / 10))) return 1;
  5780  0654  086F               	movf	_hall_codes+1,w
  5781  0655  026E               	subwf	_hall_codes,w
  5782  0656  1803               	skipnc
  5783  0657  2E59               	goto	u2611
  5784  0658  2E5A               	goto	u2610
  5785  0659                     u2611:
  5786  0659  2E88               	goto	l4385
  5787  065A                     u2610:
  5788  065A                     l4383:
  5789  065A  300A               	movlw	10
  5790  065B  00F7               	movwf	___awdiv@divisor
  5791  065C  3000               	movlw	0
  5792  065D  00F8               	movwf	___awdiv@divisor+1
  5793  065E  086E               	movf	_hall_codes,w
  5794  065F  026F               	subwf	_hall_codes+1,w
  5795  0660  00F1               	movwf	___wmul@multiplier
  5796  0661  01F2               	clrf	___wmul@multiplier+1
  5797  0662  1C03               	skipc
  5798  0663  03F2               	decf	___wmul@multiplier+1,f
  5799  0664  3009               	movlw	9
  5800  0665  00F3               	movwf	___wmul@multiplicand
  5801  0666  3000               	movlw	0
  5802  0667  00F4               	movwf	___wmul@multiplicand+1
  5803  0668  318E  2648  3185   	fcall	___wmul
  5804  066B  0872               	movf	?___wmul+1,w
  5805  066C  00FA               	movwf	___awdiv@dividend+1
  5806  066D  0871               	movf	?___wmul,w
  5807  066E  00F9               	movwf	___awdiv@dividend
  5808  066F  3186  26C2  3185   	fcall	___awdiv
  5809  0672  0020               	movlb	0	; select bank0
  5810  0673  086E               	movf	_hall_codes,w
  5811  0674  0777               	addwf	?___awdiv,w
  5812  0675  00DF               	movwf	??_door_status_changed
  5813  0676  0878               	movf	?___awdiv+1,w
  5814  0677  1803               	skipnc
  5815  0678  0A78               	incf	?___awdiv+1,w
  5816  0679  00E0               	movwf	??_door_status_changed+1
  5817  067A  085E               	movf	door_status_changed@val+1,w
  5818  067B  3A80               	xorlw	128
  5819  067C  00E1               	movwf	??_door_status_changed+2
  5820  067D  0860               	movf	??_door_status_changed+1,w
  5821  067E  3A80               	xorlw	128
  5822  067F  0261               	subwf	??_door_status_changed+2,w
  5823  0680  1D03               	skipz
  5824  0681  2E84               	goto	u2625
  5825  0682  085F               	movf	??_door_status_changed,w
  5826  0683  025D               	subwf	door_status_changed@val,w
  5827  0684                     u2625:
  5828  0684  1803               	skipnc
  5829  0685  2E87               	goto	u2621
  5830  0686  2E88               	goto	u2620
  5831  0687                     u2621:
  5832  0687  2E52               	goto	l4377
  5833  0688                     u2620:
  5834  0688                     l4385:
  5835  0688  0020               	movlb	0	; select bank0
  5836  0689  086E               	movf	_hall_codes,w
  5837  068A  026F               	subwf	_hall_codes+1,w
  5838  068B  1803               	skipnc
  5839  068C  2E8E               	goto	u2631
  5840  068D  2E8F               	goto	u2630
  5841  068E                     u2631:
  5842  068E  2EC0               	goto	l4393
  5843  068F                     u2630:
  5844  068F                     l4387:
  5845  068F  300A               	movlw	10
  5846  0690  00F7               	movwf	___awdiv@divisor
  5847  0691  3000               	movlw	0
  5848  0692  00F8               	movwf	___awdiv@divisor+1
  5849  0693  086F               	movf	_hall_codes+1,w
  5850  0694  026E               	subwf	_hall_codes,w
  5851  0695  00F1               	movwf	___wmul@multiplier
  5852  0696  01F2               	clrf	___wmul@multiplier+1
  5853  0697  1C03               	skipc
  5854  0698  03F2               	decf	___wmul@multiplier+1,f
  5855  0699  3009               	movlw	9
  5856  069A  00F3               	movwf	___wmul@multiplicand
  5857  069B  3000               	movlw	0
  5858  069C  00F4               	movwf	___wmul@multiplicand+1
  5859  069D  318E  2648  3185   	fcall	___wmul
  5860  06A0  0872               	movf	?___wmul+1,w
  5861  06A1  00FA               	movwf	___awdiv@dividend+1
  5862  06A2  0871               	movf	?___wmul,w
  5863  06A3  00F9               	movwf	___awdiv@dividend
  5864  06A4  3186  26C2  3185   	fcall	___awdiv
  5865  06A7  0020               	movlb	0	; select bank0
  5866  06A8  086E               	movf	_hall_codes,w
  5867  06A9  00DF               	movwf	??_door_status_changed
  5868  06AA  0877               	movf	?___awdiv,w
  5869  06AB  025F               	subwf	??_door_status_changed,w
  5870  06AC  00E0               	movwf	??_door_status_changed+1
  5871  06AD  0978               	comf	?___awdiv+1,w
  5872  06AE  1803               	skipnc
  5873  06AF  0A89               	incf	9,f
  5874  06B0  00E1               	movwf	??_door_status_changed+2
  5875  06B1  0861               	movf	??_door_status_changed+2,w
  5876  06B2  3A80               	xorlw	128
  5877  06B3  00E2               	movwf	??_door_status_changed+3
  5878  06B4  085E               	movf	door_status_changed@val+1,w
  5879  06B5  3A80               	xorlw	128
  5880  06B6  0262               	subwf	??_door_status_changed+3,w
  5881  06B7  1D03               	skipz
  5882  06B8  2EBB               	goto	u2645
  5883  06B9  085D               	movf	door_status_changed@val,w
  5884  06BA  0260               	subwf	??_door_status_changed+1,w
  5885  06BB                     u2645:
  5886  06BB  1C03               	skipc
  5887  06BC  2EBE               	goto	u2641
  5888  06BD  2EBF               	goto	u2640
  5889  06BE                     u2641:
  5890  06BE  2EC0               	goto	l4393
  5891  06BF                     u2640:
  5892  06BF  2E52               	goto	l4377
  5893  06C0                     l4393:
  5894                           
  5895                           ;main.c: 622:     return 0;
  5896  06C0  3000               	movlw	0
  5897  06C1                     l705:
  5898  06C1  0008               	return
  5899  06C2                     __end_of_door_status_changed:
  5900                           
  5901                           	psect	text15
  5902  0E48                     __ptext15:	
  5903 ;; *************** function ___wmul *****************
  5904 ;; Defined at:
  5905 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  multiplier      2    1[COMMON] unsigned int 
  5908 ;;  multiplicand    2    3[COMMON] unsigned int 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  product         2    5[COMMON] unsigned int 
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  2    1[COMMON] unsigned int 
  5913 ;; Registers used:
  5914 ;;		wreg, status,2, status,0
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5920 ;;      Params:         4       0       0       0       0       0
  5921 ;;      Locals:         2       0       0       0       0       0
  5922 ;;      Temps:          0       0       0       0       0       0
  5923 ;;      Totals:         6       0       0       0       0       0
  5924 ;;Total ram usage:        6 bytes
  5925 ;; Hardware stack levels used: 1
  5926 ;; Hardware stack levels required when called: 4
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_door_status_changed
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           
  5935                           ;psect for function ___wmul
  5936  0E48                     ___wmul:
  5937  0E48                     l4285:	
  5938                           ;incstack = 0
  5939                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5940                           
  5941  0E48  01F5               	clrf	___wmul@product
  5942  0E49  01F6               	clrf	___wmul@product+1
  5943  0E4A                     l4287:
  5944  0E4A  1C71               	btfss	___wmul@multiplier,0
  5945  0E4B  2E4D               	goto	u2421
  5946  0E4C  2E4E               	goto	u2420
  5947  0E4D                     u2421:
  5948  0E4D  2E52               	goto	l861
  5949  0E4E                     u2420:
  5950  0E4E                     l4289:
  5951  0E4E  0873               	movf	___wmul@multiplicand,w
  5952  0E4F  07F5               	addwf	___wmul@product,f
  5953  0E50  0874               	movf	___wmul@multiplicand+1,w
  5954  0E51  3DF6               	addwfc	___wmul@product+1,f
  5955  0E52                     l861:
  5956  0E52  3001               	movlw	1
  5957  0E53                     u2435:
  5958  0E53  35F3               	lslf	___wmul@multiplicand,f
  5959  0E54  0DF4               	rlf	___wmul@multiplicand+1,f
  5960  0E55  0B89               	decfsz	9,f
  5961  0E56  2E53               	goto	u2435
  5962  0E57                     l4291:
  5963  0E57  3001               	movlw	1
  5964  0E58                     u2445:
  5965  0E58  36F2               	lsrf	___wmul@multiplier+1,f
  5966  0E59  0CF1               	rrf	___wmul@multiplier,f
  5967  0E5A  0B89               	decfsz	9,f
  5968  0E5B  2E58               	goto	u2445
  5969  0E5C                     l4293:
  5970  0E5C  0871               	movf	___wmul@multiplier,w
  5971  0E5D  0472               	iorwf	___wmul@multiplier+1,w
  5972  0E5E  1D03               	btfss	3,2
  5973  0E5F  2E61               	goto	u2451
  5974  0E60  2E62               	goto	u2450
  5975  0E61                     u2451:
  5976  0E61  2E4A               	goto	l4287
  5977  0E62                     u2450:
  5978  0E62                     l4295:
  5979  0E62  0876               	movf	___wmul@product+1,w
  5980  0E63  00F2               	movwf	?___wmul+1
  5981  0E64  0875               	movf	___wmul@product,w
  5982  0E65  00F1               	movwf	?___wmul
  5983  0E66                     l863:
  5984  0E66  0008               	return
  5985  0E67                     __end_of___wmul:
  5986                           
  5987                           	psect	text16
  5988  06C2                     __ptext16:	
  5989 ;; *************** function ___awdiv *****************
  5990 ;; Defined at:
  5991 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  divisor         2    7[COMMON] int 
  5994 ;;  dividend        2    9[COMMON] int 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  quotient        2    2[BANK0 ] int 
  5997 ;;  sign            1    1[BANK0 ] unsigned char 
  5998 ;;  counter         1    0[BANK0 ] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  2    7[COMMON] int 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6008 ;;      Params:         4       0       0       0       0       0
  6009 ;;      Locals:         0       4       0       0       0       0
  6010 ;;      Temps:          1       0       0       0       0       0
  6011 ;;      Totals:         5       4       0       0       0       0
  6012 ;;Total ram usage:        9 bytes
  6013 ;; Hardware stack levels used: 1
  6014 ;; Hardware stack levels required when called: 4
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_door_status_changed
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function ___awdiv
  6024  06C2                     ___awdiv:
  6025  06C2                     l4299:	
  6026                           ;incstack = 0
  6027                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6028                           
  6029  06C2  0020               	movlb	0	; select bank0
  6030  06C3  01DA               	clrf	___awdiv@sign
  6031  06C4                     l4301:
  6032  06C4  1FF8               	btfss	___awdiv@divisor+1,7
  6033  06C5  2EC7               	goto	u2461
  6034  06C6  2EC8               	goto	u2460
  6035  06C7                     u2461:
  6036  06C7  2ECF               	goto	l4307
  6037  06C8                     u2460:
  6038  06C8                     l4303:
  6039  06C8  09F7               	comf	___awdiv@divisor,f
  6040  06C9  09F8               	comf	___awdiv@divisor+1,f
  6041  06CA  0AF7               	incf	___awdiv@divisor,f
  6042  06CB  1903               	skipnz
  6043  06CC  0AF8               	incf	___awdiv@divisor+1,f
  6044  06CD                     l4305:
  6045  06CD  01DA               	clrf	___awdiv@sign
  6046  06CE  0ADA               	incf	___awdiv@sign,f
  6047  06CF                     l4307:
  6048  06CF  1FFA               	btfss	___awdiv@dividend+1,7
  6049  06D0  2ED2               	goto	u2471
  6050  06D1  2ED3               	goto	u2470
  6051  06D2                     u2471:
  6052  06D2  2EDC               	goto	l4313
  6053  06D3                     u2470:
  6054  06D3                     l4309:
  6055  06D3  09F9               	comf	___awdiv@dividend,f
  6056  06D4  09FA               	comf	___awdiv@dividend+1,f
  6057  06D5  0AF9               	incf	___awdiv@dividend,f
  6058  06D6  1903               	skipnz
  6059  06D7  0AFA               	incf	___awdiv@dividend+1,f
  6060  06D8                     l4311:
  6061  06D8  3001               	movlw	1
  6062  06D9  00FB               	movwf	??___awdiv
  6063  06DA  087B               	movf	??___awdiv,w
  6064  06DB  06DA               	xorwf	___awdiv@sign,f
  6065  06DC                     l4313:
  6066  06DC  01DB               	clrf	___awdiv@quotient
  6067  06DD  01DC               	clrf	___awdiv@quotient+1
  6068  06DE                     l4315:
  6069  06DE  0877               	movf	___awdiv@divisor,w
  6070  06DF  0478               	iorwf	___awdiv@divisor+1,w
  6071  06E0  1903               	btfsc	3,2
  6072  06E1  2EE3               	goto	u2481
  6073  06E2  2EE4               	goto	u2480
  6074  06E3                     u2481:
  6075  06E3  2F13               	goto	l4335
  6076  06E4                     u2480:
  6077  06E4                     l4317:
  6078  06E4  01D9               	clrf	___awdiv@counter
  6079  06E5  0AD9               	incf	___awdiv@counter,f
  6080  06E6  2EF0               	goto	l4323
  6081  06E7                     l4319:
  6082  06E7  3001               	movlw	1
  6083  06E8                     u2495:
  6084  06E8  35F7               	lslf	___awdiv@divisor,f
  6085  06E9  0DF8               	rlf	___awdiv@divisor+1,f
  6086  06EA  0B89               	decfsz	9,f
  6087  06EB  2EE8               	goto	u2495
  6088  06EC                     l4321:
  6089  06EC  3001               	movlw	1
  6090  06ED  00FB               	movwf	??___awdiv
  6091  06EE  087B               	movf	??___awdiv,w
  6092  06EF  07D9               	addwf	___awdiv@counter,f
  6093  06F0                     l4323:
  6094  06F0  1FF8               	btfss	___awdiv@divisor+1,7
  6095  06F1  2EF3               	goto	u2501
  6096  06F2  2EF4               	goto	u2500
  6097  06F3                     u2501:
  6098  06F3  2EE7               	goto	l4319
  6099  06F4                     u2500:
  6100  06F4                     l4325:
  6101  06F4  3001               	movlw	1
  6102  06F5                     u2515:
  6103  06F5  35DB               	lslf	___awdiv@quotient,f
  6104  06F6  0DDC               	rlf	___awdiv@quotient+1,f
  6105  06F7  0B89               	decfsz	9,f
  6106  06F8  2EF5               	goto	u2515
  6107  06F9  0878               	movf	___awdiv@divisor+1,w
  6108  06FA  027A               	subwf	___awdiv@dividend+1,w
  6109  06FB  1D03               	skipz
  6110  06FC  2EFF               	goto	u2525
  6111  06FD  0877               	movf	___awdiv@divisor,w
  6112  06FE  0279               	subwf	___awdiv@dividend,w
  6113  06FF                     u2525:
  6114  06FF  1C03               	skipc
  6115  0700  2F02               	goto	u2521
  6116  0701  2F03               	goto	u2520
  6117  0702                     u2521:
  6118  0702  2F08               	goto	l4331
  6119  0703                     u2520:
  6120  0703                     l4327:
  6121  0703  0877               	movf	___awdiv@divisor,w
  6122  0704  02F9               	subwf	___awdiv@dividend,f
  6123  0705  0878               	movf	___awdiv@divisor+1,w
  6124  0706  3BFA               	subwfb	___awdiv@dividend+1,f
  6125  0707                     l4329:
  6126  0707  145B               	bsf	___awdiv@quotient,0
  6127  0708                     l4331:
  6128  0708  3001               	movlw	1
  6129  0709                     u2535:
  6130  0709  36F8               	lsrf	___awdiv@divisor+1,f
  6131  070A  0CF7               	rrf	___awdiv@divisor,f
  6132  070B  0B89               	decfsz	9,f
  6133  070C  2F09               	goto	u2535
  6134  070D                     l4333:
  6135  070D  3001               	movlw	1
  6136  070E  02D9               	subwf	___awdiv@counter,f
  6137  070F  1D03               	btfss	3,2
  6138  0710  2F12               	goto	u2541
  6139  0711  2F13               	goto	u2540
  6140  0712                     u2541:
  6141  0712  2EF4               	goto	l4325
  6142  0713                     u2540:
  6143  0713                     l4335:
  6144  0713  085A               	movf	___awdiv@sign,w
  6145  0714  1903               	btfsc	3,2
  6146  0715  2F17               	goto	u2551
  6147  0716  2F18               	goto	u2550
  6148  0717                     u2551:
  6149  0717  2F1D               	goto	l4339
  6150  0718                     u2550:
  6151  0718                     l4337:
  6152  0718  09DB               	comf	___awdiv@quotient,f
  6153  0719  09DC               	comf	___awdiv@quotient+1,f
  6154  071A  0ADB               	incf	___awdiv@quotient,f
  6155  071B  1903               	skipnz
  6156  071C  0ADC               	incf	___awdiv@quotient+1,f
  6157  071D                     l4339:
  6158  071D  085C               	movf	___awdiv@quotient+1,w
  6159  071E  00F8               	movwf	?___awdiv+1
  6160  071F  085B               	movf	___awdiv@quotient,w
  6161  0720  00F7               	movwf	?___awdiv
  6162  0721                     l1014:
  6163  0721  0008               	return
  6164  0722                     __end_of___awdiv:
  6165                           
  6166                           	psect	text17
  6167  07AD                     __ptext17:	
  6168 ;; *************** function _compare_pw *****************
  6169 ;; Defined at:
  6170 ;;		line 551 in file "main.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  pw              2    2[COMMON] PTR unsigned char 
  6173 ;;		 -> data_storage(129), 
  6174 ;;  len             1    4[COMMON] unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  indata          1    6[COMMON] unsigned char 
  6177 ;;  x               2    9[COMMON] int 
  6178 ;;  eedata          1    8[COMMON] unsigned char 
  6179 ;;  res             1    7[COMMON] _Bool 
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      _Bool 
  6182 ;; Registers used:
  6183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6189 ;;      Params:         3       0       0       0       0       0
  6190 ;;      Locals:         5       0       0       0       0       0
  6191 ;;      Temps:          1       0       0       0       0       0
  6192 ;;      Totals:         9       0       0       0       0       0
  6193 ;;Total ram usage:        9 bytes
  6194 ;; Hardware stack levels used: 1
  6195 ;; Hardware stack levels required when called: 5
  6196 ;; This function calls:
  6197 ;;		_DATAEE_ReadByte
  6198 ;; This function is called by:
  6199 ;;		_main
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _compare_pw
  6205  07AD                     _compare_pw:
  6206  07AD                     l3329:	
  6207                           ;incstack = 0
  6208                           ; Regs used in _compare_pw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6209                           
  6210                           
  6211                           ;main.c: 552:     _Bool res = 1;
  6212  07AD  01F7               	clrf	compare_pw@res
  6213  07AE  0AF7               	incf	compare_pw@res,f
  6214  07AF                     l3331:
  6215                           
  6216                           ;main.c: 553:     uint8_t eedata = DATAEE_ReadByte(4);
  6217  07AF  3004               	movlw	4
  6218  07B0  318D  2537  3187   	fcall	_DATAEE_ReadByte
  6219  07B3  00F5               	movwf	??_compare_pw
  6220  07B4  0875               	movf	??_compare_pw,w
  6221  07B5  00F8               	movwf	compare_pw@eedata
  6222  07B6                     l3333:
  6223                           
  6224                           ;main.c: 554:     if (eedata != len) {
  6225  07B6  0878               	movf	compare_pw@eedata,w
  6226  07B7  0674               	xorwf	compare_pw@len,w
  6227  07B8  1903               	skipnz
  6228  07B9  2FBB               	goto	u1621
  6229  07BA  2FBC               	goto	u1620
  6230  07BB                     u1621:
  6231  07BB  2FBE               	goto	l3337
  6232  07BC                     u1620:
  6233  07BC                     l3335:
  6234                           
  6235                           ;main.c: 555:         res = 0;
  6236  07BC  01F7               	clrf	compare_pw@res
  6237                           
  6238                           ;main.c: 556:     } else {
  6239  07BD  2FEB               	goto	l3349
  6240  07BE                     l3337:
  6241                           
  6242                           ;main.c: 557:         for (int x = 0; x < len; x++) {
  6243  07BE  01F9               	clrf	compare_pw@x
  6244  07BF  01FA               	clrf	compare_pw@x+1
  6245  07C0  2FDE               	goto	l660
  6246  07C1                     l3339:
  6247                           
  6248                           ;main.c: 558:             eedata = DATAEE_ReadByte(x + 4 + 1);
  6249  07C1  0879               	movf	compare_pw@x,w
  6250  07C2  3E05               	addlw	5
  6251  07C3  318D  2537  3187   	fcall	_DATAEE_ReadByte
  6252  07C6  00F5               	movwf	??_compare_pw
  6253  07C7  0875               	movf	??_compare_pw,w
  6254  07C8  00F8               	movwf	compare_pw@eedata
  6255  07C9                     l3341:
  6256                           
  6257                           ;main.c: 559:             uint8_t indata = *(pw + x);
  6258  07C9  0879               	movf	compare_pw@x,w
  6259  07CA  0772               	addwf	compare_pw@pw,w
  6260  07CB  0086               	movwf	6
  6261  07CC  087A               	movf	compare_pw@x+1,w
  6262  07CD  3D73               	addwfc	compare_pw@pw+1,w
  6263  07CE  0087               	movwf	7
  6264  07CF  0801               	movf	1,w
  6265  07D0  00F5               	movwf	??_compare_pw
  6266  07D1  0875               	movf	??_compare_pw,w
  6267  07D2  00F6               	movwf	compare_pw@indata
  6268  07D3                     l3343:
  6269                           
  6270                           ;main.c: 560:             if (eedata != indata) {
  6271  07D3  0878               	movf	compare_pw@eedata,w
  6272  07D4  0676               	xorwf	compare_pw@indata,w
  6273  07D5  1903               	skipnz
  6274  07D6  2FD8               	goto	u1631
  6275  07D7  2FD9               	goto	u1630
  6276  07D8                     u1631:
  6277  07D8  2FDA               	goto	l3347
  6278  07D9                     u1630:
  6279  07D9  2FBC               	goto	l3335
  6280  07DA                     l3347:
  6281                           
  6282                           ;main.c: 564:         }
  6283  07DA  3001               	movlw	1
  6284  07DB  07F9               	addwf	compare_pw@x,f
  6285  07DC  3000               	movlw	0
  6286  07DD  3DFA               	addwfc	compare_pw@x+1,f
  6287  07DE                     l660:
  6288  07DE  087A               	movf	compare_pw@x+1,w
  6289  07DF  3A80               	xorlw	128
  6290  07E0  00F5               	movwf	??_compare_pw
  6291  07E1  3080               	movlw	128
  6292  07E2  0275               	subwf	??_compare_pw,w
  6293  07E3  1D03               	skipz
  6294  07E4  2FE7               	goto	u1645
  6295  07E5  0874               	movf	compare_pw@len,w
  6296  07E6  0279               	subwf	compare_pw@x,w
  6297  07E7                     u1645:
  6298  07E7  1C03               	skipc
  6299  07E8  2FEA               	goto	u1641
  6300  07E9  2FEB               	goto	u1640
  6301  07EA                     u1641:
  6302  07EA  2FC1               	goto	l3339
  6303  07EB                     u1640:
  6304  07EB                     l3349:
  6305                           
  6306                           ;main.c: 566:     return res;
  6307  07EB  0877               	movf	compare_pw@res,w
  6308  07EC                     l664:
  6309  07EC  0008               	return
  6310  07ED                     __end_of_compare_pw:
  6311                           
  6312                           	psect	text18
  6313  0D37                     __ptext18:	
  6314 ;; *************** function _DATAEE_ReadByte *****************
  6315 ;; Defined at:
  6316 ;;		line 211 in file "mcc_generated_files/memory.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  bAdd            1    wreg     unsigned char 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  bAdd            1    1[COMMON] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      unsigned char 
  6323 ;; Registers used:
  6324 ;;		wreg
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6330 ;;      Params:         0       0       0       0       0       0
  6331 ;;      Locals:         1       0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0
  6333 ;;      Totals:         1       0       0       0       0       0
  6334 ;;Total ram usage:        1 bytes
  6335 ;; Hardware stack levels used: 1
  6336 ;; Hardware stack levels required when called: 4
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_compare_pw
  6341 ;;		_save_pw
  6342 ;;		_read_hall_codes
  6343 ;;		_save_hall_codes
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _DATAEE_ReadByte
  6349  0D37                     _DATAEE_ReadByte:
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6353                           ;DATAEE_ReadByte@bAdd stored from wreg
  6354  0D37  00F1               	movwf	DATAEE_ReadByte@bAdd
  6355  0D38                     l3071:
  6356                           
  6357                           ;mcc_generated_files/memory.c: 211: uint8_t DATAEE_ReadByte(uint8_t bAdd);mcc_generated_
      +                          files/memory.c: 212: {;mcc_generated_files/memory.c: 213:     EEADRL = (uint8_t)(bAdd & 
      +                          0x0ff);
  6358  0D38  0871               	movf	DATAEE_ReadByte@bAdd,w
  6359  0D39  0023               	movlb	3	; select bank3
  6360  0D3A  0091               	movwf	17	;volatile
  6361  0D3B                     l3073:
  6362                           
  6363                           ;mcc_generated_files/memory.c: 214:     EECON1bits.CFGS = 0;
  6364  0D3B  1315               	bcf	21,6	;volsfr
  6365  0D3C                     l3075:
  6366                           
  6367                           ;mcc_generated_files/memory.c: 215:     EECON1bits.EEPGD = 0;
  6368  0D3C  1395               	bcf	21,7	;volsfr
  6369  0D3D                     l3077:
  6370                           
  6371                           ;mcc_generated_files/memory.c: 216:     EECON1bits.RD = 1;
  6372  0D3D  1415               	bsf	21,0	;volsfr
  6373  0D3E                     l3079:
  6374                           
  6375                           ;mcc_generated_files/memory.c: 217:     __nop();
  6376  0D3E  0000               	nop
  6377  0D3F                     l3081:
  6378                           
  6379                           ;mcc_generated_files/memory.c: 218:     __nop();
  6380  0D3F  0000               	nop
  6381                           
  6382                           ;mcc_generated_files/memory.c: 220:     return (EEDATL);
  6383  0D40  0023               	movlb	3	; select bank3
  6384  0D41  0813               	movf	19,w	;volatile
  6385  0D42                     l84:
  6386  0D42  0008               	return
  6387  0D43                     __end_of_DATAEE_ReadByte:
  6388                           
  6389                           	psect	text19
  6390  07ED                     __ptext19:	
  6391 ;; *************** function _SYSTEM_Initialize *****************
  6392 ;; Defined at:
  6393 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;		None
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;		None
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      void 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, pclath, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6407 ;;      Params:         0       0       0       0       0       0
  6408 ;;      Locals:         0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0
  6410 ;;      Totals:         0       0       0       0       0       0
  6411 ;;Total ram usage:        0 bytes
  6412 ;; Hardware stack levels used: 1
  6413 ;; Hardware stack levels required when called: 6
  6414 ;; This function calls:
  6415 ;;		_ADC_Initialize
  6416 ;;		_EUSART_Initialize
  6417 ;;		_OSCILLATOR_Initialize
  6418 ;;		_PIN_MANAGER_Initialize
  6419 ;;		_TMR2_Initialize
  6420 ;;		_WDT_Initialize
  6421 ;; This function is called by:
  6422 ;;		_main
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           
  6427                           ;psect for function _SYSTEM_Initialize
  6428  07ED                     _SYSTEM_Initialize:
  6429  07ED                     l3169:	
  6430                           ;incstack = 0
  6431                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6432                           
  6433                           
  6434                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6435  07ED  318D  25AA  3187   	fcall	_PIN_MANAGER_Initialize
  6436                           
  6437                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6438  07F0  318D  252B  3187   	fcall	_OSCILLATOR_Initialize
  6439                           
  6440                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6441  07F3  318C  24E7  3187   	fcall	_WDT_Initialize
  6442                           
  6443                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6444  07F6  318D  256D  3187   	fcall	_TMR2_Initialize
  6445                           
  6446                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  6447  07F9  318D  251A  3187   	fcall	_ADC_Initialize
  6448                           
  6449                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  6450  07FC  318F  27C0  3187   	fcall	_EUSART_Initialize
  6451  07FF                     l25:
  6452  07FF  0008               	return
  6453  0800                     __end_of_SYSTEM_Initialize:
  6454                           
  6455                           	psect	text20
  6456  0CE7                     __ptext20:	
  6457 ;; *************** function _WDT_Initialize *****************
  6458 ;; Defined at:
  6459 ;;		line 75 in file "mcc_generated_files/mcc.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6473 ;;      Params:         0       0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0
  6476 ;;      Totals:         0       0       0       0       0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used: 1
  6479 ;; Hardware stack levels required when called: 4
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_SYSTEM_Initialize
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _WDT_Initialize
  6489  0CE7                     _WDT_Initialize:
  6490  0CE7                     l2999:	
  6491                           ;incstack = 0
  6492                           ; Regs used in _WDT_Initialize: [wreg]
  6493                           
  6494                           
  6495                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  6496  0CE7  3016               	movlw	22
  6497  0CE8  0021               	movlb	1	; select bank1
  6498  0CE9  0097               	movwf	23	;volatile
  6499  0CEA                     l34:
  6500  0CEA  0008               	return
  6501  0CEB                     __end_of_WDT_Initialize:
  6502                           
  6503                           	psect	text21
  6504  0D6D                     __ptext21:	
  6505 ;; *************** function _TMR2_Initialize *****************
  6506 ;; Defined at:
  6507 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6521 ;;      Params:         0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0
  6524 ;;      Totals:         0       0       0       0       0       0
  6525 ;;Total ram usage:        0 bytes
  6526 ;; Hardware stack levels used: 1
  6527 ;; Hardware stack levels required when called: 5
  6528 ;; This function calls:
  6529 ;;		_TMR2_SetInterruptHandler
  6530 ;; This function is called by:
  6531 ;;		_SYSTEM_Initialize
  6532 ;;		_main
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           
  6537                           ;psect for function _TMR2_Initialize
  6538  0D6D                     _TMR2_Initialize:
  6539  0D6D                     l3001:	
  6540                           ;incstack = 0
  6541                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6542                           
  6543                           
  6544                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xC7;
  6545  0D6D  30C7               	movlw	199
  6546  0D6E  0020               	movlb	0	; select bank0
  6547  0D6F  009B               	movwf	27	;volatile
  6548  0D70                     l3003:
  6549                           
  6550                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  6551  0D70  019A               	clrf	26	;volatile
  6552  0D71                     l3005:
  6553                           
  6554                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  6555  0D71  1091               	bcf	17,1	;volatile
  6556  0D72                     l3007:
  6557                           
  6558                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  6559  0D72  0021               	movlb	1	; select bank1
  6560  0D73  1491               	bsf	17,1	;volatile
  6561  0D74                     l3009:
  6562                           
  6563                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  6564  0D74  30D8               	movlw	low _TMR2_DefaultInterruptHandler
  6565  0D75  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  6566  0D76  300C               	movlw	high _TMR2_DefaultInterruptHandler
  6567  0D77  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  6568  0D78  318D  250D  318D   	fcall	_TMR2_SetInterruptHandler
  6569  0D7B                     l3011:
  6570                           
  6571                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4D;
  6572  0D7B  304D               	movlw	77
  6573  0D7C  0020               	movlb	0	; select bank0
  6574  0D7D  009C               	movwf	28	;volatile
  6575  0D7E                     l342:
  6576  0D7E  0008               	return
  6577  0D7F                     __end_of_TMR2_Initialize:
  6578                           
  6579                           	psect	text22
  6580  0D0D                     __ptext22:	
  6581 ;; *************** function _TMR2_SetInterruptHandler *****************
  6582 ;; Defined at:
  6583 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  6586 ;;		 -> timer_up(1), TMR2_DefaultInterruptHandler(1), 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		wreg
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6598 ;;      Params:         2       0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0
  6600 ;;      Temps:          0       0       0       0       0       0
  6601 ;;      Totals:         2       0       0       0       0       0
  6602 ;;Total ram usage:        2 bytes
  6603 ;; Hardware stack levels used: 1
  6604 ;; Hardware stack levels required when called: 4
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_TMR2_Initialize
  6609 ;;		_main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _TMR2_SetInterruptHandler
  6615  0D0D                     _TMR2_SetInterruptHandler:
  6616  0D0D                     l2959:	
  6617                           ;incstack = 0
  6618                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6619                           
  6620                           
  6621                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  6622  0D0D  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  6623  0D0E  0020               	movlb	0	; select bank0
  6624  0D0F  00B9               	movwf	_TMR2_InterruptHandler+1
  6625  0D10  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  6626  0D11  00B8               	movwf	_TMR2_InterruptHandler
  6627  0D12                     l370:
  6628  0D12  0008               	return
  6629  0D13                     __end_of_TMR2_SetInterruptHandler:
  6630                           
  6631                           	psect	text23
  6632  0DAA                     __ptext23:	
  6633 ;; *************** function _PIN_MANAGER_Initialize *****************
  6634 ;; Defined at:
  6635 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      void 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6649 ;;      Params:         0       0       0       0       0       0
  6650 ;;      Locals:         0       0       0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0
  6652 ;;      Totals:         0       0       0       0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used: 1
  6655 ;; Hardware stack levels required when called: 4
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_SYSTEM_Initialize
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           
  6664                           ;psect for function _PIN_MANAGER_Initialize
  6665  0DAA                     _PIN_MANAGER_Initialize:
  6666  0DAA                     l2973:	
  6667                           ;incstack = 0
  6668                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6669                           
  6670                           
  6671                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  6672  0DAA  0022               	movlb	2	; select bank2
  6673  0DAB  018C               	clrf	12	;volatile
  6674                           
  6675                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  6676  0DAC  018D               	clrf	13	;volatile
  6677  0DAD                     l2975:
  6678                           
  6679                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0xFE;
  6680  0DAD  30FE               	movlw	254
  6681  0DAE  0021               	movlb	1	; select bank1
  6682  0DAF  008C               	movwf	12	;volatile
  6683  0DB0                     l2977:
  6684                           
  6685                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xFF;
  6686  0DB0  30FF               	movlw	255
  6687  0DB1  008D               	movwf	13	;volatile
  6688  0DB2                     l2979:
  6689                           
  6690                           ;mcc_generated_files/pin_manager.c: 72:     ANSELB = 0xE8;
  6691  0DB2  30E8               	movlw	232
  6692  0DB3  0023               	movlb	3	; select bank3
  6693  0DB4  008D               	movwf	13	;volatile
  6694  0DB5                     l2981:
  6695                           
  6696                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x1E;
  6697  0DB5  301E               	movlw	30
  6698  0DB6  008C               	movwf	12	;volatile
  6699  0DB7                     l2983:
  6700                           
  6701                           ;mcc_generated_files/pin_manager.c: 78:     WPUB = 0x01;
  6702  0DB7  3001               	movlw	1
  6703  0DB8  0024               	movlb	4	; select bank4
  6704  0DB9  008D               	movwf	13	;volatile
  6705  0DBA                     l2985:
  6706                           
  6707                           ;mcc_generated_files/pin_manager.c: 79:     WPUA = 0x00;
  6708  0DBA  018C               	clrf	12	;volatile
  6709  0DBB                     l2987:
  6710                           
  6711                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 0;
  6712  0DBB  0021               	movlb	1	; select bank1
  6713  0DBC  1395               	bcf	21,7	;volatile
  6714  0DBD                     l2989:
  6715                           
  6716                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
  6717  0DBD  0022               	movlb	2	; select bank2
  6718  0DBE  019D               	clrf	29	;volatile
  6719  0DBF                     l2991:
  6720                           
  6721                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x00;
  6722  0DBF  019E               	clrf	30	;volatile
  6723  0DC0                     l253:
  6724  0DC0  0008               	return
  6725  0DC1                     __end_of_PIN_MANAGER_Initialize:
  6726                           
  6727                           	psect	text24
  6728  0D2B                     __ptext24:	
  6729 ;; *************** function _OSCILLATOR_Initialize *****************
  6730 ;; Defined at:
  6731 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6745 ;;      Params:         0       0       0       0       0       0
  6746 ;;      Locals:         0       0       0       0       0       0
  6747 ;;      Temps:          0       0       0       0       0       0
  6748 ;;      Totals:         0       0       0       0       0       0
  6749 ;;Total ram usage:        0 bytes
  6750 ;; Hardware stack levels used: 1
  6751 ;; Hardware stack levels required when called: 4
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_SYSTEM_Initialize
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _OSCILLATOR_Initialize
  6761  0D2B                     _OSCILLATOR_Initialize:
  6762  0D2B                     l2993:	
  6763                           ;incstack = 0
  6764                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6765                           
  6766                           
  6767                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  6768  0D2B  3070               	movlw	112
  6769  0D2C  0021               	movlb	1	; select bank1
  6770  0D2D  0099               	movwf	25	;volatile
  6771  0D2E                     l2995:
  6772                           
  6773                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  6774  0D2E  0198               	clrf	24	;volatile
  6775  0D2F                     l2997:
  6776                           
  6777                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  6778  0D2F  0022               	movlb	2	; select bank2
  6779  0D30  0196               	clrf	22	;volatile
  6780  0D31                     l28:	
  6781                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  6782                           
  6783                           
  6784                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  6785  0D31  0021               	movlb	1	; select bank1
  6786  0D32  1F1A               	btfss	26,6	;volatile
  6787  0D33  2D35               	goto	u1291
  6788  0D34  2D36               	goto	u1290
  6789  0D35                     u1291:
  6790  0D35  2D31               	goto	l28
  6791  0D36                     u1290:
  6792  0D36                     l31:
  6793  0D36  0008               	return
  6794  0D37                     __end_of_OSCILLATOR_Initialize:
  6795                           
  6796                           	psect	text25
  6797  0FC0                     __ptext25:	
  6798 ;; *************** function _EUSART_Initialize *****************
  6799 ;; Defined at:
  6800 ;;		line 88 in file "mcc_generated_files/eusart.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;		None
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0, pclath, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6814 ;;      Params:         0       0       0       0       0       0
  6815 ;;      Locals:         0       0       0       0       0       0
  6816 ;;      Temps:          1       0       0       0       0       0
  6817 ;;      Totals:         1       0       0       0       0       0
  6818 ;;Total ram usage:        1 bytes
  6819 ;; Hardware stack levels used: 1
  6820 ;; Hardware stack levels required when called: 5
  6821 ;; This function calls:
  6822 ;;		_EUSART_SetErrorHandler
  6823 ;;		_EUSART_SetFramingErrorHandler
  6824 ;;		_EUSART_SetOverrunErrorHandler
  6825 ;;		_EUSART_SetRxInterruptHandler
  6826 ;;		_EUSART_SetTxInterruptHandler
  6827 ;; This function is called by:
  6828 ;;		_SYSTEM_Initialize
  6829 ;;		_main
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _EUSART_Initialize
  6835  0FC0                     _EUSART_Initialize:
  6836  0FC0                     l3019:	
  6837                           ;incstack = 0
  6838                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6839                           
  6840                           
  6841                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  6842  0FC0  0021               	movlb	1	; select bank1
  6843  0FC1  1291               	bcf	17,5	;volatile
  6844  0FC2                     l3021:
  6845                           
  6846                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6847  0FC2  3087               	movlw	low _EUSART_Receive_ISR
  6848  0FC3  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6849  0FC4  300F               	movlw	high _EUSART_Receive_ISR
  6850  0FC5  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6851  0FC6  318D  2501  318F   	fcall	_EUSART_SetRxInterruptHandler
  6852  0FC9                     l3023:
  6853                           
  6854                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  6855  0FC9  0021               	movlb	1	; select bank1
  6856  0FCA  1211               	bcf	17,4	;volatile
  6857                           
  6858                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6859  0FCB  3067               	movlw	low _EUSART_Transmit_ISR
  6860  0FCC  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6861  0FCD  300E               	movlw	high _EUSART_Transmit_ISR
  6862  0FCE  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6863  0FCF  318D  2507  318F   	fcall	_EUSART_SetTxInterruptHandler
  6864  0FD2                     l3025:
  6865                           
  6866                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  6867  0FD2  3008               	movlw	8
  6868  0FD3  0023               	movlb	3	; select bank3
  6869  0FD4  009F               	movwf	31	;volatile
  6870  0FD5                     l3027:
  6871                           
  6872                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  6873  0FD5  3090               	movlw	144
  6874  0FD6  009D               	movwf	29	;volatile
  6875  0FD7                     l3029:
  6876                           
  6877                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  6878  0FD7  3024               	movlw	36
  6879  0FD8  009E               	movwf	30	;volatile
  6880  0FD9                     l3031:
  6881                           
  6882                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x40;
  6883  0FD9  3040               	movlw	64
  6884  0FDA  009B               	movwf	27	;volatile
  6885  0FDB                     l3033:
  6886                           
  6887                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x03;
  6888  0FDB  3003               	movlw	3
  6889  0FDC  009C               	movwf	28	;volatile
  6890  0FDD                     l3035:
  6891                           
  6892                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6893  0FDD  30D7               	movlw	low _EUSART_DefaultFramingErrorHandler
  6894  0FDE  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6895  0FDF  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  6896  0FE0  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6897  0FE1  318C  24F5  318F   	fcall	_EUSART_SetFramingErrorHandler
  6898  0FE4                     l3037:
  6899                           
  6900                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6901  0FE4  30E3               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6902  0FE5  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6903  0FE6  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6904  0FE7  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6905  0FE8  318C  24FB  318F   	fcall	_EUSART_SetOverrunErrorHandler
  6906  0FEB                     l3039:
  6907                           
  6908                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6909  0FEB  30DF               	movlw	low _EUSART_DefaultErrorHandler
  6910  0FEC  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6911  0FED  300C               	movlw	high _EUSART_DefaultErrorHandler
  6912  0FEE  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6913  0FEF  318C  24EF  318F   	fcall	_EUSART_SetErrorHandler
  6914  0FF2                     l3041:
  6915                           
  6916                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  6917  0FF2  0020               	movlb	0	; select bank0
  6918  0FF3  01D3               	clrf	_eusartRxLastError	;volatile
  6919  0FF4                     l3043:
  6920                           
  6921                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  6922  0FF4  01D8               	clrf	_eusartTxHead	;volatile
  6923  0FF5                     l3045:
  6924                           
  6925                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  6926  0FF5  01D7               	clrf	_eusartTxTail	;volatile
  6927  0FF6                     l3047:
  6928                           
  6929                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  6930  0FF6  3008               	movlw	8
  6931  0FF7  00F3               	movwf	??_EUSART_Initialize
  6932  0FF8  0873               	movf	??_EUSART_Initialize,w
  6933  0FF9  00D6               	movwf	_eusartTxBufferRemaining	;volatile
  6934                           
  6935                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  6936  0FFA  01FC               	clrf	_eusartRxHead	;volatile
  6937                           
  6938                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  6939  0FFB  01D5               	clrf	_eusartRxTail	;volatile
  6940                           
  6941                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  6942  0FFC  01D4               	clrf	_eusartRxCount	;volatile
  6943  0FFD                     l3049:
  6944                           
  6945                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  6946  0FFD  0021               	movlb	1	; select bank1
  6947  0FFE  1691               	bsf	17,5	;volatile
  6948  0FFF                     l159:
  6949  0FFF  0008               	return
  6950  1000                     __end_of_EUSART_Initialize:
  6951                           
  6952                           	psect	text26
  6953  0D07                     __ptext26:	
  6954 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  6955 ;; Defined at:
  6956 ;;		line 276 in file "mcc_generated_files/eusart.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6959 ;;		 -> EUSART_Transmit_ISR(1), 
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;		None
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      void 
  6964 ;; Registers used:
  6965 ;;		wreg
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6971 ;;      Params:         2       0       0       0       0       0
  6972 ;;      Locals:         0       0       0       0       0       0
  6973 ;;      Temps:          0       0       0       0       0       0
  6974 ;;      Totals:         2       0       0       0       0       0
  6975 ;;Total ram usage:        2 bytes
  6976 ;; Hardware stack levels used: 1
  6977 ;; Hardware stack levels required when called: 4
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_EUSART_Initialize
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _EUSART_SetTxInterruptHandler
  6987  0D07                     _EUSART_SetTxInterruptHandler:
  6988  0D07                     l2919:	
  6989                           ;incstack = 0
  6990                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  6991                           
  6992                           
  6993                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  6994  0D07  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  6995  0D08  0020               	movlb	0	; select bank0
  6996  0D09  00C5               	movwf	_EUSART_TxDefaultInterruptHandler+1
  6997  0D0A  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  6998  0D0B  00C4               	movwf	_EUSART_TxDefaultInterruptHandler
  6999  0D0C                     l225:
  7000  0D0C  0008               	return
  7001  0D0D                     __end_of_EUSART_SetTxInterruptHandler:
  7002                           
  7003                           	psect	text27
  7004  0D01                     __ptext27:	
  7005 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7006 ;; Defined at:
  7007 ;;		line 280 in file "mcc_generated_files/eusart.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7010 ;;		 -> EUSART_Receive_ISR(1), 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		wreg
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7022 ;;      Params:         2       0       0       0       0       0
  7023 ;;      Locals:         0       0       0       0       0       0
  7024 ;;      Temps:          0       0       0       0       0       0
  7025 ;;      Totals:         2       0       0       0       0       0
  7026 ;;Total ram usage:        2 bytes
  7027 ;; Hardware stack levels used: 1
  7028 ;; Hardware stack levels required when called: 4
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_EUSART_Initialize
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _EUSART_SetRxInterruptHandler
  7038  0D01                     _EUSART_SetRxInterruptHandler:
  7039  0D01                     l2917:	
  7040                           ;incstack = 0
  7041                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7042                           
  7043                           
  7044                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7045  0D01  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7046  0D02  0020               	movlb	0	; select bank0
  7047  0D03  00C3               	movwf	_EUSART_RxDefaultInterruptHandler+1
  7048  0D04  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7049  0D05  00C2               	movwf	_EUSART_RxDefaultInterruptHandler
  7050  0D06                     l228:
  7051  0D06  0008               	return
  7052  0D07                     __end_of_EUSART_SetRxInterruptHandler:
  7053                           
  7054                           	psect	text28
  7055  0CFB                     __ptext28:	
  7056 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7057 ;; Defined at:
  7058 ;;		line 268 in file "mcc_generated_files/eusart.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7061 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7073 ;;      Params:         2       0       0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0
  7075 ;;      Temps:          0       0       0       0       0       0
  7076 ;;      Totals:         2       0       0       0       0       0
  7077 ;;Total ram usage:        2 bytes
  7078 ;; Hardware stack levels used: 1
  7079 ;; Hardware stack levels required when called: 4
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_EUSART_Initialize
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _EUSART_SetOverrunErrorHandler
  7089  0CFB                     _EUSART_SetOverrunErrorHandler:
  7090  0CFB                     l2923:	
  7091                           ;incstack = 0
  7092                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7093                           
  7094                           
  7095                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  7096  0CFB  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7097  0CFC  0020               	movlb	0	; select bank0
  7098  0CFD  00BF               	movwf	_EUSART_OverrunErrorHandler+1
  7099  0CFE  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7100  0CFF  00BE               	movwf	_EUSART_OverrunErrorHandler
  7101  0D00                     l219:
  7102  0D00  0008               	return
  7103  0D01                     __end_of_EUSART_SetOverrunErrorHandler:
  7104                           
  7105                           	psect	text29
  7106  0CF5                     __ptext29:	
  7107 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7108 ;; Defined at:
  7109 ;;		line 264 in file "mcc_generated_files/eusart.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7112 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7124 ;;      Params:         2       0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0
  7127 ;;      Totals:         2       0       0       0       0       0
  7128 ;;Total ram usage:        2 bytes
  7129 ;; Hardware stack levels used: 1
  7130 ;; Hardware stack levels required when called: 4
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_EUSART_Initialize
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _EUSART_SetFramingErrorHandler
  7140  0CF5                     _EUSART_SetFramingErrorHandler:
  7141  0CF5                     l2921:	
  7142                           ;incstack = 0
  7143                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7144                           
  7145                           
  7146                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  7147  0CF5  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7148  0CF6  0020               	movlb	0	; select bank0
  7149  0CF7  00C1               	movwf	_EUSART_FramingErrorHandler+1
  7150  0CF8  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7151  0CF9  00C0               	movwf	_EUSART_FramingErrorHandler
  7152  0CFA                     l216:
  7153  0CFA  0008               	return
  7154  0CFB                     __end_of_EUSART_SetFramingErrorHandler:
  7155                           
  7156                           	psect	text30
  7157  0CEF                     __ptext30:	
  7158 ;; *************** function _EUSART_SetErrorHandler *****************
  7159 ;; Defined at:
  7160 ;;		line 272 in file "mcc_generated_files/eusart.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7163 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;		None
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      void 
  7168 ;; Registers used:
  7169 ;;		wreg
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7175 ;;      Params:         2       0       0       0       0       0
  7176 ;;      Locals:         0       0       0       0       0       0
  7177 ;;      Temps:          0       0       0       0       0       0
  7178 ;;      Totals:         2       0       0       0       0       0
  7179 ;;Total ram usage:        2 bytes
  7180 ;; Hardware stack levels used: 1
  7181 ;; Hardware stack levels required when called: 4
  7182 ;; This function calls:
  7183 ;;		Nothing
  7184 ;; This function is called by:
  7185 ;;		_EUSART_Initialize
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           
  7190                           ;psect for function _EUSART_SetErrorHandler
  7191  0CEF                     _EUSART_SetErrorHandler:
  7192  0CEF                     l2925:	
  7193                           ;incstack = 0
  7194                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7195                           
  7196                           
  7197                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  7198  0CEF  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7199  0CF0  0020               	movlb	0	; select bank0
  7200  0CF1  00BD               	movwf	_EUSART_ErrorHandler+1
  7201  0CF2  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7202  0CF3  00BC               	movwf	_EUSART_ErrorHandler
  7203  0CF4                     l222:
  7204  0CF4  0008               	return
  7205  0CF5                     __end_of_EUSART_SetErrorHandler:
  7206                           
  7207                           	psect	text31
  7208  0D1A                     __ptext31:	
  7209 ;; *************** function _ADC_Initialize *****************
  7210 ;; Defined at:
  7211 ;;		line 67 in file "mcc_generated_files/adc.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7225 ;;      Params:         0       0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0
  7228 ;;      Totals:         0       0       0       0       0       0
  7229 ;;Total ram usage:        0 bytes
  7230 ;; Hardware stack levels used: 1
  7231 ;; Hardware stack levels required when called: 4
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_SYSTEM_Initialize
  7236 ;;		_main
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _ADC_Initialize
  7242  0D1A                     _ADC_Initialize:
  7243  0D1A                     l3013:	
  7244                           ;incstack = 0
  7245                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7246                           
  7247                           
  7248                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x10;
  7249  0D1A  3010               	movlw	16
  7250  0D1B  0021               	movlb	1	; select bank1
  7251  0D1C  009E               	movwf	30	;volatile
  7252  0D1D                     l3015:
  7253                           
  7254                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  7255  0D1D  019B               	clrf	27	;volatile
  7256  0D1E                     l3017:
  7257                           
  7258                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  7259  0D1E  019C               	clrf	28	;volatile
  7260                           
  7261                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x25;
  7262  0D1F  3025               	movlw	37
  7263  0D20  009D               	movwf	29	;volatile
  7264  0D21                     l298:
  7265  0D21  0008               	return
  7266  0D22                     __end_of_ADC_Initialize:
  7267                           
  7268                           	psect	text32
  7269  0D22                     __ptext32:	
  7270 ;; *************** function _EUSART_is_rx_ready *****************
  7271 ;; Defined at:
  7272 ;;		line 137 in file "mcc_generated_files/eusart.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;		None
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      _Bool 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2, status,0
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7286 ;;      Params:         0       0       0       0       0       0
  7287 ;;      Locals:         0       0       0       0       0       0
  7288 ;;      Temps:          0       0       0       0       0       0
  7289 ;;      Totals:         0       0       0       0       0       0
  7290 ;;Total ram usage:        0 bytes
  7291 ;; Hardware stack levels used: 1
  7292 ;; Hardware stack levels required when called: 4
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_main
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           
  7301                           ;psect for function _EUSART_is_rx_ready
  7302  0D22                     _EUSART_is_rx_ready:
  7303  0D22                     l3171:	
  7304                           ;incstack = 0
  7305                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  7306                           
  7307                           
  7308                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  7309  0D22  0020               	movlb	0	; select bank0
  7310  0D23  0854               	movf	_eusartRxCount,w	;volatile
  7311  0D24  1D03               	btfss	3,2
  7312  0D25  2D27               	goto	u1491
  7313  0D26  2D29               	goto	u1490
  7314  0D27                     u1491:
  7315  0D27  3001               	movlw	1
  7316  0D28  2D2A               	goto	u1500
  7317  0D29                     u1490:
  7318  0D29  3000               	movlw	0
  7319  0D2A                     u1500:
  7320  0D2A                     l165:
  7321  0D2A  0008               	return
  7322  0D2B                     __end_of_EUSART_is_rx_ready:
  7323                           
  7324                           	psect	text33
  7325  0ED4                     __ptext33:	
  7326 ;; *************** function _EUSART_Read *****************
  7327 ;; Defined at:
  7328 ;;		line 151 in file "mcc_generated_files/eusart.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  readValue       1    2[COMMON] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      unsigned char 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7342 ;;      Params:         0       0       0       0       0       0
  7343 ;;      Locals:         1       0       0       0       0       0
  7344 ;;      Temps:          1       0       0       0       0       0
  7345 ;;      Totals:         2       0       0       0       0       0
  7346 ;;Total ram usage:        2 bytes
  7347 ;; Hardware stack levels used: 1
  7348 ;; Hardware stack levels required when called: 4
  7349 ;; This function calls:
  7350 ;;		Nothing
  7351 ;; This function is called by:
  7352 ;;		_main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _EUSART_Read
  7358  0ED4                     _EUSART_Read:
  7359  0ED4                     l3175:	
  7360                           ;incstack = 0
  7361                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7362                           
  7363  0ED4                     l3177:	
  7364                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7365                           
  7366                           
  7367                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7368  0ED4  0020               	movlb	0	; select bank0
  7369  0ED5  0854               	movf	_eusartRxCount,w	;volatile
  7370  0ED6  1903               	btfsc	3,2
  7371  0ED7  2ED9               	goto	u1511
  7372  0ED8  2EDA               	goto	u1510
  7373  0ED9                     u1511:
  7374  0ED9  2ED4               	goto	l3177
  7375  0EDA                     u1510:
  7376  0EDA                     l3179:
  7377                           
  7378                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  7379  0EDA  0855               	movf	_eusartRxTail,w	;volatile
  7380  0EDB  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7381  0EDC  0086               	movwf	6
  7382  0EDD  0187               	clrf	7
  7383  0EDE  0801               	movf	1,w
  7384  0EDF  00F1               	movwf	??_EUSART_Read
  7385  0EE0  0871               	movf	??_EUSART_Read,w
  7386  0EE1  00D3               	movwf	_eusartRxLastError	;volatile
  7387                           
  7388                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  7389  0EE2  0855               	movf	_eusartRxTail,w
  7390  0EE3  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7391  0EE4  0086               	movwf	6
  7392  0EE5  0187               	clrf	7
  7393  0EE6  0801               	movf	1,w
  7394  0EE7  00F1               	movwf	??_EUSART_Read
  7395  0EE8  0871               	movf	??_EUSART_Read,w
  7396  0EE9  00F2               	movwf	EUSART_Read@readValue
  7397  0EEA                     l3181:
  7398  0EEA  3001               	movlw	1
  7399  0EEB  00F1               	movwf	??_EUSART_Read
  7400  0EEC  0871               	movf	??_EUSART_Read,w
  7401  0EED  07D5               	addwf	_eusartRxTail,f	;volatile
  7402  0EEE                     l3183:
  7403                           
  7404                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7405  0EEE  3008               	movlw	8
  7406  0EEF  0255               	subwf	_eusartRxTail,w	;volatile
  7407  0EF0  1C03               	skipc
  7408  0EF1  2EF3               	goto	u1521
  7409  0EF2  2EF4               	goto	u1520
  7410  0EF3                     u1521:
  7411  0EF3  2EF5               	goto	l3187
  7412  0EF4                     u1520:
  7413  0EF4                     l3185:
  7414                           
  7415                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  7416  0EF4  01D5               	clrf	_eusartRxTail	;volatile
  7417  0EF5                     l3187:
  7418                           
  7419                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  7420  0EF5  0021               	movlb	1	; select bank1
  7421  0EF6  1291               	bcf	17,5	;volatile
  7422  0EF7                     l3189:
  7423                           
  7424                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  7425  0EF7  3001               	movlw	1
  7426  0EF8  0020               	movlb	0	; select bank0
  7427  0EF9  02D4               	subwf	_eusartRxCount,f	;volatile
  7428  0EFA                     l3191:
  7429                           
  7430                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  7431  0EFA  0021               	movlb	1	; select bank1
  7432  0EFB  1691               	bsf	17,5	;volatile
  7433  0EFC                     l3193:
  7434                           
  7435                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  7436  0EFC  0872               	movf	EUSART_Read@readValue,w
  7437  0EFD                     l178:
  7438  0EFD  0008               	return
  7439  0EFE                     __end_of_EUSART_Read:
  7440                           
  7441                           	psect	text34
  7442  0CDC                     __ptext34:	
  7443 ;; *************** function _ADC_StartConversion *****************
  7444 ;; Defined at:
  7445 ;;		line 93 in file "mcc_generated_files/adc.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      void 
  7452 ;; Registers used:
  7453 ;;		None
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7459 ;;      Params:         0       0       0       0       0       0
  7460 ;;      Locals:         0       0       0       0       0       0
  7461 ;;      Temps:          0       0       0       0       0       0
  7462 ;;      Totals:         0       0       0       0       0       0
  7463 ;;Total ram usage:        0 bytes
  7464 ;; Hardware stack levels used: 1
  7465 ;; Hardware stack levels required when called: 4
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_main
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           
  7474                           ;psect for function _ADC_StartConversion
  7475  0CDC                     _ADC_StartConversion:
  7476  0CDC                     l3237:	
  7477                           ;incstack = 0
  7478                           ; Regs used in _ADC_StartConversion: []
  7479                           
  7480                           
  7481                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  7482  0CDC  0021               	movlb	1	; select bank1
  7483  0CDD  149D               	bsf	29,1	;volatile
  7484  0CDE                     l304:
  7485  0CDE  0008               	return
  7486  0CDF                     __end_of_ADC_StartConversion:
  7487                           
  7488                           	psect	text35
  7489  0D13                     __ptext35:	
  7490 ;; *************** function _ADC_IsConversionDone *****************
  7491 ;; Defined at:
  7492 ;;		line 100 in file "mcc_generated_files/adc.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;		None
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      _Bool 
  7499 ;; Registers used:
  7500 ;;		wreg, status,0
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7506 ;;      Params:         0       0       0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0       0
  7509 ;;      Totals:         0       0       0       0       0       0
  7510 ;;Total ram usage:        0 bytes
  7511 ;; Hardware stack levels used: 1
  7512 ;; Hardware stack levels required when called: 4
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_main
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           
  7521                           ;psect for function _ADC_IsConversionDone
  7522  0D13                     _ADC_IsConversionDone:
  7523  0D13                     l3239:	
  7524                           ;incstack = 0
  7525                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  7526                           
  7527                           
  7528                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
  7529  0D13  1003               	clrc
  7530  0D14  0021               	movlb	1	; select bank1
  7531  0D15  1C9D               	btfss	29,1	;volatile
  7532  0D16  1403               	setc
  7533  0D17  3000               	movlw	0
  7534  0D18  3D09               	addwfc	9,w
  7535  0D19                     l307:
  7536  0D19  0008               	return
  7537  0D1A                     __end_of_ADC_IsConversionDone:
  7538                           
  7539                           	psect	text36
  7540  0CD9                     __ptext36:	
  7541 ;; *************** function _ADC_GetConversionResult *****************
  7542 ;; Defined at:
  7543 ;;		line 106 in file "mcc_generated_files/adc.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;		None
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;		None
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      unsigned char 
  7550 ;; Registers used:
  7551 ;;		wreg
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7557 ;;      Params:         0       0       0       0       0       0
  7558 ;;      Locals:         0       0       0       0       0       0
  7559 ;;      Temps:          0       0       0       0       0       0
  7560 ;;      Totals:         0       0       0       0       0       0
  7561 ;;Total ram usage:        0 bytes
  7562 ;; Hardware stack levels used: 1
  7563 ;; Hardware stack levels required when called: 4
  7564 ;; This function calls:
  7565 ;;		Nothing
  7566 ;; This function is called by:
  7567 ;;		_main
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _ADC_GetConversionResult
  7573  0CD9                     _ADC_GetConversionResult:
  7574  0CD9                     l3243:	
  7575                           ;incstack = 0
  7576                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7577                           
  7578                           
  7579                           ;mcc_generated_files/adc.c: 109:     return ADRESH;
  7580  0CD9  0021               	movlb	1	; select bank1
  7581  0CDA  081C               	movf	28,w	;volatile
  7582  0CDB                     l310:
  7583  0CDB  0008               	return
  7584  0CDC                     __end_of_ADC_GetConversionResult:
  7585                           
  7586                           	psect	intentry
  7587  0004                     __pintentry:	
  7588 ;; *************** function _INTERRUPT_InterruptManager *****************
  7589 ;; Defined at:
  7590 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;		None
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  1    wreg      void 
  7597 ;; Registers used:
  7598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7604 ;;      Params:         0       0       0       0       0       0
  7605 ;;      Locals:         0       0       0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0
  7607 ;;      Totals:         0       0       0       0       0       0
  7608 ;;Total ram usage:        0 bytes
  7609 ;; Hardware stack levels used: 1
  7610 ;; Hardware stack levels required when called: 3
  7611 ;; This function calls:
  7612 ;;		Absolute function
  7613 ;;		_EUSART_Receive_ISR
  7614 ;;		_EUSART_Transmit_ISR
  7615 ;;		_TMR2_ISR
  7616 ;; This function is called by:
  7617 ;;		Interrupt level 1
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621  0004                     _INTERRUPT_InterruptManager:
  7622                           
  7623                           ;incstack = 0
  7624  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  7625                           
  7626                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7627  0005  3180               	pagesel	$
  7628  0006                     i1l3405:
  7629                           
  7630                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  7631  0006  1F0B               	btfss	11,6	;volatile
  7632  0007  2809               	goto	u179_21
  7633  0008  280A               	goto	u179_20
  7634  0009                     u179_21:
  7635  0009  2838               	goto	i1l281
  7636  000A                     u179_20:
  7637  000A                     i1l3407:
  7638                           
  7639                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  7640  000A  0021               	movlb	1	; select bank1
  7641  000B  1E11               	btfss	17,4	;volatile
  7642  000C  280E               	goto	u180_21
  7643  000D  280F               	goto	u180_20
  7644  000E                     u180_21:
  7645  000E  281A               	goto	i1l274
  7646  000F                     u180_20:
  7647  000F                     i1l3409:
  7648  000F  0020               	movlb	0	; select bank0
  7649  0010  1E11               	btfss	17,4	;volatile
  7650  0011  2813               	goto	u181_21
  7651  0012  2814               	goto	u181_20
  7652  0013                     u181_21:
  7653  0013  281A               	goto	i1l274
  7654  0014                     u181_20:
  7655  0014                     i1l3411:
  7656                           
  7657                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  7658  0014  0845               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  7659  0015  008A               	movwf	10
  7660  0016  0844               	movf	_EUSART_TxDefaultInterruptHandler,w
  7661  0017  000A               	callw
  7662  0018  3180               	pagesel	$
  7663                           
  7664                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  7665  0019  2838               	goto	i1l281
  7666  001A                     i1l274:	
  7667                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  7668                           
  7669  001A  0021               	movlb	1	; select bank1
  7670  001B  1E91               	btfss	17,5	;volatile
  7671  001C  281E               	goto	u182_21
  7672  001D  281F               	goto	u182_20
  7673  001E                     u182_21:
  7674  001E  282A               	goto	i1l276
  7675  001F                     u182_20:
  7676  001F                     i1l3413:
  7677  001F  0020               	movlb	0	; select bank0
  7678  0020  1E91               	btfss	17,5	;volatile
  7679  0021  2823               	goto	u183_21
  7680  0022  2824               	goto	u183_20
  7681  0023                     u183_21:
  7682  0023  282A               	goto	i1l276
  7683  0024                     u183_20:
  7684  0024                     i1l3415:
  7685                           
  7686                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  7687  0024  0843               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  7688  0025  008A               	movwf	10
  7689  0026  0842               	movf	_EUSART_RxDefaultInterruptHandler,w
  7690  0027  000A               	callw
  7691  0028  3180               	pagesel	$
  7692                           
  7693                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  7694  0029  2838               	goto	i1l281
  7695  002A                     i1l276:	
  7696                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  7697                           
  7698  002A  0021               	movlb	1	; select bank1
  7699  002B  1C91               	btfss	17,1	;volatile
  7700  002C  282E               	goto	u184_21
  7701  002D  282F               	goto	u184_20
  7702  002E                     u184_21:
  7703  002E  2838               	goto	i1l275
  7704  002F                     u184_20:
  7705  002F                     i1l3417:
  7706  002F  0020               	movlb	0	; select bank0
  7707  0030  1C91               	btfss	17,1	;volatile
  7708  0031  2833               	goto	u185_21
  7709  0032  2834               	goto	u185_20
  7710  0033                     u185_21:
  7711  0033  2838               	goto	i1l275
  7712  0034                     u185_20:
  7713  0034                     i1l3419:
  7714                           
  7715                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR2_ISR();
  7716  0034  318D  2594  3180   	fcall	_TMR2_ISR
  7717                           
  7718                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  7719  0037  2838               	goto	i1l281
  7720  0038                     i1l275:
  7721  0038                     i1l281:	
  7722                           ;mcc_generated_files/interrupt_manager.c: 73:     }
  7723                           
  7724  0038  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7725  0039  0009               	retfie
  7726  003A                     __end_of_INTERRUPT_InterruptManager:
  7727                           
  7728                           	psect	text38
  7729  0D94                     __ptext38:	
  7730 ;; *************** function _TMR2_ISR *****************
  7731 ;; Defined at:
  7732 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2, status,0, pclath, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7746 ;;      Params:         0       0       0       0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0
  7748 ;;      Temps:          0       0       0       0       0       0
  7749 ;;      Totals:         0       0       0       0       0       0
  7750 ;;Total ram usage:        0 bytes
  7751 ;; Hardware stack levels used: 1
  7752 ;; Hardware stack levels required when called: 2
  7753 ;; This function calls:
  7754 ;;		_TMR2_CallBack
  7755 ;; This function is called by:
  7756 ;;		_INTERRUPT_InterruptManager
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           
  7761                           ;psect for function _TMR2_ISR
  7762  0D94                     _TMR2_ISR:
  7763  0D94                     i1l3229:	
  7764                           ;incstack = 0
  7765                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  7766                           
  7767                           
  7768                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  7769  0D94  0020               	movlb	0	; select bank0
  7770  0D95  1091               	bcf	17,1	;volatile
  7771  0D96                     i1l3231:
  7772                           
  7773                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 10)
  7774  0D96  3001               	movlw	1
  7775  0D97  07B6               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  7776  0D98  3000               	movlw	0
  7777  0D99  3DB7               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  7778  0D9A  3000               	movlw	0
  7779  0D9B  0237               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  7780  0D9C  300A               	movlw	10
  7781  0D9D  1903               	skipnz
  7782  0D9E  0236               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  7783  0D9F  1C03               	skipc
  7784  0DA0  2DA2               	goto	u158_21
  7785  0DA1  2DA3               	goto	u158_20
  7786  0DA2                     u158_21:
  7787  0DA2  2DA9               	goto	i1l363
  7788  0DA3                     u158_20:
  7789  0DA3                     i1l3233:
  7790                           
  7791                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  7792  0DA3  318D  254F  318D   	fcall	_TMR2_CallBack
  7793  0DA6                     i1l3235:
  7794                           
  7795                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  7796  0DA6  0020               	movlb	0	; select bank0
  7797  0DA7  01B6               	clrf	TMR2_ISR@CountCallBack	;volatile
  7798  0DA8  01B7               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  7799  0DA9                     i1l363:
  7800  0DA9  0008               	return
  7801  0DAA                     __end_of_TMR2_ISR:
  7802                           
  7803                           	psect	text39
  7804  0D4F                     __ptext39:	
  7805 ;; *************** function _TMR2_CallBack *****************
  7806 ;; Defined at:
  7807 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;		None
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;		None
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0, pclath, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7821 ;;      Params:         0       0       0       0       0       0
  7822 ;;      Locals:         0       0       0       0       0       0
  7823 ;;      Temps:          0       0       0       0       0       0
  7824 ;;      Totals:         0       0       0       0       0       0
  7825 ;;Total ram usage:        0 bytes
  7826 ;; Hardware stack levels used: 1
  7827 ;; Hardware stack levels required when called: 1
  7828 ;; This function calls:
  7829 ;;		Absolute function
  7830 ;;		_TMR2_DefaultInterruptHandler
  7831 ;;		_timer_up
  7832 ;; This function is called by:
  7833 ;;		_TMR2_ISR
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _TMR2_CallBack
  7839  0D4F                     _TMR2_CallBack:
  7840  0D4F                     i1l3089:	
  7841                           ;incstack = 0
  7842                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  7843                           
  7844                           
  7845                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  7846  0D4F  0020               	movlb	0	; select bank0
  7847  0D50  0838               	movf	_TMR2_InterruptHandler,w
  7848  0D51  0439               	iorwf	_TMR2_InterruptHandler+1,w
  7849  0D52  1903               	btfsc	3,2
  7850  0D53  2D55               	goto	u131_21
  7851  0D54  2D56               	goto	u131_20
  7852  0D55                     u131_21:
  7853  0D55  2D5B               	goto	i1l367
  7854  0D56                     u131_20:
  7855  0D56                     i1l3091:
  7856                           
  7857                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  7858  0D56  0839               	movf	_TMR2_InterruptHandler+1,w
  7859  0D57  008A               	movwf	10
  7860  0D58  0838               	movf	_TMR2_InterruptHandler,w
  7861  0D59  000A               	callw
  7862  0D5A  318D               	pagesel	$
  7863  0D5B                     i1l367:
  7864  0D5B  0008               	return
  7865  0D5C                     __end_of_TMR2_CallBack:
  7866                           
  7867                           	psect	text40
  7868  0CD8                     __ptext40:	
  7869 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  7870 ;; Defined at:
  7871 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;		None
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;		None
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		None
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7885 ;;      Params:         0       0       0       0       0       0
  7886 ;;      Locals:         0       0       0       0       0       0
  7887 ;;      Temps:          0       0       0       0       0       0
  7888 ;;      Totals:         0       0       0       0       0       0
  7889 ;;Total ram usage:        0 bytes
  7890 ;; Hardware stack levels used: 1
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_TMR2_Initialize
  7895 ;;		_TMR2_CallBack
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _TMR2_DefaultInterruptHandler
  7901  0CD8                     _TMR2_DefaultInterruptHandler:
  7902  0CD8                     i1l373:	
  7903                           ;incstack = 0
  7904                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  7905                           
  7906  0CD8  0008               	return
  7907  0CD9                     __end_of_TMR2_DefaultInterruptHandler:
  7908                           
  7909                           	psect	text41
  7910  0722                     __ptext41:	
  7911 ;; *************** function _timer_up *****************
  7912 ;; Defined at:
  7913 ;;		line 133 in file "main.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7927 ;;      Params:         0       0       0       0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0
  7930 ;;      Totals:         0       0       0       0       0       0
  7931 ;;Total ram usage:        0 bytes
  7932 ;; Hardware stack levels used: 1
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_main
  7937 ;;		_TMR2_CallBack
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           
  7942                           ;psect for function _timer_up
  7943  0722                     _timer_up:
  7944  0722                     i1l2961:	
  7945                           ;incstack = 0
  7946                           ; Regs used in _timer_up: [wreg+status,2+status,0]
  7947                           
  7948                           
  7949                           ;main.c: 134:     if(receive_timer_len > 0) receive_time++;
  7950  0722  0020               	movlb	0	; select bank0
  7951  0723  1BAB               	btfsc	_receive_timer_len+3,7
  7952  0724  2F33               	goto	u126_21
  7953  0725  082B               	movf	_receive_timer_len+3,w
  7954  0726  1D03               	btfss	3,2
  7955  0727  2F34               	goto	u126_20
  7956  0728  082A               	movf	_receive_timer_len+2,w
  7957  0729  1D03               	btfss	3,2
  7958  072A  2F34               	goto	u126_20
  7959  072B  0829               	movf	_receive_timer_len+1,w
  7960  072C  1D03               	btfss	3,2
  7961  072D  2F34               	goto	u126_20
  7962  072E  3001               	movlw	1
  7963  072F  0228               	subwf	_receive_timer_len,w
  7964  0730  1C03               	btfss	3,0
  7965  0731  2F33               	goto	u126_21
  7966  0732  2F34               	goto	u126_20
  7967  0733                     u126_21:
  7968  0733  2F3D               	goto	i1l2965
  7969  0734                     u126_20:
  7970  0734                     i1l2963:
  7971  0734  3001               	movlw	1
  7972  0735  0020               	movlb	0	; select bank0
  7973  0736  07AC               	addwf	_receive_time,f
  7974  0737  3000               	movlw	0
  7975  0738  3DAD               	addwfc	_receive_time+1,f
  7976  0739  3000               	movlw	0
  7977  073A  3DAE               	addwfc	_receive_time+2,f
  7978  073B  3000               	movlw	0
  7979  073C  3DAF               	addwfc	_receive_time+3,f
  7980  073D                     i1l2965:
  7981                           
  7982                           ;main.c: 135:     if(cmd_timer_len > 0) cmd_time++;
  7983  073D  0020               	movlb	0	; select bank0
  7984  073E  1BA3               	btfsc	_cmd_timer_len+3,7
  7985  073F  2F4E               	goto	u127_21
  7986  0740  0823               	movf	_cmd_timer_len+3,w
  7987  0741  1D03               	btfss	3,2
  7988  0742  2F4F               	goto	u127_20
  7989  0743  0822               	movf	_cmd_timer_len+2,w
  7990  0744  1D03               	btfss	3,2
  7991  0745  2F4F               	goto	u127_20
  7992  0746  0821               	movf	_cmd_timer_len+1,w
  7993  0747  1D03               	btfss	3,2
  7994  0748  2F4F               	goto	u127_20
  7995  0749  3001               	movlw	1
  7996  074A  0220               	subwf	_cmd_timer_len,w
  7997  074B  1C03               	btfss	3,0
  7998  074C  2F4E               	goto	u127_21
  7999  074D  2F4F               	goto	u127_20
  8000  074E                     u127_21:
  8001  074E  2F58               	goto	i1l2969
  8002  074F                     u127_20:
  8003  074F                     i1l2967:
  8004  074F  3001               	movlw	1
  8005  0750  0020               	movlb	0	; select bank0
  8006  0751  07A4               	addwf	_cmd_time,f
  8007  0752  3000               	movlw	0
  8008  0753  3DA5               	addwfc	_cmd_time+1,f
  8009  0754  3000               	movlw	0
  8010  0755  3DA6               	addwfc	_cmd_time+2,f
  8011  0756  3000               	movlw	0
  8012  0757  3DA7               	addwfc	_cmd_time+3,f
  8013  0758                     i1l2969:
  8014                           
  8015                           ;main.c: 136:     if(button_status) button_time++;
  8016  0758  0020               	movlb	0	; select bank0
  8017  0759  0849               	movf	_button_status,w
  8018  075A  1903               	btfsc	3,2
  8019  075B  2F5D               	goto	u128_21
  8020  075C  2F5E               	goto	u128_20
  8021  075D                     u128_21:
  8022  075D  2F67               	goto	i1l471
  8023  075E                     u128_20:
  8024  075E                     i1l2971:
  8025  075E  3001               	movlw	1
  8026  075F  0021               	movlb	1	; select bank1
  8027  0760  07B8               	addwf	_button_time^(0+128),f
  8028  0761  3000               	movlw	0
  8029  0762  3DB9               	addwfc	(_button_time+1)^(0+128),f
  8030  0763  3000               	movlw	0
  8031  0764  3DBA               	addwfc	(_button_time+2)^(0+128),f
  8032  0765  3000               	movlw	0
  8033  0766  3DBB               	addwfc	(_button_time+3)^(0+128),f
  8034  0767                     i1l471:
  8035  0767  0008               	return
  8036  0768                     __end_of_timer_up:
  8037                           
  8038                           	psect	text42
  8039  0E67                     __ptext42:	
  8040 ;; *************** function _EUSART_Transmit_ISR *****************
  8041 ;; Defined at:
  8042 ;;		line 197 in file "mcc_generated_files/eusart.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;		None
  8045 ;; Auto vars:     Size  Location     Type
  8046 ;;		None
  8047 ;; Return value:  Size  Location     Type
  8048 ;;                  1    wreg      void 
  8049 ;; Registers used:
  8050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : 0/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8056 ;;      Params:         0       0       0       0       0       0
  8057 ;;      Locals:         0       0       0       0       0       0
  8058 ;;      Temps:          1       0       0       0       0       0
  8059 ;;      Totals:         1       0       0       0       0       0
  8060 ;;Total ram usage:        1 bytes
  8061 ;; Hardware stack levels used: 1
  8062 ;; This function calls:
  8063 ;;		Nothing
  8064 ;; This function is called by:
  8065 ;;		_EUSART_Initialize
  8066 ;;		_INTERRUPT_InterruptManager
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           
  8071                           ;psect for function _EUSART_Transmit_ISR
  8072  0E67                     _EUSART_Transmit_ISR:
  8073  0E67                     i1l3197:	
  8074                           ;incstack = 0
  8075                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8076                           
  8077                           
  8078                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  8079  0E67  3008               	movlw	8
  8080  0E68  0020               	movlb	0	; select bank0
  8081  0E69  0256               	subwf	_eusartTxBufferRemaining,w	;volatile
  8082  0E6A  1803               	skipnc
  8083  0E6B  2E6D               	goto	u153_21
  8084  0E6C  2E6E               	goto	u153_20
  8085  0E6D                     u153_21:
  8086  0E6D  2E86               	goto	i1l190
  8087  0E6E                     u153_20:
  8088  0E6E                     i1l3199:
  8089                           
  8090                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  8091  0E6E  0857               	movf	_eusartTxTail,w
  8092  0E6F  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8093  0E70  0086               	movwf	6
  8094  0E71  0187               	clrf	7
  8095  0E72  0801               	movf	1,w
  8096  0E73  0023               	movlb	3	; select bank3
  8097  0E74  009A               	movwf	26	;volatile
  8098  0E75                     i1l3201:
  8099  0E75  3001               	movlw	1
  8100  0E76  00F0               	movwf	??_EUSART_Transmit_ISR
  8101  0E77  0870               	movf	??_EUSART_Transmit_ISR,w
  8102  0E78  0020               	movlb	0	; select bank0
  8103  0E79  07D7               	addwf	_eusartTxTail,f	;volatile
  8104  0E7A                     i1l3203:
  8105                           
  8106                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8107  0E7A  3008               	movlw	8
  8108  0E7B  0257               	subwf	_eusartTxTail,w	;volatile
  8109  0E7C  1C03               	skipc
  8110  0E7D  2E7F               	goto	u154_21
  8111  0E7E  2E80               	goto	u154_20
  8112  0E7F                     u154_21:
  8113  0E7F  2E81               	goto	i1l3207
  8114  0E80                     u154_20:
  8115  0E80                     i1l3205:
  8116                           
  8117                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  8118  0E80  01D7               	clrf	_eusartTxTail	;volatile
  8119  0E81                     i1l3207:
  8120                           
  8121                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  8122  0E81  3001               	movlw	1
  8123  0E82  00F0               	movwf	??_EUSART_Transmit_ISR
  8124  0E83  0870               	movf	??_EUSART_Transmit_ISR,w
  8125  0E84  07D6               	addwf	_eusartTxBufferRemaining,f	;volatile
  8126                           
  8127                           ;mcc_generated_files/eusart.c: 209:     }
  8128  0E85  2E88               	goto	i1l193
  8129  0E86                     i1l190:	
  8130                           ;mcc_generated_files/eusart.c: 210:     else
  8131                           
  8132                           
  8133                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  8134  0E86  0021               	movlb	1	; select bank1
  8135  0E87  1211               	bcf	17,4	;volatile
  8136  0E88                     i1l193:
  8137  0E88  0008               	return
  8138  0E89                     __end_of_EUSART_Transmit_ISR:
  8139                           
  8140                           	psect	text43
  8141  0F87                     __ptext43:	
  8142 ;; *************** function _EUSART_Receive_ISR *****************
  8143 ;; Defined at:
  8144 ;;		line 216 in file "mcc_generated_files/eusart.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;		None
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      void 
  8151 ;; Registers used:
  8152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8158 ;;      Params:         0       0       0       0       0       0
  8159 ;;      Locals:         0       0       0       0       0       0
  8160 ;;      Temps:          0       0       0       0       0       0
  8161 ;;      Totals:         0       0       0       0       0       0
  8162 ;;Total ram usage:        0 bytes
  8163 ;; Hardware stack levels used: 1
  8164 ;; Hardware stack levels required when called: 2
  8165 ;; This function calls:
  8166 ;;		Absolute function
  8167 ;;		_EUSART_DefaultErrorHandler
  8168 ;;		_EUSART_DefaultFramingErrorHandler
  8169 ;;		_EUSART_DefaultOverrunErrorHandler
  8170 ;;		_EUSART_RxDataHandler
  8171 ;; This function is called by:
  8172 ;;		_EUSART_Initialize
  8173 ;;		_INTERRUPT_InterruptManager
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _EUSART_Receive_ISR
  8179  0F87                     _EUSART_Receive_ISR:
  8180  0F87                     i1l3209:	
  8181                           ;incstack = 0
  8182                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8183                           
  8184                           
  8185                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8186  0F87  087C               	movf	_eusartRxHead,w	;volatile
  8187  0F88  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8188  0F89  0086               	movwf	6
  8189  0F8A  0187               	clrf	7
  8190  0F8B  0181               	clrf	1
  8191  0F8C                     i1l3211:
  8192                           
  8193                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  8194  0F8C  0023               	movlb	3	; select bank3
  8195  0F8D  1D1D               	btfss	29,2	;volatile
  8196  0F8E  2F90               	goto	u155_21
  8197  0F8F  2F91               	goto	u155_20
  8198  0F90                     u155_21:
  8199  0F90  2F9C               	goto	i1l3217
  8200  0F91                     u155_20:
  8201  0F91                     i1l3213:
  8202                           
  8203                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8204  0F91  087C               	movf	_eusartRxHead,w	;volatile
  8205  0F92  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8206  0F93  0086               	movwf	6
  8207  0F94  0187               	clrf	7
  8208  0F95  1481               	bsf	1,1
  8209  0F96                     i1l3215:
  8210                           
  8211                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  8212  0F96  0020               	movlb	0	; select bank0
  8213  0F97  0841               	movf	_EUSART_FramingErrorHandler+1,w
  8214  0F98  008A               	movwf	10
  8215  0F99  0840               	movf	_EUSART_FramingErrorHandler,w
  8216  0F9A  000A               	callw
  8217  0F9B  318F               	pagesel	$
  8218  0F9C                     i1l3217:
  8219                           
  8220                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  8221  0F9C  0023               	movlb	3	; select bank3
  8222  0F9D  1C9D               	btfss	29,1	;volatile
  8223  0F9E  2FA0               	goto	u156_21
  8224  0F9F  2FA1               	goto	u156_20
  8225  0FA0                     u156_21:
  8226  0FA0  2FAC               	goto	i1l3223
  8227  0FA1                     u156_20:
  8228  0FA1                     i1l3219:
  8229                           
  8230                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8231  0FA1  087C               	movf	_eusartRxHead,w	;volatile
  8232  0FA2  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8233  0FA3  0086               	movwf	6
  8234  0FA4  0187               	clrf	7
  8235  0FA5  1501               	bsf	1,2
  8236  0FA6                     i1l3221:
  8237                           
  8238                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  8239  0FA6  0020               	movlb	0	; select bank0
  8240  0FA7  083F               	movf	_EUSART_OverrunErrorHandler+1,w
  8241  0FA8  008A               	movwf	10
  8242  0FA9  083E               	movf	_EUSART_OverrunErrorHandler,w
  8243  0FAA  000A               	callw
  8244  0FAB  318F               	pagesel	$
  8245  0FAC                     i1l3223:
  8246                           
  8247                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8248  0FAC  087C               	movf	_eusartRxHead,w	;volatile
  8249  0FAD  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8250  0FAE  0086               	movwf	6
  8251  0FAF  0187               	clrf	7
  8252  0FB0  0801               	movf	1,w
  8253  0FB1  1903               	btfsc	3,2
  8254  0FB2  2FB4               	goto	u157_21
  8255  0FB3  2FB5               	goto	u157_20
  8256  0FB4                     u157_21:
  8257  0FB4  2FBC               	goto	i1l3227
  8258  0FB5                     u157_20:
  8259  0FB5                     i1l3225:
  8260                           
  8261                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  8262  0FB5  0020               	movlb	0	; select bank0
  8263  0FB6  083D               	movf	_EUSART_ErrorHandler+1,w
  8264  0FB7  008A               	movwf	10
  8265  0FB8  083C               	movf	_EUSART_ErrorHandler,w
  8266  0FB9  000A               	callw
  8267  0FBA  318F               	pagesel	$
  8268                           
  8269                           ;mcc_generated_files/eusart.c: 233:     } else {
  8270  0FBB  2FBF               	goto	i1l200
  8271  0FBC                     i1l3227:
  8272                           
  8273                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  8274  0FBC  318D  25D9  318F   	fcall	_EUSART_RxDataHandler
  8275  0FBF                     i1l200:
  8276  0FBF  0008               	return
  8277  0FC0                     __end_of_EUSART_Receive_ISR:
  8278                           
  8279                           	psect	text44
  8280  0CE3                     __ptext44:	
  8281 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  8282 ;; Defined at:
  8283 ;;		line 252 in file "mcc_generated_files/eusart.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  1    wreg      void 
  8290 ;; Registers used:
  8291 ;;		None
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8297 ;;      Params:         0       0       0       0       0       0
  8298 ;;      Locals:         0       0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0
  8300 ;;      Totals:         0       0       0       0       0       0
  8301 ;;Total ram usage:        0 bytes
  8302 ;; Hardware stack levels used: 1
  8303 ;; This function calls:
  8304 ;;		Nothing
  8305 ;; This function is called by:
  8306 ;;		_EUSART_Initialize
  8307 ;;		_EUSART_Receive_ISR
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  8313  0CE3                     _EUSART_DefaultOverrunErrorHandler:
  8314  0CE3                     i1l3085:	
  8315                           ;incstack = 0
  8316                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  8317                           
  8318                           
  8319                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  8320  0CE3  0023               	movlb	3	; select bank3
  8321  0CE4  121D               	bcf	29,4	;volatile
  8322                           
  8323                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  8324  0CE5  161D               	bsf	29,4	;volatile
  8325  0CE6                     i1l210:
  8326  0CE6  0008               	return
  8327  0CE7                     __end_of_EUSART_DefaultOverrunErrorHandler:
  8328                           
  8329                           	psect	text45
  8330  0CD7                     __ptext45:	
  8331 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  8332 ;; Defined at:
  8333 ;;		line 250 in file "mcc_generated_files/eusart.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;		None
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		None
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8347 ;;      Params:         0       0       0       0       0       0
  8348 ;;      Locals:         0       0       0       0       0       0
  8349 ;;      Temps:          0       0       0       0       0       0
  8350 ;;      Totals:         0       0       0       0       0       0
  8351 ;;Total ram usage:        0 bytes
  8352 ;; Hardware stack levels used: 1
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_EUSART_Initialize
  8357 ;;		_EUSART_Receive_ISR
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function _EUSART_DefaultFramingErrorHandler
  8363  0CD7                     _EUSART_DefaultFramingErrorHandler:
  8364  0CD7                     i1l207:	
  8365                           ;incstack = 0
  8366                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  8367                           
  8368  0CD7  0008               	return
  8369  0CD8                     __end_of_EUSART_DefaultFramingErrorHandler:
  8370                           
  8371                           	psect	text46
  8372  0CDF                     __ptext46:	
  8373 ;; *************** function _EUSART_DefaultErrorHandler *****************
  8374 ;; Defined at:
  8375 ;;		line 260 in file "mcc_generated_files/eusart.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;		None
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  1    wreg      void 
  8382 ;; Registers used:
  8383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8389 ;;      Params:         0       0       0       0       0       0
  8390 ;;      Locals:         0       0       0       0       0       0
  8391 ;;      Temps:          0       0       0       0       0       0
  8392 ;;      Totals:         0       0       0       0       0       0
  8393 ;;Total ram usage:        0 bytes
  8394 ;; Hardware stack levels used: 1
  8395 ;; Hardware stack levels required when called: 1
  8396 ;; This function calls:
  8397 ;;		_EUSART_RxDataHandler
  8398 ;; This function is called by:
  8399 ;;		_EUSART_Initialize
  8400 ;;		_EUSART_Receive_ISR
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           
  8405                           ;psect for function _EUSART_DefaultErrorHandler
  8406  0CDF                     _EUSART_DefaultErrorHandler:
  8407  0CDF                     i1l3087:	
  8408                           ;incstack = 0
  8409                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8410                           
  8411                           
  8412                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  8413  0CDF  318D  25D9  318C   	fcall	_EUSART_RxDataHandler
  8414  0CE2                     i1l213:
  8415  0CE2  0008               	return
  8416  0CE3                     __end_of_EUSART_DefaultErrorHandler:
  8417                           
  8418                           	psect	text47
  8419  0DD9                     __ptext47:	
  8420 ;; *************** function _EUSART_RxDataHandler *****************
  8421 ;; Defined at:
  8422 ;;		line 240 in file "mcc_generated_files/eusart.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;		None
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8436 ;;      Params:         0       0       0       0       0       0
  8437 ;;      Locals:         0       0       0       0       0       0
  8438 ;;      Temps:          1       0       0       0       0       0
  8439 ;;      Totals:         1       0       0       0       0       0
  8440 ;;Total ram usage:        1 bytes
  8441 ;; Hardware stack levels used: 1
  8442 ;; This function calls:
  8443 ;;		Nothing
  8444 ;; This function is called by:
  8445 ;;		_EUSART_Receive_ISR
  8446 ;;		_EUSART_DefaultErrorHandler
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function _EUSART_RxDataHandler
  8452  0DD9                     _EUSART_RxDataHandler:
  8453  0DD9                     i1l2949:	
  8454                           ;incstack = 0
  8455                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  8456                           
  8457                           
  8458                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  8459  0DD9  0023               	movlb	3	; select bank3
  8460  0DDA  0819               	movf	25,w	;volatile
  8461  0DDB  00F0               	movwf	??_EUSART_RxDataHandler
  8462  0DDC  087C               	movf	_eusartRxHead,w
  8463  0DDD  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8464  0DDE  0086               	movwf	6
  8465  0DDF  0187               	clrf	7
  8466  0DE0  0870               	movf	??_EUSART_RxDataHandler,w
  8467  0DE1  0081               	movwf	1
  8468  0DE2                     i1l2951:
  8469  0DE2  3001               	movlw	1
  8470  0DE3  00F0               	movwf	??_EUSART_RxDataHandler
  8471  0DE4  0870               	movf	??_EUSART_RxDataHandler,w
  8472  0DE5  07FC               	addwf	_eusartRxHead,f	;volatile
  8473  0DE6                     i1l2953:
  8474                           
  8475                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8476  0DE6  3008               	movlw	8
  8477  0DE7  027C               	subwf	_eusartRxHead,w	;volatile
  8478  0DE8  1C03               	skipc
  8479  0DE9  2DEB               	goto	u125_21
  8480  0DEA  2DEC               	goto	u125_20
  8481  0DEB                     u125_21:
  8482  0DEB  2DED               	goto	i1l2957
  8483  0DEC                     u125_20:
  8484  0DEC                     i1l2955:
  8485                           
  8486                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  8487  0DEC  01FC               	clrf	_eusartRxHead	;volatile
  8488  0DED                     i1l2957:
  8489                           
  8490                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  8491  0DED  3001               	movlw	1
  8492  0DEE  00F0               	movwf	??_EUSART_RxDataHandler
  8493  0DEF  0870               	movf	??_EUSART_RxDataHandler,w
  8494  0DF0  0020               	movlb	0	; select bank0
  8495  0DF1  07D4               	addwf	_eusartRxCount,f	;volatile
  8496  0DF2                     i1l204:
  8497  0DF2  0008               	return
  8498  0DF3                     __end_of_EUSART_RxDataHandler:
  8499  007E                     btemp	set	126	;btemp
  8500  007E                     int$flags	set	126
  8501  007E                     wtemp0	set	126
  8502  20EF                     
  8503                           	psect	idloc
  8504                           
  8505                           ;Config register IDLOC0 @ 0x8000
  8506                           ;	unspecified, using default values
  8507  8000                     	org	32768
  8508  8000  3FFF               	dw	16383
  8509                           
  8510                           ;Config register IDLOC1 @ 0x8001
  8511                           ;	unspecified, using default values
  8512  8001                     	org	32769
  8513  8001  3FFF               	dw	16383
  8514                           
  8515                           ;Config register IDLOC2 @ 0x8002
  8516                           ;	unspecified, using default values
  8517  8002                     	org	32770
  8518  8002  3FFF               	dw	16383
  8519                           
  8520                           ;Config register IDLOC3 @ 0x8003
  8521                           ;	unspecified, using default values
  8522  8003                     	org	32771
  8523  8003  3FFF               	dw	16383
  8524                           
  8525                           	psect	config
  8526                           
  8527                           ;Config register CONFIG1 @ 0x8007
  8528                           ;	Oscillator Selection
  8529                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8530                           ;	Watchdog Timer Enable
  8531                           ;	WDTE = OFF, WDT disabled
  8532                           ;	Power-up Timer Enable
  8533                           ;	PWRTE = OFF, PWRT disabled
  8534                           ;	MCLR Pin Function Select
  8535                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  8536                           ;	Flash Program Memory Code Protection
  8537                           ;	CP = OFF, Program memory code protection is disabled
  8538                           ;	Data Memory Code Protection
  8539                           ;	CPD = OFF, Data memory code protection is disabled
  8540                           ;	Brown-out Reset Enable
  8541                           ;	BOREN = ON, Brown-out Reset enabled
  8542                           ;	Clock Out Enable
  8543                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8544                           ;	Internal/External Switchover
  8545                           ;	IESO = ON, Internal/External Switchover mode is enabled
  8546                           ;	Fail-Safe Clock Monitor Enable
  8547                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8548  8007                     	org	32775
  8549  8007  3FE4               	dw	16356
  8550                           
  8551                           ;Config register CONFIG2 @ 0x8008
  8552                           ;	Flash Memory Self-Write Protection
  8553                           ;	WRT = OFF, Write protection off
  8554                           ;	PLL Enable
  8555                           ;	PLLEN = ON, 4x PLL enabled
  8556                           ;	Stack Overflow/Underflow Reset Enable
  8557                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  8558                           ;	Brown-out Reset Voltage Selection
  8559                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  8560                           ;	Low-Voltage Programming Enable
  8561                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8562  8008                     	org	32776
  8563  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         92
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     21      80
    BANK1            80      0      34
    BANK2            79      0       0
    BANK3             0      0       0
    BANK4             0      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    save_pw@pw	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    compare_pw@pw	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    send_msg_stopping@msg	PTR unsigned char  size(2) Largest target is 4096
		 -> send_stat@status_protocol(BANK0[2]), RAM(DATA[4096]), send_dat@var(COMMON[1]), send_dat@len(COMMON[1]), 
		 -> send_dat@control_byte(COMMON[1]), send_req@request_protocol(BANK0[3]), send_cmd@command_protocol(COMMON[3]), 

    del_array@array	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_up(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_up(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _send_stat->_send_msg_stopping
    _send_req->_send_msg_stopping
    _send_msg_stopping->_EUSART_Write
    _save_pw->_DATAEE_WriteByte
    _save_hall_codes->_DATAEE_WriteByte
    _read_hall_codes->_DATAEE_ReadByte
    _door_status_changed->___awdiv
    ___awdiv->___wmul
    _compare_pw->_DATAEE_ReadByte
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_door_status_changed
    _door_status_changed->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   11786
                                             11 BANK0     10    10      0
            _ADC_GetConversionResult
                     _ADC_Initialize
               _ADC_IsConversionDone
                _ADC_StartConversion
                  _EUSART_Initialize
                        _EUSART_Read
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                    _TMR2_Initialize
           _TMR2_SetInterruptHandler
                         _compare_pw
                _door_status_changed
                    _read_hall_codes
                    _save_hall_codes
                            _save_pw
                  _seek_confirmation
                           _send_req
                          _send_stat
                           _stop_cmd
                 _wait_for_requested
 ---------------------------------------------------------------------------------
 (1) _wait_for_requested                                   2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _stop_cmd                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_stat                                            4     4      0    1740
                                              9 COMMON     1     1      0
                                              0 BANK0      3     3      0
                  _send_msg_stopping
 ---------------------------------------------------------------------------------
 (1) _send_req                                             5     5      0    2121
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                          _del_array
                  _send_msg_stopping
 ---------------------------------------------------------------------------------
 (2) _send_msg_stopping                                    6     3      3    1632
                                              3 COMMON     6     3      3
                       _EUSART_Write
                  _EUSART_is_tx_done
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _del_array                                            7     3      4     242
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _seek_confirmation                                   10     2      8    1304
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _save_pw                                              6     3      3     768
                                              4 COMMON     6     3      3
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _save_hall_codes                                      3     2      1     558
                                              4 COMMON     3     2      1
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     372
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _read_hall_codes                                      1     1      0      22
                                              2 COMMON     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (1) _door_status_changed                                  7     5      2    2356
                                              4 BANK0      7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _compare_pw                                           9     6      3     706
                                              2 COMMON     9     6      3
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0       0
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR2_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                           _timer_up *
 ---------------------------------------------------------------------------------
 (7) _timer_up                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_Initialize
   _ADC_IsConversionDone
   _ADC_StartConversion
   _EUSART_Initialize
     _EUSART_SetErrorHandler
     _EUSART_SetFramingErrorHandler
     _EUSART_SetOverrunErrorHandler
     _EUSART_SetRxInterruptHandler
     _EUSART_SetTxInterruptHandler
   _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _TMR2_Initialize
   _TMR2_SetInterruptHandler
   _compare_pw
     _DATAEE_ReadByte
   _door_status_changed
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _read_hall_codes
     _DATAEE_ReadByte
   _save_hall_codes
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _save_pw
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _seek_confirmation
   _send_req
     _del_array
     _send_msg_stopping
       _EUSART_Write
       _EUSART_is_tx_done
   _send_stat
     _send_msg_stopping
   _stop_cmd
   _wait_for_requested

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _timer_up *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      22       8       42.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               4F      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      7F      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 01 23:44:51 2022

                ?_EUSART_SetRxInterruptHandler 0071               __end_of_TMR2_SetInterruptHandler 0D13  
                                           l31 0D36                                             l25 07FF  
                                           l34 0CEA                                             l28 0D31  
                                           l80 0E41                                             l81 0E47  
                                           l84 0D42                                             l78 0E3D  
                                 ___awdiv@sign 005A                            ___wmul@multiplicand 0073  
                                          l310 0CDB                                            l222 0CF4  
                                          l304 0CDE                                            l216 0CFA  
                                          l225 0D0C                                            l307 0D19  
                                          l219 0D00                                            l228 0D06  
                                          l165 0D2A                                            l253 0DC0  
                                          l342 0D7E                                            l159 0FFF  
                                          l183 0F05                                            l184 0F0E  
                                          l168 0CEE                                            l178 0EFD  
                                          l370 0D12                                            l187 0F27  
                                          l531 031D                                            l534 0305  
                                          l607 056A                                            l705 06C1  
                                          l625 0E29                                            l298 0D21  
                                          l634 0ED3                                            l546 0569  
                                          l660 07DE                                            l644 0F86  
                                          l548 0368                                            l477 00C1  
                                          l494 0186                                            l655 0DD8  
                                          l479 00B5                                            l664 07EC  
                                          l680 0EAC                                            l672 07AC  
                                          l578 0451                                            l675 0D6C  
                                          l861 0E52                                            l693 0E0C  
                                          l686 0F56                                            l598 04EB  
                                          l863 0E66                                            l696 0D93  
                                          _PR2 001B                         ??_EUSART_RxDataHandler 0070  
                                          _cmd 004F                 ?_EUSART_SetFramingErrorHandler 0071  
                              _TMR2_Initialize 0D6D                                            wreg 0009  
                                 ?_EUSART_Read 0070                                           l1014 0721  
                                         l3001 0D6D                                           l3011 0D7B  
                                         l3003 0D70                                           l3013 0D1A  
                                         l3021 0FC2                                           l3005 0D71  
                                         l3015 0D1D                                           l3031 0FD9  
                                         l3023 0FC9                                           l3007 0D72  
                                         l3017 0D1E                                           l3041 0FF2  
                                         l3033 0FDB                                           l3025 0FD2  
                                         l3009 0D74                                           l3043 0FF4  
                                         l3035 0FDD                                           l3027 0FD5  
                                         l3019 0FC0                                           l3051 0E2B  
                                         l3045 0FF5                                           l3037 0FE4  
                                         l3029 0FD7                                           l3061 0E32  
                                         l3053 0E2B                                           l3047 0FF6  
                                         l3039 0FEB                                           l3071 0D38  
                                         l3063 0E33                                           l3055 0E2E  
                                         l3303 0F3D                                           l3049 0FFD  
                                         l3081 0D3F                                           l3073 0D3B  
                                         l3065 0E37                                           l3057 0E30  
                                         l3305 0F51                                           l3321 0E09  
                                         l3243 0CD9                                           l3171 0D22  
                                         l3075 0D3C                                           l3331 07AF  
                                         l3067 0E3C                                           l3059 0E31  
                                         l3307 0F56                                           l3251 0D90  
                                         l3237 0CDC                                           l3181 0EEA  
                                         l3077 0D3D                                           l3341 07C9  
                                         l3333 07B6                                           l4301 06C4  
                                         l3069 0E42                                           l3093 0E0D  
                                         l3253 0D92                                           l3325 0E0B  
                                         l3317 0DF4                                           l3239 0D13  
                                         l3191 0EFA                                           l3183 0EEE  
                                         l3175 0ED4                                           l3079 0D3E  
                                         l3343 07D3                                           l3335 07BC  
                                         l4311 06D8                                           l4303 06C8  
                                         l3247 0D5C                                           l3095 0E10  
                                         l3319 0DFC                                           l3193 0EFC  
                                         l3185 0EF4                                           l3177 0ED4  
                                         l3169 07ED                                           l3337 07BE  
                                         l3329 07AD                                           l4321 06EC  
                                         l4313 06DC                                           l4305 06CD  
                                         l3361 078C                                           l3353 0768  
                                         l3097 0E17                                           l3249 0D7F  
                                         l4401 0077                                           l3187 0EF5  
                                         l3179 0EDA                                           l3347 07DA  
                                         l3339 07C1                                           l4331 0708  
                                         l4323 06F0                                           l4315 06DE  
                                         l4307 06CF                                           l3371 0E9B  
                                         l3363 079B                                           l3355 0771  
                                         l3283 0F2E                                           l3099 0E1B  
                                         l4411 008D                                           l4403 0078  
                                         l3189 0EF7                                           l3349 07EB  
                                         l4333 070D                                           l4325 06F4  
                                         l4317 06E4                                           l4309 06D3  
                                         l3373 0EA4                                           l3365 079F  
                                         l3357 0779                                           l4261 0F0A  
                                         l4253 0CEB                                           l4501 020C  
                                         l4421 00B8                                           l4413 0093  
                                         l4405 007B                                           l4327 0703  
                                         l4319 06E7                                           l4335 0713  
                                         l3367 0E8A                                           l3359 077C  
                                         l3295 0F38                                           l3279 0F28  
                                         l4271 0F23                                           l4263 0F0F  
                                         l4351 0F59                                           l4343 0DC3  
                                         l5231 02CE                                           l4511 0228  
                                         l4503 0212                                           l4431 0105  
                                         l4423 00C6                                           l4415 0098  
                                         l4407 0082                                           l2921 0CF5  
                                         l4337 0718                                           l4329 0707  
                                         l3369 0E93                                           l3289 0F33  
                                         l4265 0F18                                           l4273 0F25  
                                         l4257 0EFF                                           l4281 0EC2  
                                         l4361 0F74                                           l4353 0F64  
                                         l4345 0DC5                                           l5241 052C  
                                         l4601 0345                                           l5233 0318  
                                         l4521 023E                                           l4513 022D  
                                         l4505 021B                                           l4441 0138  
                                         l4433 0108                                           l4425 00CD  
                                         l4417 00AA                                           l4409 0085  
                                         l2923 0CFB                                           l4339 071D  
                                         l4291 0E57                                           l4371 05ED  
                                         l4267 0F1C                                           l4259 0EFF  
                                         l4283 0EC6                                           l4275 0EAD  
                                         l4363 0F79                                           l4355 0F6B  
                                         l4347 0DC9                                           l5243 054E  
                                         l4611 0377                                           l4603 034E  
                                         l5235 0340                                           l4531 025E  
                                         l4523 0243                                           l4515 0230  
                                         l4451 0163                                           l4443 0140  
                                         l4435 011A                                           l4427 00DE  
                                         l4419 00B0                                           l2925 0CEF  
                                         l2917 0D01                                           l4293 0E5C  
                                         l4285 0E48                                           l4373 061B  
                                         l4381 0654                                           l4269 0F22  
                                         l4277 0EB0                                           l4365 0F84  
                                         l4357 0F6F                                           l4349 0DCD  
                                         l5245 0561                                           l5237 0403  
                                         l4621 03B4                                           l4613 038F  
                                         l4605 0358                                           l5229 02A1  
                                         l4541 0284                                           l4533 0264  
                                         l4525 0247                                           l4517 0234  
                                         l4509 0222                                           l4461 017C  
                                         l4453 0166                                           l4445 0151  
                                         l4437 0131                                           l4429 00F5  
                                         l2919 0D07                                           l4295 0E62  
                                         l4287 0E4A                                           l4383 065A  
                                         l4375 0622                                           l4367 05E2  
                                         l4279 0EB8                                           l4359 0F73  
                                         l5247 05D0                                           l4711 04C0  
                                         l4703 04AF                                           l5239 0468  
                                         l4631 03DA                                           l4623 03B8  
                                         l4615 0398                                           l4607 036D  
                                         l4543 0289                                           l4535 0269  
                                         l4527 024E                                           l4519 0238  
                                         l4471 01AB                                           l4463 0182  
                                         l4455 016C                                           l4447 0159  
                                         l4439 0135                                           l4289 0E4E  
                                         l4385 0688                                           l4393 06C0  
                                         l4377 0652                                           l4369 05E7  
                                         l5249 0F46                                           l4801 05C3  
                                         l4721 04DF                                           l4713 04C9  
                                         l4633 03E3                                           l4625 03BC  
                                         l4617 03AE                                           l4609 0371  
                                         l4561 02BD                                           l4545 028F  
                                         l4537 026D                                           l4529 0259  
                                         l4553 0299                                           l4481 01C2  
                                         l4473 01AF                                           l4465 018B  
                                         l4457 0171                                           l4449 015D  
                                         l4299 06C2                                           l4387 068F  
                                         l4803 05C4                                           l4723 04E6  
                                         l4715 04CC                                           l4707 04B4  
                                         l4643 03FE                                           l4547 0294  
                                         l4539 0279                                           l4555 02AF  
                                         l4491 01F3                                           l4483 01CC  
                                         l4475 01B4                                           l4467 0198  
                                         l4459 0177                                           l4571 02F2  
                                         l2981 0DB5                                           l2973 0DAA  
                                         l4741 050C                                           l4717 04D1  
                                         l4709 04BC                                           l4661 0436  
                                         l4653 0428                                           l4645 041A  
                                         l4637 03F9                                           l4629 03C1  
                                         l4581 0308                                           l4557 02B4  
                                         l4493 01FE                                           l4485 01D1  
                                         l4477 01BA                                           l4469 01A5  
                                         l4565 02C6                                           l4397 006A  
                                         l2991 0DBF                                           l2983 0DB7  
                                         l2975 0DAD                                           l2959 0D0D  
                                         l4751 0520                                           l4743 0515  
                                         l4735 04F9                                           l4727 04EF  
                                         l4719 04D7                                           l4671 045E  
                                         l4663 044C                                           l4647 041F  
                                         l4591 0327                                           l4575 02F8  
                                         l4559 02B5                                           l4495 01FF  
                                         l4487 01DC                                           l4479 01BE  
                                         l4567 02E8                                           l4399 0076  
                                         l2993 0D2B                                           l2985 0DBA  
                                         l2977 0DB0                                           l4753 0522  
                                         l4745 0518                                           l4737 0501  
                                         l4665 0454                                           l4649 0423  
                                         l4809 05C7                                           l4593 032C  
                                         l4577 02FD                                           l4585 030F  
                                         l4569 02ED                                           l4489 01EF  
                                         l2995 0D2E                                           l2987 0DBB  
                                         l2979 0DB2                                           l4763 0527  
                                         l4747 051B                                           l4739 0508  
                                         l4691 049F                                           l4667 0459  
                                         l4659 042D                                           l4595 0330  
                                         l4771 0559                                           l4579 0300  
                                         l4499 0204                                           l2997 0D2F  
                                         l2989 0DBD                                           l4781 057B  
                                         l4773 056C                                           l4749 051E  
                                         l4693 04A1                                           l4685 047B  
                                         l4677 0463                                           l4589 0322  
                                         l2999 0CE7                                           l4791 059F  
                                         l4783 0583                                           l4775 0570  
                                         l4695 04A3                                           l4687 0484  
                                         l4679 0476                                           l4767 0546  
                                         l4599 0337                                           l4793 05A7  
                                         l4785 0589                                           l4777 0573  
                                         l4697 04A7                                           l4689 049A  
                                         l4795 05AD                                           l4787 0599  
                                         l4779 0577                                           l4699 04AA  
                                         l4797 05BD                                           l4799 05C1  
                                         u1300 0E41                                           u1301 0E40  
                                         u1320 0E29                                           u3000 044C  
                                         u1321 0E28                                           u3001 044B  
                                         u3010 0451                                           u3011 0450  
                                         u1500 0D2A                                           u3100 0501  
                                         u3020 0484                                           u1325 0E25  
                                         u3101 0500                                           u3021 0483  
                                         _LATA 010C                                           u1510 0EDA  
                                         u3110 0583                                           u3030 049A  
                                         _LATB 010D                                           u1511 0ED9  
                                         u3111 0582                                           u3031 0499  
                                         u1520 0EF4                                           u2400 0EB8  
                                         u1600 0DFC                                           u3120 0599  
                                         u3040 049F                                           u1521 0EF3  
                                         u2401 0EB7                                           u1601 0DFB  
                                         u3121 0598                                           u3041 049E  
                                         u1290 0D36                                           u2410 0ED3  
                                         u1610 0E09                                           u3130 05A7  
                                         u3050 04C0                                           u1291 0D35  
                                         u2411 0ED2                                           u1611 0E08  
                                         u3131 05A6                                           u3051 04BF  
                                         u1620 07BC                                           u2500 06F4  
                                         u2420 0E4E                                           u3140 05BD  
                                         u3060 04C9                                           u1621 07BB  
                                         u2501 06F3                                           u2421 0E4D  
                                         u3141 05BC                                           u3061 04C8  
                                         u1630 07D9                                           u3070 04DF  
                                         u1631 07D8                                           u2415 0ECF  
                                         u3071 04DE                                           u1640 07EB  
                                         u2520 0703                                           u2600 0652  
                                         u3080 04EF                                           u1641 07EA  
                                         u2521 0702                                           u2601 0651  
                                         u3081 04EE                                           u1490 0D29  
                                         u2450 0E62                                           u2610 065A  
                                         u1650 0771                                           u2370 0F05  
                                         u3090 04F8                                           u1491 0D27  
                                         u2515 06F5                                           u2451 0E61  
                                         u2435 0E53                                           u2611 0659  
                                         u1651 0770                                           u2371 0F04  
                                         u3091 04F7                                           u2540 0713  
                                         u2460 06C8                                           u2620 0688  
                                         u1660 078C                                           u2380 0F0A  
                                         u2700 00F5                                           u1645 07E7  
                                         u2541 0712                                           u2525 06FF  
                                         u2461 06C7                                           u2445 0E58  
                                         u2621 0687                                           u2605 064E  
                                         u1661 078B                                           u2381 0F09  
                                         u2701 00F4                                           u2550 0718  
                                         u2470 06D3                                           u2630 068F  
                                         u1670 07AC                                           u1590 0F2D  
                                         u2390 0F22                                           u2710 011A  
                                         u2551 0717                                           u2535 0709  
                                         u2471 06D2                                           u2631 068E  
                                         u1671 07AB                                           u1591 0F2C  
                                         u2391 0F21                                           u2711 0119  
                                         u2703 00F1                                           u2480 06E4  
                                         u2640 06BF                                           u2560 05E7  
                                         u1680 0E93                                           u2800 01FE  
                                         u2720 0131                                           u2481 06E3  
                                         u2641 06BE                                           u2625 0684  
                                         u2561 05E6                                           u1681 0E92  
                                         u2801 01FD                                           u2721 0130  
                                         u2570 05ED                                           u1690 0EA4  
                                         u2810 0221                                           u2730 0140  
                                         u2650 0093                                           u2571 05EC  
                                         u1691 0EA3                                           u1675 07A8  
                                         u2811 0220                                           u2731 013F  
                                         u2723 012D                                           u2651 0092  
                                         u2580 061B                                           u2900 02FD  
                                         u2820 0228                                           u2740 0163  
                                         u2660 0098                                           u2645 06BB  
                                         u2581 061A                                           u2901 02FC  
                                         u2821 0227                                           u2741 0162  
                                         u2661 0097                                           u2590 0622  
                                         u2910 0321                                           u2830 023E  
                                         u2750 016C                                           u2670 00AA  
                                         u2495 06E8                                           u2591 0621  
                                         u2911 0320                                           u2831 023D  
                                         u2751 016B                                           u2671 00A9  
                                         u2920 0327                                           u2840 0259  
                                         u2760 0177                                           u2680 00B0  
                                         u2585 0617                                           u2921 0326  
                                         u2841 0258                                           u2761 0176  
                                         u2681 00AF                                           u2930 0358  
                                         u2850 0264                                           u2770 0182  
                                         u2690 00DE                                           u2931 0357  
                                         u2851 0263                                           u2771 0181  
                                         u2691 00DD                                           u2940 0398  
                                         u2860 0284                                           u2780 01CC  
                                         u2941 0397                                           u2861 0283  
                                         u2781 01CB                                           u2950 03AE  
                                         u2870 028F                                           u2790 01DC  
                                         u2951 03AD                                           u2935 0354  
                                         u2871 028E                                           u2791 01DB  
                                         u2960 03B3                                           u2880 02ED  
                                         u2961 03B2                                           u2881 02EC  
                                         u2970 03E3                                           u2890 02F7  
                                         u2971 03E2                                           u2891 02F6  
                                         u2980 041F                                           u2981 041E  
                                         u2990 0436                                           u2991 0435  
                                         _PLLR 04D6                                           _TMR2 001A  
                                  main@res_914 006B                                           _WPUA 020C  
                                         _WPUB 020D                                           _main 006A  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                           start 003A  
                                  compare_pw@x 0079                              ??_read_hall_codes 0072  
                    __size_of_DATAEE_WriteByte 001E                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 000C                  __end_of_OSCILLATOR_Initialize 0D37  
                                        ?_main 0070                                __end_of___awdiv 0722  
                              ___awdiv@divisor 0077                                          _T2CON 001C  
                                        i1l200 0FBF                                          i1l210 0CE6  
                                        i1l204 0DF2                                          i1l213 0CE2  
                                        i1l207 0CD7                                          i1l190 0E86  
                                        i1l193 0E88                                          i1l281 0038  
                                        i1l274 001A                                          i1l363 0DA9  
                                        i1l275 0038                                          i1l276 002A  
                                        i1l373 0CD8                                          i1l471 0767  
                                        i1l367 0D5B                                ___awdiv@counter 0059  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TXREG 019A                                          _TXSTA 019E  
             __size_of_ADC_GetConversionResult 0003                             _wait_for_requested 0DF3  
                            _receive_timer_len 0028                               __end_of_TMR2_ISR 0DAA  
                     __size_of_save_hall_codes 0024                                _DATAEE_ReadByte 0D37  
                               _WDT_Initialize 0CE7                        main@old_cmd_exe_counter 0032  
                              __end_of_save_pw 07AD                            ?_wait_for_requested 0070  
                                        pclath 000A                                          status 0003  
                                 compare_pw@pw 0072                                          wtemp0 007E  
                               send_stat@F3032 0030                                __initialization 003C  
                                 __end_of_main 05E0                                 ??_EUSART_Write 0071  
                         ??_wait_for_requested 0071                        __end_of_TMR2_Initialize 0D7F  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0073  
                     _TMR2_SetInterruptHandler 0D0D                                         ??_main 0064  
                       __end_of_WDT_Initialize 0CEB                  __size_of_ADC_IsConversionDone 0007  
    __end_of_EUSART_DefaultFramingErrorHandler 0CD8     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0CD7                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 003E  
                                       _ADRESH 009C                                         _EEADRH 0192  
                                       _ADRESL 009B                                         _EEADRL 0191  
                                       _EEDATH 0194                                         _EEDATL 0193  
                                       _EECON2 0196                               ___awdiv@dividend 0079  
                                       _ANSELA 018C                                         _ANSELB 018D  
                   __end_of_EUSART_is_rx_ready 0D2B                                         _BORCON 0116  
                                       i1l3201 0E75                                         i1l3211 0F8C  
                                       i1l3203 0E7A                                         i1l3221 0FA6  
                                       i1l3213 0F91                                         i1l3205 0E80  
                                       i1l3223 0FAC                                         i1l3215 0F96  
                                       i1l3207 0E81                                         i1l3231 0D96  
                                       i1l3225 0FB5                                         i1l3217 0F9C  
                                       i1l3209 0F87                                         i1l3233 0DA3  
                                       i1l3227 0FBC                                         i1l3219 0FA1  
                                       i1l3091 0D56                                         i1l3235 0DA6  
                                       i1l3411 0014                                         i1l3085 0CE3  
                                       i1l3229 0D94                                         i1l3413 001F  
                                       i1l3405 0006                                         i1l3087 0CDF  
                                       i1l3415 0024                                         i1l3407 000A  
                                       i1l3089 0D4F                                         i1l3417 002F  
                                       i1l3409 000F                                         i1l3419 0034  
                                       i1l3197 0E67                                         i1l3199 0E6E  
                                       u131_20 0D56                                         u131_21 0D55  
                                       i1l2951 0DE2                                         i1l2953 0DE6  
                                       i1l2961 0722                                         i1l2955 0DEC  
                                       i1l2971 075E                                         i1l2963 0734  
                                       i1l2957 0DED                                         i1l2949 0DD9  
                                       i1l2965 073D                                         i1l2967 074F  
                                       u125_20 0DEC                                         u125_21 0DEB  
                                       i1l2969 0758                                         u126_20 0734  
                                       u126_21 0733                                         u127_20 074F  
                                       u127_21 074E                                         u128_20 075E  
                                       u128_21 075D                                         u153_20 0E6E  
                                       u153_21 0E6D                                         u154_20 0E80  
                                       u154_21 0E7F                                         u155_20 0F91  
                                       u155_21 0F90                                         u156_20 0FA1  
                                       u180_20 000F                                         u156_21 0FA0  
                                       u180_21 000E                                         u157_20 0FB5  
                                       u181_20 0014                                         u157_21 0FB4  
                                       u181_21 0013                                         u158_20 0DA3  
                                       u182_20 001F                                         u158_21 0DA2  
                                       u182_21 001E                                         u183_20 0024  
                                       u183_21 0023                                         u184_20 002F  
                                       u184_21 002E                                         u185_20 0034  
                                       u185_21 0033                                         u179_20 000A  
                                       u179_21 0009                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097               door_status_changed@open_or_close 0063  
                  seek_confirmation@cancel_num 0077                                         ___wmul 0E48  
                                    ??___awdiv 007B                            save_hall_codes@open 0076  
                          _EUSART_Transmit_ISR 0E67                               ___awdiv@quotient 005B  
                      __end_of_DATAEE_ReadByte 0D43                               __end_of_send_req 0F87  
                              ?_WDT_Initialize 0070                               __end_of_timer_up 0768  
                                    ??_save_pw 0077       TMR2_SetInterruptHandler@InterruptHandler 0071  
                                compare_pw@len 0074                                  compare_pw@res 0077  
                              _request_storage 004E                               __end_of_stop_cmd 0D94  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 002A  
                            _SYSTEM_Initialize 07ED                        __end_of__initialization 0066  
                            ??_save_hall_codes 0075                          __end_of_TMR2_CallBack 0D5C  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 0D0D  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 0D07  
                 __size_of_ADC_StartConversion 0003                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0002                            ??_SYSTEM_Initialize 0074  
                                    ?_TMR2_ISR 0070                               _DATAEE_WriteByte 0E2A  
                 __size_of_door_status_changed 00E2                             __size_of_del_array 001D  
                             ?_TMR2_Initialize 0070                        _ADC_GetConversionResult 0CD9  
                               _OPTION_REGbits 0095                                   _data_storage 20EF  
                         _eusartRxStatusBuffer 00A0                              _send_msg_stopping 0EAD  
              ??_EUSART_SetOverrunErrorHandler 0073                             ?_send_msg_stopping 0073  
                    __end_of_SYSTEM_Initialize 0800                          ??_EUSART_Transmit_ISR 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                              _read_hall_codes 0D5C                           __end_of_EUSART_Write 0F28  
                         send_msg_stopping@len 0075                            ??_send_msg_stopping 0076  
                         send_msg_stopping@msg 0073                                 _status_storage 004D  
                  __size_of_EUSART_Receive_ISR 0039                                  _button_status 0049  
                                   __pmaintext 006A                  ?_EUSART_SetTxInterruptHandler 0071  
             _EUSART_TxDefaultInterruptHandler 0044                                        ?___wmul 0071  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                   _hall_codes 006E                                        _BAUDCON 019F  
                           __size_of_send_stat 0018                                        _APFCON0 011D  
                                      _APFCON1 011E                   ??_EUSART_DefaultErrorHandler 0071  
                      __size_of_ADC_Initialize 0008                      __end_of_send_msg_stopping 0ED4  
                             ?_DATAEE_ReadByte 0070                                  _eusartRxCount 0054  
                __size_of_EUSART_RxDataHandler 001A                                        _OSCTUNE 0098  
                     ??_EUSART_SetErrorHandler 0073                                     _compare_pw 07AD  
                               main@last_state 0046                              __end_of_del_array 0E2A  
                         DATAEE_WriteByte@bAdd 0072                                    send_req@var 0059  
                         _ADC_InterruptHandler 003A                                      ?_send_req 0070  
          __size_of_EUSART_DefaultErrorHandler 0004                     ??_TMR2_SetInterruptHandler 0073  
                                    ?_timer_up 0070                                        ___awdiv 06C2  
                              __size_of___wmul 001F                                  _working_state 0052  
                    ??_ADC_GetConversionResult 0071                           save_hall_codes@close 0074  
                                    ?_stop_cmd 0070                                        _cmd_exe 0050  
                                      __ptext1 0DF3                                        __ptext2 0D7F  
                                      __ptext3 0DC1                                        __ptext4 0F57  
                                      __ptext5 0EAD                                        __ptext6 0CEB  
                                      __ptext7 0EFE                                        __ptext8 0E0D  
                                      __ptext9 0F28                               main@control_byte 0048  
                                   del_array@x 0076                          _OSCILLATOR_Initialize 0D2B  
                                    _T2CONbits 001C                        __end_of_read_hall_codes 0D6D  
                     ??_PIN_MANAGER_Initialize 0071                                        _save_pw 0768  
                           _new_hall_code_open 004B                     __size_of_SYSTEM_Initialize 0013  
                                      clrloop0 0D44                                        main@res 006A  
                         end_of_initialization 0066                              __end_of_send_stat 0DD9  
        __end_of_EUSART_SetOverrunErrorHandler 0D01         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0CFB                       send_stat@status_protocol 005A  
                                send_cmd@F3018 00BF                              _EUSART_Initialize 0FC0  
                 __end_of_ADC_IsConversionDone 0D1A                              _seek_confirmation 0F28  
                                   ??_send_req 0079                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 0D22  
                           ?_seek_confirmation 0071                                     ??_timer_up 0070  
                       door_status_changed@val 005D                    __size_of_wait_for_requested 001A  
                                   ??_stop_cmd 0071                            ??_EUSART_Initialize 0073  
                             ??_WDT_Initialize 0071                 ??_EUSART_SetTxInterruptHandler 0073  
                                    _PORTBbits 000D                            ?_EUSART_is_rx_ready 0070  
                          ??_seek_confirmation 0079                     __size_of_send_msg_stopping 0027  
                              _save_hall_codes 0E89                          __size_of_EUSART_Write 002A  
                          _ADC_StartConversion 0CDC                                    ?_compare_pw 0072  
              __size_of_EUSART_SetErrorHandler 0006                       __end_of_DATAEE_WriteByte 0E48  
                          _door_status_changed 05E0                                  send_req@F3022 00BC  
                    __end_of_EUSART_Initialize 1000                           ??_EUSART_is_rx_ready 0071  
                    __end_of_seek_confirmation 0F57                                      _TXSTAbits 019E  
                         ?_ADC_StartConversion 0070           __end_of_TMR2_DefaultInterruptHandler 0CD9  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 0CD8  
                         ?_door_status_changed 005D             __end_of_EUSART_DefaultErrorHandler 0CE3  
                   _EUSART_DefaultErrorHandler 0CDF                                 __end_of___wmul 0E67  
                                 _EUSART_Write 0EFE                              __size_of_TMR2_ISR 0016  
                    seek_confirmation@wait_num 0071                                 _ADC_Initialize 0D1A  
                       ?_OSCILLATOR_Initialize 0070                            start_initialization 003C  
                             ?_read_hall_codes 0070                __size_of_PIN_MANAGER_Initialize 0017  
                                ??_EUSART_Read 0071   EUSART_SetRxInterruptHandler@interruptHandler 0071  
 EUSART_SetTxInterruptHandler@interruptHandler 0071                                  send_stat@stat 0059  
                          DATAEE_ReadByte@bAdd 0071                 ?_EUSART_SetOverrunErrorHandler 0071  
                        ??_ADC_StartConversion 0071                                _cmd_exe_counter 0034  
                   _EUSART_FramingErrorHandler 0040                                       ??___wmul 0075  
                       _EUSART_SetErrorHandler 0CEF                          ??_door_status_changed 005F  
                       __end_of_ADC_Initialize 0D22                                    __pdataBANK0 006E  
                          __size_of_compare_pw 0040                        __end_of_save_hall_codes 0EAD  
                ?_TMR2_DefaultInterruptHandler 0070                         __size_of_TMR2_CallBack 000D  
                                  __pbssBIGRAM 20EF                    __end_of_EUSART_Transmit_ISR 0E89  
                                  __pbssCOMMON 007C                                      ___latbits 0001  
                                __pcstackBANK0 0059                           _ADC_IsConversionDone 0D13  
                     __size_of_TMR2_Initialize 0012                     __end_of_EUSART_Receive_ISR 0FC0  
                   __size_of_EUSART_Initialize 0040               _EUSART_RxDefaultInterruptHandler 0042  
                   __size_of_seek_confirmation 002F                            __end_of_EUSART_Read 0EFE  
                                    _del_array 0E0D                   __end_of_EUSART_RxDataHandler 0DF3  
                       _PIN_MANAGER_Initialize 0DAA                           EUSART_Read@readValue 0072  
                                    _cmd_state 0051                              __size_of_send_req 0030  
                                     ?___awdiv 0077                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 007C                                   _eusartTxHead 0058  
                                 _eusartRxTail 0055                                   _eusartTxTail 0057  
                            __size_of_timer_up 0046                   ??_INTERRUPT_InterruptManager 0071  
                      _eusartTxBufferRemaining 0056                              __size_of_stop_cmd 0015  
                        wait_for_requested@req 0072                     seek_confirmation@retry_num 0075  
                                _cmd_timer_len 0020                                     save_pw@len 0076  
                        ?_ADC_IsConversionDone 0070                                       ?_save_pw 0074  
                                 del_array@len 0073                       __size_of_DATAEE_ReadByte 000C  
                               _eusartRxBuffer 00A8                                 _eusartTxBuffer 00B0  
                               ___wmul@product 0075                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0071                                   _receive_time 002C  
                                    clear_ram0 0D43                                  _TMR2_CallBack 0D4F  
                                     _PIE1bits 0091                              _eusartRxLastError 0053  
                                   ?_del_array 0071                                      _send_stat 0DC1  
          __size_of_INTERRUPT_InterruptManager 0036                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0073                              _EUSART_is_tx_done 0CEB  
    __end_of_EUSART_DefaultOverrunErrorHandler 0CE7     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0CE3                                       _TMR2_ISR 0D94  
                           ?_EUSART_is_tx_done 0070                               ?_save_hall_codes 0074  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0071  
                          ??_EUSART_is_tx_done 0071                                      main@input 006D  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0006  
                    ?_TMR2_SetInterruptHandler 0071                          DATAEE_WriteByte@bData 0071  
                                 ??_compare_pw 0075                                    _EUSART_Read 0ED4  
                            ?_DATAEE_WriteByte 0071                              ??_TMR2_Initialize 0073  
                               ?_TMR2_CallBack 0070                             ??_DATAEE_WriteByte 0072  
                                   _EECON1bits 0195                      __end_of_EUSART_is_tx_done 0CEF  
                                   ?_send_stat 0070                       ?_ADC_GetConversionResult 0070  
                               del_array@array 0071                     __end_of_wait_for_requested 0E0D  
                      ??_OSCILLATOR_Initialize 0071                            _EUSART_ErrorHandler 003C  
                             __size_of___awdiv 0060                    ?_EUSART_DefaultErrorHandler 0070  
                           __end_of_compare_pw 07ED                       main@data_storage_counter 0047  
                     send_req@request_protocol 005A                         ??_ADC_IsConversionDone 0071  
                           send_msg_stopping@x 0077                                    _button_time 00B8  
                                     _cmd_time 0024                           _EUSART_RxDataHandler 0DD9  
                             __size_of_save_pw 0045                                       __ptext10 0768  
                                     __ptext11 0E89                                       __ptext20 0CE7  
                                     __ptext12 0E2A                                       __ptext21 0D6D  
                                     __ptext13 0D5C                                       __ptext30 0CEF  
                                     __ptext22 0D0D                                       __ptext14 05E0  
                                     __ptext31 0D1A                                       __ptext23 0DAA  
                                     __ptext15 0E48                                       __ptext40 0CD8  
                                     __ptext32 0D22                                       __ptext24 0D2B  
                                     __ptext16 06C2                                       __ptext41 0722  
                                     __ptext33 0ED4                                       __ptext25 0FC0  
                                     __ptext17 07AD                                       __ptext42 0E67  
                                     __ptext34 0CDC                                       __ptext26 0D07  
                                     __ptext18 0D37                                       __ptext43 0F87  
                                     __ptext35 0D13                                       __ptext27 0D01  
                                     __ptext19 07ED                                       __ptext44 0CE3  
                                     __ptext36 0CD9                                       __ptext28 0CFB  
                                     __ptext45 0CD7                                       __ptext29 0CF5  
                                     __ptext46 0CDF                                       __ptext38 0D94  
                                     __ptext47 0DD9                                       __ptext39 0D4F  
                  DATAEE_WriteByte@GIEBitValue 0073                                      save_pw@pw 0074  
                                  _lock_status 004C                    __size_of_EUSART_is_rx_ready 0009  
                                __size_of_main 0576                              ??_DATAEE_ReadByte 0071  
                                  ??_del_array 0075                        ?_EUSART_SetErrorHandler 0071  
                                     _send_req 0F57  EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                          _new_hall_code_close 004A                                       _timer_up 0722  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 003A  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0CFB  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0CF5  
                                     _stop_cmd 0D7F                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                        __size_of_WDT_Initialize 0004  
                             compare_pw@eedata 0078                                       intlevel1 0000  
                              ??_TMR2_CallBack 0070                               compare_pw@indata 0076  
                  __end_of_ADC_StartConversion 0CDF                       __size_of_read_hall_codes 0011  
                      ?_PIN_MANAGER_Initialize 0070                  seek_confirmation@continue_num 0073  
              __end_of_ADC_GetConversionResult 0CDC                 __end_of_EUSART_SetErrorHandler 0CF5  
                                     save_pw@x 0078                    __end_of_door_status_changed 06C2  
                   __size_of_EUSART_is_tx_done 0004                                    ??_send_stat 0079  
                             ??_ADC_Initialize 0071           __end_of_EUSART_SetRxInterruptHandler 0D07  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0D01  
                           _EUSART_Receive_ISR 0F87  EUSART_SetFramingErrorHandler@interruptHandler 0071  
                          ?_EUSART_Receive_ISR 0070                          TMR2_ISR@CountCallBack 0036  
                        main@new_button_status 006C                             EUSART_Write@txData 0072  
                 __size_of_EUSART_Transmit_ISR 0022                 __end_of_PIN_MANAGER_Initialize 0DC1  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 0038  
