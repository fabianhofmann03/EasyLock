

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Apr 05 13:40:29 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F1827
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	intentry,global,class=CODE,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    63                           	dabs	1,0x220,48
    64                           	dabs	1,0x1A0,80
    65                           	dabs	1,0x16F,1
    66                           	dabs	1,0x20EF,0,_data_storage
    67                           	dabs	1,0x7E,2
    68  0000                     
    69                           ; Version 2.40
    70                           ; Generated 17/11/2021 GMT
    71                           ; 
    72                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F1827 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001E                     	;# 
   132  001F                     	;# 
   133  008C                     	;# 
   134  008D                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  0111                     	;# 
   153  0112                     	;# 
   154  0113                     	;# 
   155  0114                     	;# 
   156  0115                     	;# 
   157  0116                     	;# 
   158  0117                     	;# 
   159  0118                     	;# 
   160  0119                     	;# 
   161  011A                     	;# 
   162  011B                     	;# 
   163  011D                     	;# 
   164  011E                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0191                     	;# 
   168  0191                     	;# 
   169  0192                     	;# 
   170  0193                     	;# 
   171  0193                     	;# 
   172  0193                     	;# 
   173  0194                     	;# 
   174  0195                     	;# 
   175  0196                     	;# 
   176  0199                     	;# 
   177  019A                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019F                     	;# 
   187  020C                     	;# 
   188  020D                     	;# 
   189  0211                     	;# 
   190  0211                     	;# 
   191  0212                     	;# 
   192  0212                     	;# 
   193  0213                     	;# 
   194  0213                     	;# 
   195  0214                     	;# 
   196  0214                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0215                     	;# 
   200  0216                     	;# 
   201  0216                     	;# 
   202  0217                     	;# 
   203  0217                     	;# 
   204  0219                     	;# 
   205  021A                     	;# 
   206  021B                     	;# 
   207  021C                     	;# 
   208  021D                     	;# 
   209  021E                     	;# 
   210  021F                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029C                     	;# 
   226  029D                     	;# 
   227  029E                     	;# 
   228  029E                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0318                     	;# 
   234  0318                     	;# 
   235  0319                     	;# 
   236  031A                     	;# 
   237  0394                     	;# 
   238  0395                     	;# 
   239  0396                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0014                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  0111                     	;# 
   311  0112                     	;# 
   312  0113                     	;# 
   313  0114                     	;# 
   314  0115                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  0118                     	;# 
   318  0119                     	;# 
   319  011A                     	;# 
   320  011B                     	;# 
   321  011D                     	;# 
   322  011E                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020C                     	;# 
   346  020D                     	;# 
   347  0211                     	;# 
   348  0211                     	;# 
   349  0212                     	;# 
   350  0212                     	;# 
   351  0213                     	;# 
   352  0213                     	;# 
   353  0214                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0216                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0217                     	;# 
   362  0219                     	;# 
   363  021A                     	;# 
   364  021B                     	;# 
   365  021C                     	;# 
   366  021D                     	;# 
   367  021E                     	;# 
   368  021F                     	;# 
   369  0291                     	;# 
   370  0291                     	;# 
   371  0292                     	;# 
   372  0293                     	;# 
   373  0294                     	;# 
   374  0295                     	;# 
   375  0295                     	;# 
   376  0296                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  029B                     	;# 
   382  029C                     	;# 
   383  029C                     	;# 
   384  029D                     	;# 
   385  029E                     	;# 
   386  029E                     	;# 
   387  0311                     	;# 
   388  0311                     	;# 
   389  0312                     	;# 
   390  0313                     	;# 
   391  0318                     	;# 
   392  0318                     	;# 
   393  0319                     	;# 
   394  031A                     	;# 
   395  0394                     	;# 
   396  0395                     	;# 
   397  0396                     	;# 
   398  039A                     	;# 
   399  039C                     	;# 
   400  039D                     	;# 
   401  039E                     	;# 
   402  039F                     	;# 
   403  0415                     	;# 
   404  0416                     	;# 
   405  0417                     	;# 
   406  041C                     	;# 
   407  041D                     	;# 
   408  041E                     	;# 
   409  0FE4                     	;# 
   410  0FE5                     	;# 
   411  0FE6                     	;# 
   412  0FE7                     	;# 
   413  0FE8                     	;# 
   414  0FE9                     	;# 
   415  0FEA                     	;# 
   416  0FEB                     	;# 
   417  0FED                     	;# 
   418  0FEE                     	;# 
   419  0FEF                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0093                     	;# 
   454  0094                     	;# 
   455  0095                     	;# 
   456  0096                     	;# 
   457  0097                     	;# 
   458  0098                     	;# 
   459  0099                     	;# 
   460  009A                     	;# 
   461  009B                     	;# 
   462  009B                     	;# 
   463  009C                     	;# 
   464  009D                     	;# 
   465  009E                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  0111                     	;# 
   469  0112                     	;# 
   470  0113                     	;# 
   471  0114                     	;# 
   472  0115                     	;# 
   473  0116                     	;# 
   474  0117                     	;# 
   475  0118                     	;# 
   476  0119                     	;# 
   477  011A                     	;# 
   478  011B                     	;# 
   479  011D                     	;# 
   480  011E                     	;# 
   481  018C                     	;# 
   482  018D                     	;# 
   483  0191                     	;# 
   484  0191                     	;# 
   485  0192                     	;# 
   486  0193                     	;# 
   487  0193                     	;# 
   488  0193                     	;# 
   489  0194                     	;# 
   490  0195                     	;# 
   491  0196                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019C                     	;# 
   499  019C                     	;# 
   500  019D                     	;# 
   501  019E                     	;# 
   502  019F                     	;# 
   503  020C                     	;# 
   504  020D                     	;# 
   505  0211                     	;# 
   506  0211                     	;# 
   507  0212                     	;# 
   508  0212                     	;# 
   509  0213                     	;# 
   510  0213                     	;# 
   511  0214                     	;# 
   512  0214                     	;# 
   513  0215                     	;# 
   514  0215                     	;# 
   515  0215                     	;# 
   516  0216                     	;# 
   517  0216                     	;# 
   518  0217                     	;# 
   519  0217                     	;# 
   520  0219                     	;# 
   521  021A                     	;# 
   522  021B                     	;# 
   523  021C                     	;# 
   524  021D                     	;# 
   525  021E                     	;# 
   526  021F                     	;# 
   527  0291                     	;# 
   528  0291                     	;# 
   529  0292                     	;# 
   530  0293                     	;# 
   531  0294                     	;# 
   532  0295                     	;# 
   533  0295                     	;# 
   534  0296                     	;# 
   535  0298                     	;# 
   536  0298                     	;# 
   537  0299                     	;# 
   538  029A                     	;# 
   539  029B                     	;# 
   540  029C                     	;# 
   541  029C                     	;# 
   542  029D                     	;# 
   543  029E                     	;# 
   544  029E                     	;# 
   545  0311                     	;# 
   546  0311                     	;# 
   547  0312                     	;# 
   548  0313                     	;# 
   549  0318                     	;# 
   550  0318                     	;# 
   551  0319                     	;# 
   552  031A                     	;# 
   553  0394                     	;# 
   554  0395                     	;# 
   555  0396                     	;# 
   556  039A                     	;# 
   557  039C                     	;# 
   558  039D                     	;# 
   559  039E                     	;# 
   560  039F                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0014                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001E                     	;# 
   606  001F                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0094                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009A                     	;# 
   619  009B                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0115                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  0118                     	;# 
   634  0119                     	;# 
   635  011A                     	;# 
   636  011B                     	;# 
   637  011D                     	;# 
   638  011E                     	;# 
   639  018C                     	;# 
   640  018D                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0193                     	;# 
   647  0194                     	;# 
   648  0195                     	;# 
   649  0196                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019D                     	;# 
   659  019E                     	;# 
   660  019F                     	;# 
   661  020C                     	;# 
   662  020D                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  0219                     	;# 
   679  021A                     	;# 
   680  021B                     	;# 
   681  021C                     	;# 
   682  021D                     	;# 
   683  021E                     	;# 
   684  021F                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0294                     	;# 
   690  0295                     	;# 
   691  0295                     	;# 
   692  0296                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  029B                     	;# 
   698  029C                     	;# 
   699  029C                     	;# 
   700  029D                     	;# 
   701  029E                     	;# 
   702  029E                     	;# 
   703  0311                     	;# 
   704  0311                     	;# 
   705  0312                     	;# 
   706  0313                     	;# 
   707  0318                     	;# 
   708  0318                     	;# 
   709  0319                     	;# 
   710  031A                     	;# 
   711  0394                     	;# 
   712  0395                     	;# 
   713  0396                     	;# 
   714  039A                     	;# 
   715  039C                     	;# 
   716  039D                     	;# 
   717  039E                     	;# 
   718  039F                     	;# 
   719  0415                     	;# 
   720  0416                     	;# 
   721  0417                     	;# 
   722  041C                     	;# 
   723  041D                     	;# 
   724  041E                     	;# 
   725  0FE4                     	;# 
   726  0FE5                     	;# 
   727  0FE6                     	;# 
   728  0FE7                     	;# 
   729  0FE8                     	;# 
   730  0FE9                     	;# 
   731  0FEA                     	;# 
   732  0FEB                     	;# 
   733  0FED                     	;# 
   734  0FEE                     	;# 
   735  0FEF                     	;# 
   736  0000                     	;# 
   737  0001                     	;# 
   738  0002                     	;# 
   739  0003                     	;# 
   740  0004                     	;# 
   741  0005                     	;# 
   742  0006                     	;# 
   743  0007                     	;# 
   744  0008                     	;# 
   745  0009                     	;# 
   746  000A                     	;# 
   747  000B                     	;# 
   748  000C                     	;# 
   749  000D                     	;# 
   750  0011                     	;# 
   751  0012                     	;# 
   752  0013                     	;# 
   753  0014                     	;# 
   754  0015                     	;# 
   755  0016                     	;# 
   756  0016                     	;# 
   757  0017                     	;# 
   758  0018                     	;# 
   759  0019                     	;# 
   760  001A                     	;# 
   761  001B                     	;# 
   762  001C                     	;# 
   763  001E                     	;# 
   764  001F                     	;# 
   765  008C                     	;# 
   766  008D                     	;# 
   767  0091                     	;# 
   768  0092                     	;# 
   769  0093                     	;# 
   770  0094                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0098                     	;# 
   775  0099                     	;# 
   776  009A                     	;# 
   777  009B                     	;# 
   778  009B                     	;# 
   779  009C                     	;# 
   780  009D                     	;# 
   781  009E                     	;# 
   782  010C                     	;# 
   783  010D                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  011E                     	;# 
   797  018C                     	;# 
   798  018D                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019C                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  020D                     	;# 
   821  0211                     	;# 
   822  0211                     	;# 
   823  0212                     	;# 
   824  0212                     	;# 
   825  0213                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0214                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0216                     	;# 
   834  0217                     	;# 
   835  0217                     	;# 
   836  0219                     	;# 
   837  021A                     	;# 
   838  021B                     	;# 
   839  021C                     	;# 
   840  021D                     	;# 
   841  021E                     	;# 
   842  021F                     	;# 
   843  0291                     	;# 
   844  0291                     	;# 
   845  0292                     	;# 
   846  0293                     	;# 
   847  0294                     	;# 
   848  0295                     	;# 
   849  0295                     	;# 
   850  0296                     	;# 
   851  0298                     	;# 
   852  0298                     	;# 
   853  0299                     	;# 
   854  029A                     	;# 
   855  029B                     	;# 
   856  029C                     	;# 
   857  029C                     	;# 
   858  029D                     	;# 
   859  029E                     	;# 
   860  029E                     	;# 
   861  0311                     	;# 
   862  0311                     	;# 
   863  0312                     	;# 
   864  0313                     	;# 
   865  0318                     	;# 
   866  0318                     	;# 
   867  0319                     	;# 
   868  031A                     	;# 
   869  0394                     	;# 
   870  0395                     	;# 
   871  0396                     	;# 
   872  039A                     	;# 
   873  039C                     	;# 
   874  039D                     	;# 
   875  039E                     	;# 
   876  039F                     	;# 
   877  0415                     	;# 
   878  0416                     	;# 
   879  0417                     	;# 
   880  041C                     	;# 
   881  041D                     	;# 
   882  041E                     	;# 
   883  0FE4                     	;# 
   884  0FE5                     	;# 
   885  0FE6                     	;# 
   886  0FE7                     	;# 
   887  0FE8                     	;# 
   888  0FE9                     	;# 
   889  0FEA                     	;# 
   890  0FEB                     	;# 
   891  0FED                     	;# 
   892  0FEE                     	;# 
   893  0FEF                     	;# 
   894  0000                     	;# 
   895  0001                     	;# 
   896  0002                     	;# 
   897  0003                     	;# 
   898  0004                     	;# 
   899  0005                     	;# 
   900  0006                     	;# 
   901  0007                     	;# 
   902  0008                     	;# 
   903  0009                     	;# 
   904  000A                     	;# 
   905  000B                     	;# 
   906  000C                     	;# 
   907  000D                     	;# 
   908  0011                     	;# 
   909  0012                     	;# 
   910  0013                     	;# 
   911  0014                     	;# 
   912  0015                     	;# 
   913  0016                     	;# 
   914  0016                     	;# 
   915  0017                     	;# 
   916  0018                     	;# 
   917  0019                     	;# 
   918  001A                     	;# 
   919  001B                     	;# 
   920  001C                     	;# 
   921  001E                     	;# 
   922  001F                     	;# 
   923  008C                     	;# 
   924  008D                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0094                     	;# 
   929  0095                     	;# 
   930  0096                     	;# 
   931  0097                     	;# 
   932  0098                     	;# 
   933  0099                     	;# 
   934  009A                     	;# 
   935  009B                     	;# 
   936  009B                     	;# 
   937  009C                     	;# 
   938  009D                     	;# 
   939  009E                     	;# 
   940  010C                     	;# 
   941  010D                     	;# 
   942  0111                     	;# 
   943  0112                     	;# 
   944  0113                     	;# 
   945  0114                     	;# 
   946  0115                     	;# 
   947  0116                     	;# 
   948  0117                     	;# 
   949  0118                     	;# 
   950  0119                     	;# 
   951  011A                     	;# 
   952  011B                     	;# 
   953  011D                     	;# 
   954  011E                     	;# 
   955  018C                     	;# 
   956  018D                     	;# 
   957  0191                     	;# 
   958  0191                     	;# 
   959  0192                     	;# 
   960  0193                     	;# 
   961  0193                     	;# 
   962  0193                     	;# 
   963  0194                     	;# 
   964  0195                     	;# 
   965  0196                     	;# 
   966  0199                     	;# 
   967  019A                     	;# 
   968  019B                     	;# 
   969  019B                     	;# 
   970  019B                     	;# 
   971  019B                     	;# 
   972  019C                     	;# 
   973  019C                     	;# 
   974  019D                     	;# 
   975  019E                     	;# 
   976  019F                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  0211                     	;# 
   980  0211                     	;# 
   981  0212                     	;# 
   982  0212                     	;# 
   983  0213                     	;# 
   984  0213                     	;# 
   985  0214                     	;# 
   986  0214                     	;# 
   987  0215                     	;# 
   988  0215                     	;# 
   989  0215                     	;# 
   990  0216                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0217                     	;# 
   994  0219                     	;# 
   995  021A                     	;# 
   996  021B                     	;# 
   997  021C                     	;# 
   998  021D                     	;# 
   999  021E                     	;# 
  1000  021F                     	;# 
  1001  0291                     	;# 
  1002  0291                     	;# 
  1003  0292                     	;# 
  1004  0293                     	;# 
  1005  0294                     	;# 
  1006  0295                     	;# 
  1007  0295                     	;# 
  1008  0296                     	;# 
  1009  0298                     	;# 
  1010  0298                     	;# 
  1011  0299                     	;# 
  1012  029A                     	;# 
  1013  029B                     	;# 
  1014  029C                     	;# 
  1015  029C                     	;# 
  1016  029D                     	;# 
  1017  029E                     	;# 
  1018  029E                     	;# 
  1019  0311                     	;# 
  1020  0311                     	;# 
  1021  0312                     	;# 
  1022  0313                     	;# 
  1023  0318                     	;# 
  1024  0318                     	;# 
  1025  0319                     	;# 
  1026  031A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  039A                     	;# 
  1031  039C                     	;# 
  1032  039D                     	;# 
  1033  039E                     	;# 
  1034  039F                     	;# 
  1035  0415                     	;# 
  1036  0416                     	;# 
  1037  0417                     	;# 
  1038  041C                     	;# 
  1039  041D                     	;# 
  1040  041E                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  001E                     	;# 
  1080  001F                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0093                     	;# 
  1086  0094                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0098                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  0111                     	;# 
  1101  0112                     	;# 
  1102  0113                     	;# 
  1103  0114                     	;# 
  1104  0115                     	;# 
  1105  0116                     	;# 
  1106  0117                     	;# 
  1107  0118                     	;# 
  1108  0119                     	;# 
  1109  011A                     	;# 
  1110  011B                     	;# 
  1111  011D                     	;# 
  1112  011E                     	;# 
  1113  018C                     	;# 
  1114  018D                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020C                     	;# 
  1136  020D                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0219                     	;# 
  1153  021A                     	;# 
  1154  021B                     	;# 
  1155  021C                     	;# 
  1156  021D                     	;# 
  1157  021E                     	;# 
  1158  021F                     	;# 
  1159  0291                     	;# 
  1160  0291                     	;# 
  1161  0292                     	;# 
  1162  0293                     	;# 
  1163  0294                     	;# 
  1164  0295                     	;# 
  1165  0295                     	;# 
  1166  0296                     	;# 
  1167  0298                     	;# 
  1168  0298                     	;# 
  1169  0299                     	;# 
  1170  029A                     	;# 
  1171  029B                     	;# 
  1172  029C                     	;# 
  1173  029C                     	;# 
  1174  029D                     	;# 
  1175  029E                     	;# 
  1176  029E                     	;# 
  1177  0311                     	;# 
  1178  0311                     	;# 
  1179  0312                     	;# 
  1180  0313                     	;# 
  1181  0318                     	;# 
  1182  0318                     	;# 
  1183  0319                     	;# 
  1184  031A                     	;# 
  1185  0394                     	;# 
  1186  0395                     	;# 
  1187  0396                     	;# 
  1188  039A                     	;# 
  1189  039C                     	;# 
  1190  039D                     	;# 
  1191  039E                     	;# 
  1192  039F                     	;# 
  1193  0415                     	;# 
  1194  0416                     	;# 
  1195  0417                     	;# 
  1196  041C                     	;# 
  1197  041D                     	;# 
  1198  041E                     	;# 
  1199  0FE4                     	;# 
  1200  0FE5                     	;# 
  1201  0FE6                     	;# 
  1202  0FE7                     	;# 
  1203  0FE8                     	;# 
  1204  0FE9                     	;# 
  1205  0FEA                     	;# 
  1206  0FEB                     	;# 
  1207  0FED                     	;# 
  1208  0FEE                     	;# 
  1209  0FEF                     	;# 
  1210  0000                     	;# 
  1211  0001                     	;# 
  1212  0002                     	;# 
  1213  0003                     	;# 
  1214  0004                     	;# 
  1215  0005                     	;# 
  1216  0006                     	;# 
  1217  0007                     	;# 
  1218  0008                     	;# 
  1219  0009                     	;# 
  1220  000A                     	;# 
  1221  000B                     	;# 
  1222  000C                     	;# 
  1223  000D                     	;# 
  1224  0011                     	;# 
  1225  0012                     	;# 
  1226  0013                     	;# 
  1227  0014                     	;# 
  1228  0015                     	;# 
  1229  0016                     	;# 
  1230  0016                     	;# 
  1231  0017                     	;# 
  1232  0018                     	;# 
  1233  0019                     	;# 
  1234  001A                     	;# 
  1235  001B                     	;# 
  1236  001C                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008D                     	;# 
  1241  0091                     	;# 
  1242  0092                     	;# 
  1243  0093                     	;# 
  1244  0094                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0097                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009A                     	;# 
  1251  009B                     	;# 
  1252  009B                     	;# 
  1253  009C                     	;# 
  1254  009D                     	;# 
  1255  009E                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  0111                     	;# 
  1259  0112                     	;# 
  1260  0113                     	;# 
  1261  0114                     	;# 
  1262  0115                     	;# 
  1263  0116                     	;# 
  1264  0117                     	;# 
  1265  0118                     	;# 
  1266  0119                     	;# 
  1267  011A                     	;# 
  1268  011B                     	;# 
  1269  011D                     	;# 
  1270  011E                     	;# 
  1271  018C                     	;# 
  1272  018D                     	;# 
  1273  0191                     	;# 
  1274  0191                     	;# 
  1275  0192                     	;# 
  1276  0193                     	;# 
  1277  0193                     	;# 
  1278  0193                     	;# 
  1279  0194                     	;# 
  1280  0195                     	;# 
  1281  0196                     	;# 
  1282  0199                     	;# 
  1283  019A                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019C                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019F                     	;# 
  1293  020C                     	;# 
  1294  020D                     	;# 
  1295  0211                     	;# 
  1296  0211                     	;# 
  1297  0212                     	;# 
  1298  0212                     	;# 
  1299  0213                     	;# 
  1300  0213                     	;# 
  1301  0214                     	;# 
  1302  0214                     	;# 
  1303  0215                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0216                     	;# 
  1307  0216                     	;# 
  1308  0217                     	;# 
  1309  0217                     	;# 
  1310  0219                     	;# 
  1311  021A                     	;# 
  1312  021B                     	;# 
  1313  021C                     	;# 
  1314  021D                     	;# 
  1315  021E                     	;# 
  1316  021F                     	;# 
  1317  0291                     	;# 
  1318  0291                     	;# 
  1319  0292                     	;# 
  1320  0293                     	;# 
  1321  0294                     	;# 
  1322  0295                     	;# 
  1323  0295                     	;# 
  1324  0296                     	;# 
  1325  0298                     	;# 
  1326  0298                     	;# 
  1327  0299                     	;# 
  1328  029A                     	;# 
  1329  029B                     	;# 
  1330  029C                     	;# 
  1331  029C                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029E                     	;# 
  1335  0311                     	;# 
  1336  0311                     	;# 
  1337  0312                     	;# 
  1338  0313                     	;# 
  1339  0318                     	;# 
  1340  0318                     	;# 
  1341  0319                     	;# 
  1342  031A                     	;# 
  1343  0394                     	;# 
  1344  0395                     	;# 
  1345  0396                     	;# 
  1346  039A                     	;# 
  1347  039C                     	;# 
  1348  039D                     	;# 
  1349  039E                     	;# 
  1350  039F                     	;# 
  1351  0415                     	;# 
  1352  0416                     	;# 
  1353  0417                     	;# 
  1354  041C                     	;# 
  1355  041D                     	;# 
  1356  041E                     	;# 
  1357  0FE4                     	;# 
  1358  0FE5                     	;# 
  1359  0FE6                     	;# 
  1360  0FE7                     	;# 
  1361  0FE8                     	;# 
  1362  0FE9                     	;# 
  1363  0FEA                     	;# 
  1364  0FEB                     	;# 
  1365  0FED                     	;# 
  1366  0FEE                     	;# 
  1367  0FEF                     	;# 
  1368  0000                     	;# 
  1369  0001                     	;# 
  1370  0002                     	;# 
  1371  0003                     	;# 
  1372  0004                     	;# 
  1373  0005                     	;# 
  1374  0006                     	;# 
  1375  0007                     	;# 
  1376  0008                     	;# 
  1377  0009                     	;# 
  1378  000A                     	;# 
  1379  000B                     	;# 
  1380  000C                     	;# 
  1381  000D                     	;# 
  1382  0011                     	;# 
  1383  0012                     	;# 
  1384  0013                     	;# 
  1385  0014                     	;# 
  1386  0015                     	;# 
  1387  0016                     	;# 
  1388  0016                     	;# 
  1389  0017                     	;# 
  1390  0018                     	;# 
  1391  0019                     	;# 
  1392  001A                     	;# 
  1393  001B                     	;# 
  1394  001C                     	;# 
  1395  001E                     	;# 
  1396  001F                     	;# 
  1397  008C                     	;# 
  1398  008D                     	;# 
  1399  0091                     	;# 
  1400  0092                     	;# 
  1401  0093                     	;# 
  1402  0094                     	;# 
  1403  0095                     	;# 
  1404  0096                     	;# 
  1405  0097                     	;# 
  1406  0098                     	;# 
  1407  0099                     	;# 
  1408  009A                     	;# 
  1409  009B                     	;# 
  1410  009B                     	;# 
  1411  009C                     	;# 
  1412  009D                     	;# 
  1413  009E                     	;# 
  1414  010C                     	;# 
  1415  010D                     	;# 
  1416  0111                     	;# 
  1417  0112                     	;# 
  1418  0113                     	;# 
  1419  0114                     	;# 
  1420  0115                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  0118                     	;# 
  1424  0119                     	;# 
  1425  011A                     	;# 
  1426  011B                     	;# 
  1427  011D                     	;# 
  1428  011E                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020C                     	;# 
  1452  020D                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0219                     	;# 
  1469  021A                     	;# 
  1470  021B                     	;# 
  1471  021C                     	;# 
  1472  021D                     	;# 
  1473  021E                     	;# 
  1474  021F                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0294                     	;# 
  1480  0295                     	;# 
  1481  0295                     	;# 
  1482  0296                     	;# 
  1483  0298                     	;# 
  1484  0298                     	;# 
  1485  0299                     	;# 
  1486  029A                     	;# 
  1487  029B                     	;# 
  1488  029C                     	;# 
  1489  029C                     	;# 
  1490  029D                     	;# 
  1491  029E                     	;# 
  1492  029E                     	;# 
  1493  0311                     	;# 
  1494  0311                     	;# 
  1495  0312                     	;# 
  1496  0313                     	;# 
  1497  0318                     	;# 
  1498  0318                     	;# 
  1499  0319                     	;# 
  1500  031A                     	;# 
  1501  0394                     	;# 
  1502  0395                     	;# 
  1503  0396                     	;# 
  1504  039A                     	;# 
  1505  039C                     	;# 
  1506  039D                     	;# 
  1507  039E                     	;# 
  1508  039F                     	;# 
  1509  0415                     	;# 
  1510  0416                     	;# 
  1511  0417                     	;# 
  1512  041C                     	;# 
  1513  041D                     	;# 
  1514  041E                     	;# 
  1515  0FE4                     	;# 
  1516  0FE5                     	;# 
  1517  0FE6                     	;# 
  1518  0FE7                     	;# 
  1519  0FE8                     	;# 
  1520  0FE9                     	;# 
  1521  0FEA                     	;# 
  1522  0FEB                     	;# 
  1523  0FED                     	;# 
  1524  0FEE                     	;# 
  1525  0FEF                     	;_data_storage
  1526                           
  1527                           	psect	idataBANK0
  1528  0002                     __pidataBANK0:
  1529                           
  1530                           ;initializer for _hall_codes
  1531  0002  347F               	retlw	127
  1532  0003  3467               	retlw	103
  1533  000D                     _PORTBbits	set	13
  1534  001C                     _T2CONbits	set	28
  1535  001C                     _T2CON	set	28
  1536  001A                     _TMR2	set	26
  1537  001B                     _PR2	set	27
  1538  0011                     _PIR1bits	set	17
  1539  000B                     _INTCONbits	set	11
  1540  009D                     _ADCON0bits	set	157
  1541  009D                     _ADCON0	set	157
  1542  009C                     _ADRESH	set	156
  1543  009B                     _ADRESL	set	155
  1544  009E                     _ADCON1	set	158
  1545  0095                     _OPTION_REGbits	set	149
  1546  008D                     _TRISB	set	141
  1547  008C                     _TRISA	set	140
  1548  0091                     _PIE1bits	set	145
  1549  0097                     _WDTCON	set	151
  1550  0098                     _OSCTUNE	set	152
  1551  0099                     _OSCCON	set	153
  1552  04D6                     _PLLR	set	1238
  1553  010C                     _LATAbits	set	268
  1554  011E                     _APFCON1	set	286
  1555  011D                     _APFCON0	set	285
  1556  010D                     _LATB	set	269
  1557  010C                     _LATA	set	268
  1558  0116                     _BORCON	set	278
  1559  018C                     _ANSELA	set	396
  1560  018D                     _ANSELB	set	397
  1561  0199                     _RCREG	set	409
  1562  019D                     _RCSTAbits	set	413
  1563  019A                     _TXREG	set	410
  1564  019E                     _TXSTAbits	set	414
  1565  019C                     _SPBRGH	set	412
  1566  019B                     _SPBRGL	set	411
  1567  019E                     _TXSTA	set	414
  1568  019D                     _RCSTA	set	413
  1569  019F                     _BAUDCON	set	415
  1570  0196                     _EECON2	set	406
  1571  0193                     _EEDATL	set	403
  1572  0194                     _EEDATH	set	404
  1573  0195                     _EECON1bits	set	405
  1574  0192                     _EEADRH	set	402
  1575  0191                     _EEADRL	set	401
  1576  020C                     _WPUA	set	524
  1577  020D                     _WPUB	set	525
  1578                           
  1579                           	psect	cinit
  1580  003C                     start_initialization:	
  1581                           ; #config settings
  1582                           
  1583  003C                     __initialization:	;BIGRAM
  1584                           
  1585                           ; Initialize objects allocated to BANK0
  1586  003C  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  1587  003F  00EE               	movwf	__pdataBANK0& (0+127)
  1588  0040  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  1589  0043  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  1590                           
  1591                           ; Clear objects allocated to BIGRAM
  1592  0044  30EF               	movlw	low (0+8431)
  1593  0045  0084               	movwf	4
  1594  0046  3020               	movlw	high (0+8431)
  1595  0047  0085               	movwf	5
  1596  0048  3081               	movlw	129
  1597  0049  00FE               	movwf	btemp
  1598  004A  3000               	movlw	0
  1599  004B  00FF               	movwf	btemp+1
  1600  004C  318D  2548  3180   	fcall	clear_ram0
  1601                           
  1602                           ; Clear objects allocated to COMMON
  1603  004F  01FC               	clrf	__pbssCOMMON& (0+127)
  1604                           
  1605                           ; Clear objects allocated to BANK0
  1606  0050  3020               	movlw	low __pbssBANK0
  1607  0051  0084               	movwf	4
  1608  0052  3000               	movlw	high __pbssBANK0
  1609  0053  0085               	movwf	5
  1610  0054  303A               	movlw	58
  1611  0055  00FE               	movwf	btemp
  1612  0056  3000               	movlw	0
  1613  0057  00FF               	movwf	btemp+1
  1614  0058  318D  2548  3180   	fcall	clear_ram0
  1615                           
  1616                           ; Clear objects allocated to BANK1
  1617  005B  30A0               	movlw	low __pbssBANK1
  1618  005C  0084               	movwf	4
  1619  005D  3000               	movlw	high __pbssBANK1
  1620  005E  0085               	movwf	5
  1621  005F  3022               	movlw	34
  1622  0060  00FE               	movwf	btemp
  1623  0061  3000               	movlw	0
  1624  0062  00FF               	movwf	btemp+1
  1625  0063  318D  2548  3180   	fcall	clear_ram0
  1626  0066                     end_of_initialization:	
  1627                           ;End of C runtime variable initialization code
  1628                           
  1629  0066                     __end_of__initialization:
  1630  0066  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1631  0067  0020               	movlb	0
  1632  0068  3180  286A         	ljmp	_main	;jump to C main() function
  1633                           
  1634                           	psect	bssCOMMON
  1635  007C                     __pbssCOMMON:
  1636  007C                     _eusartRxHead:
  1637  007C                     	ds	1
  1638                           
  1639                           	psect	bssBANK0
  1640  0020                     __pbssBANK0:
  1641  0020                     _cmd_timer_len:
  1642  0020                     	ds	4
  1643  0024                     _cmd_time:
  1644  0024                     	ds	4
  1645  0028                     _receive_timer_len:
  1646  0028                     	ds	4
  1647  002C                     _receive_time:
  1648  002C                     	ds	4
  1649  0030                     send_stat@F3032:
  1650  0030                     	ds	2
  1651  0032                     main@old_cmd_exe_counter:
  1652  0032                     	ds	2
  1653  0034                     _cmd_exe_counter:
  1654  0034                     	ds	2
  1655  0036                     TMR2_ISR@CountCallBack:
  1656  0036                     	ds	2
  1657  0038                     _TMR2_InterruptHandler:
  1658  0038                     	ds	2
  1659  003A                     _ADC_InterruptHandler:
  1660  003A                     	ds	2
  1661  003C                     _EUSART_ErrorHandler:
  1662  003C                     	ds	2
  1663  003E                     _EUSART_OverrunErrorHandler:
  1664  003E                     	ds	2
  1665  0040                     _EUSART_FramingErrorHandler:
  1666  0040                     	ds	2
  1667  0042                     _EUSART_RxDefaultInterruptHandler:
  1668  0042                     	ds	2
  1669  0044                     _EUSART_TxDefaultInterruptHandler:
  1670  0044                     	ds	2
  1671  0046                     main@last_state:
  1672  0046                     	ds	1
  1673  0047                     main@data_storage_counter:
  1674  0047                     	ds	1
  1675  0048                     main@control_byte:
  1676  0048                     	ds	1
  1677  0049                     _button:
  1678  0049                     	ds	1
  1679  004A                     _button_status:
  1680  004A                     	ds	1
  1681  004B                     _new_hall_code_close:
  1682  004B                     	ds	1
  1683  004C                     _new_hall_code_open:
  1684  004C                     	ds	1
  1685  004D                     _lock_status:
  1686  004D                     	ds	1
  1687  004E                     _status_storage:
  1688  004E                     	ds	1
  1689  004F                     _request_storage:
  1690  004F                     	ds	1
  1691  0050                     _cmd:
  1692  0050                     	ds	1
  1693  0051                     _cmd_exe:
  1694  0051                     	ds	1
  1695  0052                     _cmd_state:
  1696  0052                     	ds	1
  1697  0053                     _working_state:
  1698  0053                     	ds	1
  1699  0054                     _eusartRxLastError:
  1700  0054                     	ds	1
  1701  0055                     _eusartRxCount:
  1702  0055                     	ds	1
  1703  0056                     _eusartRxTail:
  1704  0056                     	ds	1
  1705  0057                     _eusartTxBufferRemaining:
  1706  0057                     	ds	1
  1707  0058                     _eusartTxTail:
  1708  0058                     	ds	1
  1709  0059                     _eusartTxHead:
  1710  0059                     	ds	1
  1711                           
  1712                           	psect	dataBANK0
  1713  006E                     __pdataBANK0:
  1714  006E                     _hall_codes:
  1715  006E                     	ds	2
  1716                           
  1717                           	psect	bssBANK1
  1718  00A0                     __pbssBANK1:
  1719  00A0                     _eusartRxStatusBuffer:
  1720  00A0                     	ds	8
  1721  00A8                     _eusartRxBuffer:
  1722  00A8                     	ds	8
  1723  00B0                     _eusartTxBuffer:
  1724  00B0                     	ds	8
  1725  00B8                     _button_time:
  1726  00B8                     	ds	4
  1727  00BC                     send_req@F3022:
  1728  00BC                     	ds	3
  1729  00BF                     send_cmd@F3018:
  1730  00BF                     	ds	3
  1731                           
  1732                           	psect	clrtext
  1733  0D48                     clear_ram0:	
  1734                           ;	Called with FSR0 containing the base address, and
  1735                           ;	btemp/btemp+1 has the size to clear
  1736                           
  1737  0D48  0064               	clrwdt	;clear the watchdog before getting into this loop
  1738  0D49                     clrloop0:
  1739  0D49  0180               	clrf	0	;clear RAM location pointed to by FSR
  1740  0D4A  3101               	addfsr 0,1
  1741  0D4B  3001               	movlw	1
  1742  0D4C  02FE               	subwf	btemp,f
  1743  0D4D  3000               	movlw	0
  1744  0D4E  3BFF               	subwfb	btemp+1,f
  1745  0D4F  087F               	movf	btemp+1,w
  1746  0D50  047E               	iorwf	btemp,w
  1747  0D51  1D03               	skipz
  1748  0D52  2D49               	goto	clrloop0	;have we reached the end yet?
  1749  0D53  3400               	retlw	0	;all done for this memory range, return
  1750                           
  1751                           	psect	cstackCOMMON
  1752  0070                     __pcstackCOMMON:
  1753  0070                     ?_PIN_MANAGER_Initialize:
  1754  0070                     ?_OSCILLATOR_Initialize:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0070                     ?_WDT_Initialize:	
  1758                           ; 1 bytes @ 0x0
  1759                           
  1760  0070                     ?_TMR2_Initialize:	
  1761                           ; 1 bytes @ 0x0
  1762                           
  1763  0070                     ?_ADC_Initialize:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0070                     ?_EUSART_Initialize:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769  0070                     ?_EUSART_Receive_ISR:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772  0070                     ?_EUSART_Transmit_ISR:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  0070                     ??_EUSART_Transmit_ISR:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1788                           ; 1 bytes @ 0x0
  1789                           
  1790  0070                     ?_EUSART_DefaultErrorHandler:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  0070                     ?_EUSART_RxDataHandler:	
  1794                           ; 1 bytes @ 0x0
  1795                           
  1796  0070                     ??_EUSART_RxDataHandler:	
  1797                           ; 1 bytes @ 0x0
  1798                           
  1799  0070                     ?_TMR2_ISR:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0070                     ?_TMR2_DefaultInterruptHandler:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0070                     ??_TMR2_DefaultInterruptHandler:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0070                     ?_TMR2_CallBack:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0070                     ?_read_hall_codes:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0070                     ?_stop_cmd:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0070                     ?_send_stat:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0070                     ?_send_req:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0070                     ?_wait_for_requested:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  0070                     ?_SYSTEM_Initialize:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  0070                     ?_DATAEE_ReadByte:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0070                     ?_EUSART_is_rx_ready:	
  1833                           ; 1 bytes @ 0x0
  1834                           
  1835  0070                     ?_EUSART_is_tx_done:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  0070                     ?_EUSART_Read:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841  0070                     ?_EUSART_Write:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0070                     ?_INTERRUPT_InterruptManager:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0070                     ?_ADC_StartConversion:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850  0070                     ?_ADC_IsConversionDone:	
  1851                           ; 1 bytes @ 0x0
  1852                           
  1853  0070                     ?_ADC_GetConversionResult:	
  1854                           ; 1 bytes @ 0x0
  1855                           
  1856  0070                     ?_timer_up:	
  1857                           ; 1 bytes @ 0x0
  1858                           
  1859  0070                     ??_timer_up:	
  1860                           ; 1 bytes @ 0x0
  1861                           
  1862  0070                     ?_main:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865                           
  1866                           ; 1 bytes @ 0x0
  1867  0070                     	ds	1
  1868  0071                     ??_PIN_MANAGER_Initialize:
  1869  0071                     ??_OSCILLATOR_Initialize:	
  1870                           ; 1 bytes @ 0x1
  1871                           
  1872  0071                     ??_WDT_Initialize:	
  1873                           ; 1 bytes @ 0x1
  1874                           
  1875  0071                     ??_ADC_Initialize:	
  1876                           ; 1 bytes @ 0x1
  1877                           
  1878  0071                     ?_EUSART_SetRxInterruptHandler:	
  1879                           ; 1 bytes @ 0x1
  1880                           
  1881  0071                     ??_EUSART_Receive_ISR:	
  1882                           ; 1 bytes @ 0x1
  1883                           
  1884  0071                     ?_EUSART_SetTxInterruptHandler:	
  1885                           ; 1 bytes @ 0x1
  1886                           
  1887  0071                     ?_EUSART_SetFramingErrorHandler:	
  1888                           ; 1 bytes @ 0x1
  1889                           
  1890  0071                     ?_EUSART_SetOverrunErrorHandler:	
  1891                           ; 1 bytes @ 0x1
  1892                           
  1893  0071                     ?_EUSART_SetErrorHandler:	
  1894                           ; 1 bytes @ 0x1
  1895                           
  1896  0071                     ??_EUSART_DefaultErrorHandler:	
  1897                           ; 1 bytes @ 0x1
  1898                           
  1899  0071                     ??_TMR2_ISR:	
  1900                           ; 1 bytes @ 0x1
  1901                           
  1902  0071                     ?_TMR2_SetInterruptHandler:	
  1903                           ; 1 bytes @ 0x1
  1904                           
  1905  0071                     ??_TMR2_CallBack:	
  1906                           ; 1 bytes @ 0x1
  1907                           
  1908  0071                     ??_stop_cmd:	
  1909                           ; 1 bytes @ 0x1
  1910                           
  1911  0071                     ??_wait_for_requested:	
  1912                           ; 1 bytes @ 0x1
  1913                           
  1914  0071                     ?_DATAEE_WriteByte:	
  1915                           ; 1 bytes @ 0x1
  1916                           
  1917  0071                     ??_DATAEE_ReadByte:	
  1918                           ; 1 bytes @ 0x1
  1919                           
  1920  0071                     ??_EUSART_is_rx_ready:	
  1921                           ; 1 bytes @ 0x1
  1922                           
  1923  0071                     ??_EUSART_is_tx_done:	
  1924                           ; 1 bytes @ 0x1
  1925                           
  1926  0071                     ??_EUSART_Read:	
  1927                           ; 1 bytes @ 0x1
  1928                           
  1929  0071                     ??_EUSART_Write:	
  1930                           ; 1 bytes @ 0x1
  1931                           
  1932  0071                     ??_INTERRUPT_InterruptManager:	
  1933                           ; 1 bytes @ 0x1
  1934                           
  1935  0071                     ??_ADC_StartConversion:	
  1936                           ; 1 bytes @ 0x1
  1937                           
  1938  0071                     ??_ADC_IsConversionDone:	
  1939                           ; 1 bytes @ 0x1
  1940                           
  1941  0071                     ??_ADC_GetConversionResult:	
  1942                           ; 1 bytes @ 0x1
  1943                           
  1944  0071                     ?_del_array:	
  1945                           ; 1 bytes @ 0x1
  1946                           
  1947  0071                     ?_seek_confirmation:	
  1948                           ; 1 bytes @ 0x1
  1949                           
  1950  0071                     ?___wmul:	
  1951                           ; 2 bytes @ 0x1
  1952                           
  1953  0071                     DATAEE_WriteByte@bData:	
  1954                           ; 2 bytes @ 0x1
  1955                           
  1956  0071                     DATAEE_ReadByte@bAdd:	
  1957                           ; 1 bytes @ 0x1
  1958                           
  1959  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1960                           ; 1 bytes @ 0x1
  1961                           
  1962  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1963                           ; 2 bytes @ 0x1
  1964                           
  1965  0071                     EUSART_SetErrorHandler@interruptHandler:	
  1966                           ; 2 bytes @ 0x1
  1967                           
  1968  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1969                           ; 2 bytes @ 0x1
  1970                           
  1971  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1972                           ; 2 bytes @ 0x1
  1973                           
  1974  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  1975                           ; 2 bytes @ 0x1
  1976                           
  1977  0071                     del_array@array:	
  1978                           ; 2 bytes @ 0x1
  1979                           
  1980  0071                     seek_confirmation@wait_num:	
  1981                           ; 2 bytes @ 0x1
  1982                           
  1983  0071                     ___wmul@multiplier:	
  1984                           ; 2 bytes @ 0x1
  1985                           
  1986                           
  1987                           ; 2 bytes @ 0x1
  1988  0071                     	ds	1
  1989  0072                     ??_read_hall_codes:
  1990  0072                     ?_compare_pw:	
  1991                           ; 1 bytes @ 0x2
  1992                           
  1993  0072                     ??_DATAEE_WriteByte:	
  1994                           ; 1 bytes @ 0x2
  1995                           
  1996  0072                     DATAEE_WriteByte@bAdd:	
  1997                           ; 1 bytes @ 0x2
  1998                           
  1999  0072                     EUSART_Read@readValue:	
  2000                           ; 1 bytes @ 0x2
  2001                           
  2002  0072                     EUSART_Write@txData:	
  2003                           ; 1 bytes @ 0x2
  2004                           
  2005  0072                     wait_for_requested@req:	
  2006                           ; 1 bytes @ 0x2
  2007                           
  2008  0072                     compare_pw@pw:	
  2009                           ; 1 bytes @ 0x2
  2010                           
  2011                           
  2012                           ; 2 bytes @ 0x2
  2013  0072                     	ds	1
  2014  0073                     ??_TMR2_Initialize:
  2015  0073                     ??_EUSART_Initialize:	
  2016                           ; 1 bytes @ 0x3
  2017                           
  2018  0073                     ??_EUSART_SetRxInterruptHandler:	
  2019                           ; 1 bytes @ 0x3
  2020                           
  2021  0073                     ??_EUSART_SetTxInterruptHandler:	
  2022                           ; 1 bytes @ 0x3
  2023                           
  2024  0073                     ??_EUSART_SetFramingErrorHandler:	
  2025                           ; 1 bytes @ 0x3
  2026                           
  2027  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2028                           ; 1 bytes @ 0x3
  2029                           
  2030  0073                     ??_EUSART_SetErrorHandler:	
  2031                           ; 1 bytes @ 0x3
  2032                           
  2033  0073                     ??_TMR2_SetInterruptHandler:	
  2034                           ; 1 bytes @ 0x3
  2035                           
  2036  0073                     ?_send_msg_stopping:	
  2037                           ; 1 bytes @ 0x3
  2038                           
  2039  0073                     DATAEE_WriteByte@GIEBitValue:	
  2040                           ; 1 bytes @ 0x3
  2041                           
  2042  0073                     del_array@len:	
  2043                           ; 1 bytes @ 0x3
  2044                           
  2045  0073                     send_msg_stopping@msg:	
  2046                           ; 2 bytes @ 0x3
  2047                           
  2048  0073                     seek_confirmation@continue_num:	
  2049                           ; 2 bytes @ 0x3
  2050                           
  2051  0073                     ___wmul@multiplicand:	
  2052                           ; 2 bytes @ 0x3
  2053                           
  2054                           
  2055                           ; 2 bytes @ 0x3
  2056  0073                     	ds	1
  2057  0074                     ?_save_pw:
  2058  0074                     ?_save_hall_codes:	
  2059                           ; 1 bytes @ 0x4
  2060                           
  2061  0074                     ??_SYSTEM_Initialize:	
  2062                           ; 1 bytes @ 0x4
  2063                           
  2064  0074                     compare_pw@len:	
  2065                           ; 1 bytes @ 0x4
  2066                           
  2067  0074                     save_hall_codes@close:	
  2068                           ; 1 bytes @ 0x4
  2069                           
  2070  0074                     save_pw@pw:	
  2071                           ; 1 bytes @ 0x4
  2072                           
  2073                           
  2074                           ; 2 bytes @ 0x4
  2075  0074                     	ds	1
  2076  0075                     ??_compare_pw:
  2077  0075                     ??_save_hall_codes:	
  2078                           ; 1 bytes @ 0x5
  2079                           
  2080  0075                     ??_del_array:	
  2081                           ; 1 bytes @ 0x5
  2082                           
  2083  0075                     ??___wmul:	
  2084                           ; 1 bytes @ 0x5
  2085                           
  2086  0075                     send_msg_stopping@len:	
  2087                           ; 1 bytes @ 0x5
  2088                           
  2089  0075                     seek_confirmation@retry_num:	
  2090                           ; 1 bytes @ 0x5
  2091                           
  2092  0075                     ___wmul@product:	
  2093                           ; 2 bytes @ 0x5
  2094                           
  2095                           
  2096                           ; 2 bytes @ 0x5
  2097  0075                     	ds	1
  2098  0076                     ??_send_msg_stopping:
  2099  0076                     compare_pw@indata:	
  2100                           ; 1 bytes @ 0x6
  2101                           
  2102  0076                     save_pw@len:	
  2103                           ; 1 bytes @ 0x6
  2104                           
  2105  0076                     save_hall_codes@open:	
  2106                           ; 1 bytes @ 0x6
  2107                           
  2108  0076                     del_array@x:	
  2109                           ; 1 bytes @ 0x6
  2110                           
  2111                           
  2112                           ; 2 bytes @ 0x6
  2113  0076                     	ds	1
  2114  0077                     ??_save_pw:
  2115  0077                     ?___awdiv:	
  2116                           ; 1 bytes @ 0x7
  2117                           
  2118  0077                     compare_pw@res:	
  2119                           ; 2 bytes @ 0x7
  2120                           
  2121  0077                     send_msg_stopping@x:	
  2122                           ; 1 bytes @ 0x7
  2123                           
  2124  0077                     seek_confirmation@cancel_num:	
  2125                           ; 2 bytes @ 0x7
  2126                           
  2127  0077                     ___awdiv@divisor:	
  2128                           ; 2 bytes @ 0x7
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x7
  2132  0077                     	ds	1
  2133  0078                     compare_pw@eedata:
  2134  0078                     save_pw@x:	
  2135                           ; 1 bytes @ 0x8
  2136                           
  2137                           
  2138                           ; 2 bytes @ 0x8
  2139  0078                     	ds	1
  2140  0079                     ??_send_stat:
  2141  0079                     ??_send_req:	
  2142                           ; 1 bytes @ 0x9
  2143                           
  2144  0079                     ??_seek_confirmation:	
  2145                           ; 1 bytes @ 0x9
  2146                           
  2147  0079                     compare_pw@x:	
  2148                           ; 1 bytes @ 0x9
  2149                           
  2150  0079                     ___awdiv@dividend:	
  2151                           ; 2 bytes @ 0x9
  2152                           
  2153                           
  2154                           ; 2 bytes @ 0x9
  2155  0079                     	ds	2
  2156  007B                     ??___awdiv:
  2157                           
  2158                           ; 1 bytes @ 0xB
  2159  007B                     	ds	1
  2160                           
  2161                           	psect	cstackBANK0
  2162  005A                     __pcstackBANK0:
  2163  005A                     send_req@var:
  2164  005A                     send_stat@stat:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  005A                     ___awdiv@counter:	
  2168                           ; 1 bytes @ 0x0
  2169                           
  2170                           
  2171                           ; 1 bytes @ 0x0
  2172  005A                     	ds	1
  2173  005B                     ___awdiv@sign:
  2174  005B                     send_stat@status_protocol:	
  2175                           ; 1 bytes @ 0x1
  2176                           
  2177  005B                     send_req@request_protocol:	
  2178                           ; 2 bytes @ 0x1
  2179                           
  2180                           
  2181                           ; 3 bytes @ 0x1
  2182  005B                     	ds	1
  2183  005C                     ___awdiv@quotient:
  2184                           
  2185                           ; 2 bytes @ 0x2
  2186  005C                     	ds	2
  2187  005E                     ?_door_status_changed:
  2188  005E                     door_status_changed@val:	
  2189                           ; 1 bytes @ 0x4
  2190                           
  2191                           
  2192                           ; 2 bytes @ 0x4
  2193  005E                     	ds	2
  2194  0060                     ??_door_status_changed:
  2195                           
  2196                           ; 1 bytes @ 0x6
  2197  0060                     	ds	4
  2198  0064                     door_status_changed@open_or_close:
  2199                           
  2200                           ; 1 bytes @ 0xA
  2201  0064                     	ds	1
  2202  0065                     ??_main:
  2203                           
  2204                           ; 1 bytes @ 0xB
  2205  0065                     	ds	6
  2206  006B                     main@res:
  2207                           
  2208                           ; 1 bytes @ 0x11
  2209  006B                     	ds	1
  2210  006C                     main@res_914:
  2211                           
  2212                           ; 1 bytes @ 0x12
  2213  006C                     	ds	1
  2214  006D                     main@input:
  2215                           
  2216                           ; 1 bytes @ 0x13
  2217  006D                     	ds	1
  2218                           
  2219                           	psect	maintext
  2220  006A                     __pmaintext:	
  2221 ;;
  2222 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2223 ;;
  2224 ;; *************** function _main *****************
  2225 ;; Defined at:
  2226 ;;		line 152 in file "main.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  res             1   18[BANK0 ] unsigned char 
  2231 ;;  res             1   17[BANK0 ] unsigned char 
  2232 ;;  input           1   19[BANK0 ] unsigned char 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2237 ;; Tracked objects:
  2238 ;;		On entry : B1F/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2242 ;;      Params:         0       0       0       0       0       0
  2243 ;;      Locals:         0       3       0       0       0       0
  2244 ;;      Temps:          0       6       0       0       0       0
  2245 ;;      Totals:         0       9       0       0       0       0
  2246 ;;Total ram usage:        9 bytes
  2247 ;; Hardware stack levels required when called: 7
  2248 ;; This function calls:
  2249 ;;		_ADC_GetConversionResult
  2250 ;;		_ADC_Initialize
  2251 ;;		_ADC_IsConversionDone
  2252 ;;		_ADC_StartConversion
  2253 ;;		_EUSART_Initialize
  2254 ;;		_EUSART_Read
  2255 ;;		_EUSART_is_rx_ready
  2256 ;;		_SYSTEM_Initialize
  2257 ;;		_TMR2_Initialize
  2258 ;;		_TMR2_SetInterruptHandler
  2259 ;;		_compare_pw
  2260 ;;		_door_status_changed
  2261 ;;		_read_hall_codes
  2262 ;;		_save_hall_codes
  2263 ;;		_save_pw
  2264 ;;		_seek_confirmation
  2265 ;;		_send_req
  2266 ;;		_send_stat
  2267 ;;		_stop_cmd
  2268 ;;		_wait_for_requested
  2269 ;; This function is called by:
  2270 ;;		Startup code after reset
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           
  2275                           ;psect for function _main
  2276  006A                     _main:
  2277  006A                     l4395:	
  2278                           ;incstack = 0
  2279                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2280                           
  2281                           
  2282                           ;main.c: 154:     SYSTEM_Initialize();
  2283  006A  318D  2584  3180   	fcall	_SYSTEM_Initialize
  2284                           
  2285                           ;main.c: 155:     EUSART_Initialize();
  2286  006D  318F  27C0  3180   	fcall	_EUSART_Initialize
  2287                           
  2288                           ;main.c: 156:     ADC_Initialize();
  2289  0070  318D  251F  3180   	fcall	_ADC_Initialize
  2290                           
  2291                           ;main.c: 157:     TMR2_Initialize();
  2292  0073  318D  2572  3180   	fcall	_TMR2_Initialize
  2293  0076                     l4397:
  2294                           
  2295                           ;main.c: 163:     (INTCONbits.GIE = 1);
  2296  0076  178B               	bsf	11,7	;volatile
  2297  0077                     l4399:
  2298                           
  2299                           ;main.c: 166:     (INTCONbits.PEIE = 1);
  2300  0077  170B               	bsf	11,6	;volatile
  2301  0078                     l4401:
  2302                           
  2303                           ;main.c: 168:     ADC_StartConversion();
  2304  0078  318C  24E1  3180   	fcall	_ADC_StartConversion
  2305  007B                     l4403:
  2306                           
  2307                           ;main.c: 169:     TMR2_SetInterruptHandler(timer_up);
  2308  007B  307B               	movlw	low _timer_up
  2309  007C  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2310  007D  3006               	movlw	high _timer_up
  2311  007E  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2312  007F  318D  2512  3180   	fcall	_TMR2_SetInterruptHandler
  2313  0082                     l4405:
  2314                           
  2315                           ;main.c: 171:     read_hall_codes();
  2316  0082  318D  2561  3180   	fcall	_read_hall_codes
  2317  0085                     l4407:
  2318                           
  2319                           ;main.c: 175:         if(receive_timer_len > 0 && receive_time > receive_timer_len) {
  2320  0085  0020               	movlb	0	; select bank0
  2321  0086  1BAB               	btfsc	_receive_timer_len+3,7
  2322  0087  2896               	goto	u2651
  2323  0088  082B               	movf	_receive_timer_len+3,w
  2324  0089  1D03               	btfss	3,2
  2325  008A  2897               	goto	u2650
  2326  008B  082A               	movf	_receive_timer_len+2,w
  2327  008C  1D03               	btfss	3,2
  2328  008D  2897               	goto	u2650
  2329  008E  0829               	movf	_receive_timer_len+1,w
  2330  008F  1D03               	btfss	3,2
  2331  0090  2897               	goto	u2650
  2332  0091  3001               	movlw	1
  2333  0092  0228               	subwf	_receive_timer_len,w
  2334  0093  1C03               	btfss	3,0
  2335  0094  2896               	goto	u2651
  2336  0095  2897               	goto	u2650
  2337  0096                     u2651:
  2338  0096  28C1               	goto	l4415
  2339  0097                     u2650:
  2340  0097                     l4409:
  2341  0097  0020               	movlb	0	; select bank0
  2342  0098  082B               	movf	_receive_timer_len+3,w
  2343  0099  3A80               	xorlw	128
  2344  009A  00E5               	movwf	??_main
  2345  009B  082F               	movf	_receive_time+3,w
  2346  009C  3A80               	xorlw	128
  2347  009D  0265               	subwf	??_main,w
  2348  009E  1D03               	skipz
  2349  009F  28AA               	goto	u2663
  2350  00A0  082E               	movf	_receive_time+2,w
  2351  00A1  022A               	subwf	_receive_timer_len+2,w
  2352  00A2  1D03               	skipz
  2353  00A3  28AA               	goto	u2663
  2354  00A4  082D               	movf	_receive_time+1,w
  2355  00A5  0229               	subwf	_receive_timer_len+1,w
  2356  00A6  1D03               	skipz
  2357  00A7  28AA               	goto	u2663
  2358  00A8  082C               	movf	_receive_time,w
  2359  00A9  0228               	subwf	_receive_timer_len,w
  2360  00AA                     u2663:
  2361  00AA  1803               	skipnc
  2362  00AB  28AD               	goto	u2661
  2363  00AC  28AE               	goto	u2660
  2364  00AD                     u2661:
  2365  00AD  28C1               	goto	l4415
  2366  00AE                     u2660:
  2367  00AE                     l4411:
  2368                           
  2369                           ;main.c: 176:             receive_time = 0;
  2370  00AE  3000               	movlw	0
  2371  00AF  00AF               	movwf	_receive_time+3
  2372  00B0  3000               	movlw	0
  2373  00B1  00AE               	movwf	_receive_time+2
  2374  00B2  3000               	movlw	0
  2375  00B3  00AD               	movwf	_receive_time+1
  2376  00B4  3000               	movlw	0
  2377  00B5  00AC               	movwf	_receive_time
  2378                           
  2379                           ;main.c: 177:             receive_timer_len = 0;
  2380  00B6  3000               	movlw	0
  2381  00B7  00AB               	movwf	_receive_timer_len+3
  2382  00B8  3000               	movlw	0
  2383  00B9  00AA               	movwf	_receive_timer_len+2
  2384  00BA  3000               	movlw	0
  2385  00BB  00A9               	movwf	_receive_timer_len+1
  2386  00BC  3000               	movlw	0
  2387  00BD  00A8               	movwf	_receive_timer_len
  2388  00BE                     l4413:
  2389                           
  2390                           ;main.c: 178:             stop_cmd();
  2391  00BE  318D  2597  3180   	fcall	_stop_cmd
  2392  00C1                     l4415:
  2393                           
  2394                           ;main.c: 180:         if(cmd_timer_len > 0 && cmd_time > cmd_timer_len) {
  2395  00C1  0020               	movlb	0	; select bank0
  2396  00C2  1BA3               	btfsc	_cmd_timer_len+3,7
  2397  00C3  28D2               	goto	u2671
  2398  00C4  0823               	movf	_cmd_timer_len+3,w
  2399  00C5  1D03               	btfss	3,2
  2400  00C6  28D3               	goto	u2670
  2401  00C7  0822               	movf	_cmd_timer_len+2,w
  2402  00C8  1D03               	btfss	3,2
  2403  00C9  28D3               	goto	u2670
  2404  00CA  0821               	movf	_cmd_timer_len+1,w
  2405  00CB  1D03               	btfss	3,2
  2406  00CC  28D3               	goto	u2670
  2407  00CD  3001               	movlw	1
  2408  00CE  0220               	subwf	_cmd_timer_len,w
  2409  00CF  1C03               	btfss	3,0
  2410  00D0  28D2               	goto	u2671
  2411  00D1  28D3               	goto	u2670
  2412  00D2                     u2671:
  2413  00D2  28F1               	goto	l4423
  2414  00D3                     u2670:
  2415  00D3                     l4417:
  2416  00D3  0020               	movlb	0	; select bank0
  2417  00D4  0823               	movf	_cmd_timer_len+3,w
  2418  00D5  3A80               	xorlw	128
  2419  00D6  00E5               	movwf	??_main
  2420  00D7  0827               	movf	_cmd_time+3,w
  2421  00D8  3A80               	xorlw	128
  2422  00D9  0265               	subwf	??_main,w
  2423  00DA  1D03               	skipz
  2424  00DB  28E6               	goto	u2683
  2425  00DC  0826               	movf	_cmd_time+2,w
  2426  00DD  0222               	subwf	_cmd_timer_len+2,w
  2427  00DE  1D03               	skipz
  2428  00DF  28E6               	goto	u2683
  2429  00E0  0825               	movf	_cmd_time+1,w
  2430  00E1  0221               	subwf	_cmd_timer_len+1,w
  2431  00E2  1D03               	skipz
  2432  00E3  28E6               	goto	u2683
  2433  00E4  0824               	movf	_cmd_time,w
  2434  00E5  0220               	subwf	_cmd_timer_len,w
  2435  00E6                     u2683:
  2436  00E6  1803               	skipnc
  2437  00E7  28E9               	goto	u2681
  2438  00E8  28EA               	goto	u2680
  2439  00E9                     u2681:
  2440  00E9  28F1               	goto	l4423
  2441  00EA                     u2680:
  2442  00EA                     l4419:
  2443                           
  2444                           ;main.c: 181:             send_stat(CANCELD);
  2445  00EA  3008               	movlw	8
  2446  00EB  3187  27E7  3180   	fcall	_send_stat
  2447  00EE                     l4421:
  2448                           
  2449                           ;main.c: 182:             stop_cmd();
  2450  00EE  318D  2597  3180   	fcall	_stop_cmd
  2451  00F1                     l4423:
  2452                           
  2453                           ;main.c: 184:         if (EUSART_is_rx_ready()) {
  2454  00F1  318D  2527  3180   	fcall	_EUSART_is_rx_ready
  2455  00F4  3A00               	xorlw	0
  2456  00F5  1903               	skipnz
  2457  00F6  28F8               	goto	u2691
  2458  00F7  28F9               	goto	u2690
  2459  00F8                     u2691:
  2460  00F8  2AAB               	goto	l4553
  2461  00F9                     u2690:
  2462  00F9                     l4425:
  2463                           
  2464                           ;main.c: 185:             receive_timer_len = 50;
  2465  00F9  3000               	movlw	0
  2466  00FA  0020               	movlb	0	; select bank0
  2467  00FB  00AB               	movwf	_receive_timer_len+3
  2468  00FC  3000               	movlw	0
  2469  00FD  00AA               	movwf	_receive_timer_len+2
  2470  00FE  3000               	movlw	0
  2471  00FF  00A9               	movwf	_receive_timer_len+1
  2472  0100  3032               	movlw	50
  2473  0101  00A8               	movwf	_receive_timer_len
  2474                           
  2475                           ;main.c: 186:             receive_time = 0;
  2476  0102  3000               	movlw	0
  2477  0103  00AF               	movwf	_receive_time+3
  2478  0104  3000               	movlw	0
  2479  0105  00AE               	movwf	_receive_time+2
  2480  0106  3000               	movlw	0
  2481  0107  00AD               	movwf	_receive_time+1
  2482  0108  3000               	movlw	0
  2483  0109  00AC               	movwf	_receive_time
  2484  010A                     l4427:
  2485                           
  2486                           ;main.c: 187:             uint8_t input = EUSART_Read();
  2487  010A  318E  26D4  3180   	fcall	_EUSART_Read
  2488  010D  0020               	movlb	0	; select bank0
  2489  010E  00E5               	movwf	??_main
  2490  010F  0865               	movf	??_main,w
  2491  0110  00ED               	movwf	main@input
  2492                           
  2493                           ;main.c: 188:             static uint8_t control_byte;;main.c: 189:             static u
      +                          int8_t data_storage_counter = 0;;main.c: 190:             static enum commandcontroll la
      +                          st_state = WAITFORCMD;;main.c: 191:             switch (cmd_state) {
  2494  0111  2A7F               	goto	l4547
  2495  0112                     l4429:
  2496                           
  2497                           ;main.c: 193:                     last_state = cmd_state;
  2498  0112  0852               	movf	_cmd_state,w
  2499  0113  00E5               	movwf	??_main
  2500  0114  0865               	movf	??_main,w
  2501  0115  00C6               	movwf	main@last_state
  2502  0116                     l4431:
  2503                           
  2504                           ;main.c: 194:                     if (input == 0b10000001) cmd_state = READCMD;
  2505  0116  3081               	movlw	129
  2506  0117  066D               	xorwf	main@input,w
  2507  0118  1D03               	btfss	3,2
  2508  0119  291B               	goto	u2701
  2509  011A  291C               	goto	u2700
  2510  011B                     u2701:
  2511  011B  291F               	goto	l4435
  2512  011C                     u2700:
  2513  011C                     l4433:
  2514  011C  01D2               	clrf	_cmd_state
  2515  011D  0AD2               	incf	_cmd_state,f
  2516  011E  293F               	goto	l496
  2517  011F                     l4435:
  2518  011F  3042               	movlw	66
  2519  0120  066D               	xorwf	main@input,w
  2520  0121  1D03               	btfss	3,2
  2521  0122  2924               	goto	u2711
  2522  0123  2925               	goto	u2710
  2523  0124                     u2711:
  2524  0124  292A               	goto	l4439
  2525  0125                     u2710:
  2526  0125                     l4437:
  2527  0125  3002               	movlw	2
  2528  0126  00E5               	movwf	??_main
  2529  0127  0865               	movf	??_main,w
  2530  0128  00D2               	movwf	_cmd_state
  2531  0129  293F               	goto	l496
  2532  012A                     l4439:
  2533  012A  3024               	movlw	36
  2534  012B  066D               	xorwf	main@input,w
  2535  012C  1D03               	btfss	3,2
  2536  012D  292F               	goto	u2721
  2537  012E  2930               	goto	u2720
  2538  012F                     u2721:
  2539  012F  2935               	goto	l4443
  2540  0130                     u2720:
  2541  0130                     l4441:
  2542  0130  3004               	movlw	4
  2543  0131  00E5               	movwf	??_main
  2544  0132  0865               	movf	??_main,w
  2545  0133  00D2               	movwf	_cmd_state
  2546  0134  293F               	goto	l496
  2547  0135                     l4443:
  2548  0135  3018               	movlw	24
  2549  0136  066D               	xorwf	main@input,w
  2550  0137  1D03               	btfss	3,2
  2551  0138  293A               	goto	u2731
  2552  0139  293B               	goto	u2730
  2553  013A                     u2731:
  2554  013A  293F               	goto	l496
  2555  013B                     u2730:
  2556  013B                     l4445:
  2557  013B  3006               	movlw	6
  2558  013C  00E5               	movwf	??_main
  2559  013D  0865               	movf	??_main,w
  2560  013E  00D2               	movwf	_cmd_state
  2561  013F                     l496:
  2562                           
  2563                           ;main.c: 198:                     control_byte = input;
  2564  013F  086D               	movf	main@input,w
  2565  0140  00E5               	movwf	??_main
  2566  0141  0865               	movf	??_main,w
  2567  0142  00C8               	movwf	main@control_byte
  2568                           
  2569                           ;main.c: 199:                     break;
  2570  0143  2AA1               	goto	l4549
  2571  0144                     l4447:
  2572                           
  2573                           ;main.c: 201:                     cmd = input;
  2574  0144  086D               	movf	main@input,w
  2575  0145  00E5               	movwf	??_main
  2576  0146  0865               	movf	??_main,w
  2577  0147  00D0               	movwf	_cmd
  2578                           
  2579                           ;main.c: 202:                     last_state = cmd_state;
  2580  0148  0852               	movf	_cmd_state,w
  2581  0149  00E5               	movwf	??_main
  2582  014A  0865               	movf	??_main,w
  2583  014B  00C6               	movwf	main@last_state
  2584                           
  2585                           ;main.c: 203:                     cmd_state = COMP;
  2586  014C  3007               	movlw	7
  2587  014D  00E5               	movwf	??_main
  2588  014E  0865               	movf	??_main,w
  2589  014F  00D2               	movwf	_cmd_state
  2590                           
  2591                           ;main.c: 204:                     break;
  2592  0150  2AA1               	goto	l4549
  2593  0151                     l4449:
  2594                           
  2595                           ;main.c: 206:                     request_storage = input;
  2596  0151  086D               	movf	main@input,w
  2597  0152  00E5               	movwf	??_main
  2598  0153  0865               	movf	??_main,w
  2599  0154  00CF               	movwf	_request_storage
  2600                           
  2601                           ;main.c: 207:                     last_state = cmd_state;
  2602  0155  0852               	movf	_cmd_state,w
  2603  0156  00E5               	movwf	??_main
  2604  0157  0865               	movf	??_main,w
  2605  0158  00C6               	movwf	main@last_state
  2606                           
  2607                           ;main.c: 208:                     cmd_state = COMP;
  2608  0159  3007               	movlw	7
  2609  015A  00E5               	movwf	??_main
  2610  015B  0865               	movf	??_main,w
  2611  015C  00D2               	movwf	_cmd_state
  2612                           
  2613                           ;main.c: 209:                     break;
  2614  015D  2AA1               	goto	l4549
  2615  015E                     l4451:
  2616                           
  2617                           ;main.c: 211:                     data_storage[0] = input;
  2618  015E  30EF               	movlw	239
  2619  015F  0086               	movwf	6
  2620  0160  3020               	movlw	32
  2621  0161  0087               	movwf	7
  2622  0162  086D               	movf	main@input,w
  2623  0163  3FC0               	movwi [0]fsr1
  2624  0164                     l4453:
  2625                           
  2626                           ;main.c: 212:                     last_state = cmd_state;
  2627  0164  0852               	movf	_cmd_state,w
  2628  0165  00E5               	movwf	??_main
  2629  0166  0865               	movf	??_main,w
  2630  0167  00C6               	movwf	main@last_state
  2631  0168                     l4455:
  2632                           
  2633                           ;main.c: 213:                     cmd_state = READDATLEN;
  2634  0168  3003               	movlw	3
  2635  0169  00E5               	movwf	??_main
  2636  016A  0865               	movf	??_main,w
  2637  016B  00D2               	movwf	_cmd_state
  2638                           
  2639                           ;main.c: 214:                     break;
  2640  016C  2AA1               	goto	l4549
  2641  016D                     l4457:
  2642                           
  2643                           ;main.c: 216:                     data_storage[1] = input;
  2644  016D  30F0               	movlw	240
  2645  016E  0086               	movwf	6
  2646  016F  3020               	movlw	32
  2647  0170  0087               	movwf	7
  2648  0171  086D               	movf	main@input,w
  2649  0172  0081               	movwf	1
  2650  0173                     l4459:
  2651                           
  2652                           ;main.c: 217:                     last_state = cmd_state;
  2653  0173  0852               	movf	_cmd_state,w
  2654  0174  00E5               	movwf	??_main
  2655  0175  0865               	movf	??_main,w
  2656  0176  00C6               	movwf	main@last_state
  2657  0177                     l4461:
  2658                           
  2659                           ;main.c: 218:                     cmd_state = READDAT;
  2660  0177  3005               	movlw	5
  2661  0178  00E5               	movwf	??_main
  2662  0179  0865               	movf	??_main,w
  2663  017A  00D2               	movwf	_cmd_state
  2664  017B                     l4463:
  2665                           
  2666                           ;main.c: 219:                     if(data_storage[1] == 0) cmd_state = COMP;
  2667  017B  30EF               	movlw	239
  2668  017C  0086               	movwf	6
  2669  017D  3020               	movlw	32
  2670  017E  0087               	movwf	7
  2671  017F  3141               	addfsr 1,1
  2672  0180  0801               	movf	1,w
  2673  0181  1D03               	btfss	3,2
  2674  0182  2984               	goto	u2741
  2675  0183  2985               	goto	u2740
  2676  0184                     u2741:
  2677  0184  2AA1               	goto	l4549
  2678  0185                     u2740:
  2679  0185                     l4465:
  2680  0185  3007               	movlw	7
  2681  0186  00E5               	movwf	??_main
  2682  0187  0865               	movf	??_main,w
  2683  0188  00D2               	movwf	_cmd_state
  2684  0189  2AA1               	goto	l4549
  2685  018A                     l4467:
  2686                           
  2687                           ;main.c: 222:                     if (data_storage[1] <= 127) data_storage[data_storage_
      +                          counter + 2] = input;
  2688  018A  30EF               	movlw	239
  2689  018B  0086               	movwf	6
  2690  018C  3020               	movlw	32
  2691  018D  0087               	movwf	7
  2692  018E  3141               	addfsr 1,1
  2693  018F  3080               	movlw	128
  2694  0190  0201               	subwf	1,w
  2695  0191  1803               	skipnc
  2696  0192  2994               	goto	u2751
  2697  0193  2995               	goto	u2750
  2698  0194                     u2751:
  2699  0194  29A8               	goto	l4471
  2700  0195                     u2750:
  2701  0195                     l4469:
  2702  0195  0847               	movf	main@data_storage_counter,w
  2703  0196  00E5               	movwf	??_main
  2704  0197  01E6               	clrf	??_main+1
  2705  0198  30F1               	movlw	241
  2706  0199  00E7               	movwf	??_main+2
  2707  019A  3020               	movlw	32
  2708  019B  00E8               	movwf	??_main+3
  2709  019C  0865               	movf	??_main,w
  2710  019D  0767               	addwf	??_main+2,w
  2711  019E  00E9               	movwf	??_main+4
  2712  019F  0866               	movf	??_main+1,w
  2713  01A0  3D68               	addwfc	??_main+3,w
  2714  01A1  00EA               	movwf	??_main+5
  2715  01A2  0869               	movf	??_main+4,w
  2716  01A3  0086               	movwf	6
  2717  01A4  086A               	movf	??_main+5,w
  2718  01A5  0087               	movwf	7
  2719  01A6  086D               	movf	main@input,w
  2720  01A7  0081               	movwf	1
  2721  01A8                     l4471:
  2722                           
  2723                           ;main.c: 223:                     data_storage_counter++;
  2724  01A8  3001               	movlw	1
  2725  01A9  00E5               	movwf	??_main
  2726  01AA  0865               	movf	??_main,w
  2727  01AB  07C7               	addwf	main@data_storage_counter,f
  2728  01AC                     l4473:
  2729                           
  2730                           ;main.c: 224:                     if (data_storage_counter == (data_storage[1])) {
  2731  01AC  30EF               	movlw	239
  2732  01AD  0086               	movwf	6
  2733  01AE  3020               	movlw	32
  2734  01AF  0087               	movwf	7
  2735  01B0  3141               	addfsr 1,1
  2736  01B1  0801               	movf	1,w
  2737  01B2  0647               	xorwf	main@data_storage_counter,w
  2738  01B3  1D03               	skipz
  2739  01B4  29B6               	goto	u2761
  2740  01B5  29B7               	goto	u2760
  2741  01B6                     u2761:
  2742  01B6  2AA1               	goto	l4549
  2743  01B7                     u2760:
  2744  01B7                     l4475:
  2745                           
  2746                           ;main.c: 225:                         data_storage_counter = 0;
  2747  01B7  01C7               	clrf	main@data_storage_counter
  2748  01B8                     l4477:
  2749                           
  2750                           ;main.c: 226:                         last_state = cmd_state;
  2751  01B8  0852               	movf	_cmd_state,w
  2752  01B9  00E5               	movwf	??_main
  2753  01BA  0865               	movf	??_main,w
  2754  01BB  00C6               	movwf	main@last_state
  2755  01BC  2985               	goto	l4465
  2756  01BD                     l4481:
  2757                           
  2758                           ;main.c: 231:                     status_storage = input;
  2759  01BD  086D               	movf	main@input,w
  2760  01BE  00E5               	movwf	??_main
  2761  01BF  0865               	movf	??_main,w
  2762  01C0  00CE               	movwf	_status_storage
  2763                           
  2764                           ;main.c: 232:                     last_state = cmd_state;
  2765  01C1  0852               	movf	_cmd_state,w
  2766  01C2  00E5               	movwf	??_main
  2767  01C3  0865               	movf	??_main,w
  2768  01C4  00C6               	movwf	main@last_state
  2769  01C5                     l4483:
  2770                           
  2771                           ;main.c: 233:                     status_storage = status_storage | (1<<7);
  2772  01C5  084E               	movf	_status_storage,w
  2773  01C6  3880               	iorlw	128
  2774  01C7  00E5               	movwf	??_main
  2775  01C8  0865               	movf	??_main,w
  2776  01C9  00CE               	movwf	_status_storage
  2777                           
  2778                           ;main.c: 234:                     cmd_state = WAITFORCMD;
  2779  01CA  01D2               	clrf	_cmd_state
  2780  01CB                     l4485:
  2781                           
  2782                           ;main.c: 235:                     receive_timer_len = 0;
  2783  01CB  3000               	movlw	0
  2784  01CC  00AB               	movwf	_receive_timer_len+3
  2785  01CD  3000               	movlw	0
  2786  01CE  00AA               	movwf	_receive_timer_len+2
  2787  01CF  3000               	movlw	0
  2788  01D0  00A9               	movwf	_receive_timer_len+1
  2789  01D1  3000               	movlw	0
  2790  01D2  00A8               	movwf	_receive_timer_len
  2791                           
  2792                           ;main.c: 236:                     break;
  2793  01D3  2AA1               	goto	l4549
  2794  01D4                     l4487:
  2795                           
  2796                           ;main.c: 238:                     if (control_byte == input) {
  2797  01D4  0848               	movf	main@control_byte,w
  2798  01D5  066D               	xorwf	main@input,w
  2799  01D6  1D03               	skipz
  2800  01D7  29D9               	goto	u2771
  2801  01D8  29DA               	goto	u2770
  2802  01D9                     u2771:
  2803  01D9  2A68               	goto	l4537
  2804  01DA                     u2770:
  2805  01DA  2A52               	goto	l4535
  2806  01DB                     l4491:
  2807                           
  2808                           ;main.c: 241:                                 if (control_byte != input) {
  2809  01DB  0848               	movf	main@control_byte,w
  2810  01DC  066D               	xorwf	main@input,w
  2811  01DD  1903               	skipnz
  2812  01DE  29E0               	goto	u2781
  2813  01DF  29E1               	goto	u2780
  2814  01E0                     u2781:
  2815  01E0  29E6               	goto	l4495
  2816  01E1                     u2780:
  2817  01E1                     l4493:
  2818                           
  2819                           ;main.c: 242:                                     send_stat(MESSAGE_CORRUPTED);
  2820  01E1  3005               	movlw	5
  2821  01E2  3187  27E7  3180   	fcall	_send_stat
  2822                           
  2823                           ;main.c: 243:                                 } else {
  2824  01E5  2A68               	goto	l4537
  2825  01E6                     l4495:
  2826                           
  2827                           ;main.c: 244:                                     stop_cmd();
  2828  01E6  318D  2597  3180   	fcall	_stop_cmd
  2829  01E9                     l4497:
  2830                           
  2831                           ;main.c: 245:                                     send_stat(RECEIVED);
  2832  01E9  3002               	movlw	2
  2833  01EA  3187  27E7  3180   	fcall	_send_stat
  2834  01ED                     l4499:
  2835                           
  2836                           ;main.c: 246:                                     cmd_exe = EXECMD;
  2837  01ED  0020               	movlb	0	; select bank0
  2838  01EE  01D1               	clrf	_cmd_exe
  2839  01EF  0AD1               	incf	_cmd_exe,f
  2840  01F0  2A68               	goto	l4537
  2841  01F1                     l4501:
  2842                           
  2843                           ;main.c: 250:                                 if (control_byte != input) {
  2844  01F1  0848               	movf	main@control_byte,w
  2845  01F2  066D               	xorwf	main@input,w
  2846  01F3  1903               	skipnz
  2847  01F4  29F6               	goto	u2791
  2848  01F5  29F7               	goto	u2790
  2849  01F6                     u2791:
  2850  01F6  29FC               	goto	l4505
  2851  01F7                     u2790:
  2852  01F7                     l4503:
  2853                           
  2854                           ;main.c: 251:                                     send_stat(MESSAGE_CORRUPTED);
  2855  01F7  3005               	movlw	5
  2856  01F8  3187  27E7  3180   	fcall	_send_stat
  2857                           
  2858                           ;main.c: 252:                                 } else {
  2859  01FB  2A68               	goto	l4537
  2860  01FC                     l4505:
  2861                           
  2862                           ;main.c: 253:                                     send_stat(RECEIVED);
  2863  01FC  3002               	movlw	2
  2864  01FD  3187  27E7  3180   	fcall	_send_stat
  2865  0200                     l4507:
  2866                           
  2867                           ;main.c: 254:                                     request_storage = request_storage | (1
      +                           << 7);
  2868  0200  0020               	movlb	0	; select bank0
  2869  0201  084F               	movf	_request_storage,w
  2870  0202  3880               	iorlw	128
  2871  0203  00E5               	movwf	??_main
  2872  0204  0865               	movf	??_main,w
  2873  0205  00CF               	movwf	_request_storage
  2874  0206  2A68               	goto	l4537
  2875  0207                     l4509:
  2876                           
  2877                           ;main.c: 258:                                 if (data_storage[1] > 127) {
  2878  0207  30EF               	movlw	239
  2879  0208  0086               	movwf	6
  2880  0209  3020               	movlw	32
  2881  020A  0087               	movwf	7
  2882  020B  3141               	addfsr 1,1
  2883  020C  3080               	movlw	128
  2884  020D  0201               	subwf	1,w
  2885  020E  1C03               	skipc
  2886  020F  2A11               	goto	u2801
  2887  0210  2A12               	goto	u2800
  2888  0211                     u2801:
  2889  0211  2A17               	goto	l4513
  2890  0212                     u2800:
  2891  0212                     l4511:
  2892                           
  2893                           ;main.c: 259:                                     send_stat(TOO_MUCH_DATA);
  2894  0212  3004               	movlw	4
  2895  0213  3187  27E7  3180   	fcall	_send_stat
  2896                           
  2897                           ;main.c: 260:                                 } else if (control_byte != input) {
  2898  0216  2A68               	goto	l4537
  2899  0217                     l4513:
  2900  0217  0848               	movf	main@control_byte,w
  2901  0218  066D               	xorwf	main@input,w
  2902  0219  1903               	skipnz
  2903  021A  2A1C               	goto	u2811
  2904  021B  2A1D               	goto	u2810
  2905  021C                     u2811:
  2906  021C  2A22               	goto	l4517
  2907  021D                     u2810:
  2908  021D                     l4515:
  2909                           
  2910                           ;main.c: 261:                                     send_stat(MESSAGE_CORRUPTED);
  2911  021D  3005               	movlw	5
  2912  021E  3187  27E7  3180   	fcall	_send_stat
  2913                           
  2914                           ;main.c: 262:                                 } else {
  2915  0221  2A68               	goto	l4537
  2916  0222                     l4517:
  2917                           
  2918                           ;main.c: 263:                                     send_stat(RECEIVED);
  2919  0222  3002               	movlw	2
  2920  0223  3187  27E7  3180   	fcall	_send_stat
  2921  0226                     l4519:
  2922                           
  2923                           ;main.c: 264:                                     data_storage[0] = data_storage[0] | (1
      +                           << 7);
  2924  0226  30EF               	movlw	239
  2925  0227  0086               	movwf	6
  2926  0228  3020               	movlw	32
  2927  0229  0087               	movwf	7
  2928  022A  30EF               	movlw	239
  2929  022B  0084               	movwf	4
  2930  022C  3020               	movlw	32
  2931  022D  0085               	movwf	5
  2932  022E  0800               	movf	0,w
  2933  022F  3880               	iorlw	128
  2934  0230  3FC0               	movwi [0]fsr1
  2935  0231  2A68               	goto	l4537
  2936  0232                     l4521:
  2937                           
  2938                           ;main.c: 268:                                 if (data_storage[1] > 127) {
  2939  0232  30EF               	movlw	239
  2940  0233  0086               	movwf	6
  2941  0234  3020               	movlw	32
  2942  0235  0087               	movwf	7
  2943  0236  3141               	addfsr 1,1
  2944  0237  3080               	movlw	128
  2945  0238  0201               	subwf	1,w
  2946  0239  1C03               	skipc
  2947  023A  2A3C               	goto	u2821
  2948  023B  2A3D               	goto	u2820
  2949  023C                     u2821:
  2950  023C  2A42               	goto	l4525
  2951  023D                     u2820:
  2952  023D                     l4523:
  2953                           
  2954                           ;main.c: 269:                                     send_stat(TOO_MUCH_DATA);
  2955  023D  3004               	movlw	4
  2956  023E  3187  27E7  3180   	fcall	_send_stat
  2957                           
  2958                           ;main.c: 270:                                 } else if (control_byte != input) {
  2959  0241  2A68               	goto	l4537
  2960  0242                     l4525:
  2961  0242  0848               	movf	main@control_byte,w
  2962  0243  066D               	xorwf	main@input,w
  2963  0244  1903               	skipnz
  2964  0245  2A47               	goto	u2831
  2965  0246  2A48               	goto	u2830
  2966  0247                     u2831:
  2967  0247  2A4D               	goto	l4529
  2968  0248                     u2830:
  2969  0248                     l4527:
  2970                           
  2971                           ;main.c: 271:                                     send_stat(MESSAGE_CORRUPTED);
  2972  0248  3005               	movlw	5
  2973  0249  3187  27E7  3180   	fcall	_send_stat
  2974                           
  2975                           ;main.c: 272:                                 } else {
  2976  024C  2A68               	goto	l4537
  2977  024D                     l4529:
  2978                           
  2979                           ;main.c: 273:                                     send_stat(RECEIVED);
  2980  024D  3002               	movlw	2
  2981  024E  3187  27E7  3180   	fcall	_send_stat
  2982  0251  2A26               	goto	l4519
  2983  0252                     l4535:
  2984  0252  0846               	movf	main@last_state,w
  2985  0253  00E5               	movwf	??_main
  2986  0254  01E6               	clrf	??_main+1
  2987                           
  2988                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2989                           ; Switch size 1, requested type "simple"
  2990                           ; Number of cases is 1, Range of values is 0 to 0
  2991                           ; switch strategies available:
  2992                           ; Name         Instructions Cycles
  2993                           ; simple_byte            4     3 (average)
  2994                           ; direct_byte            8     6 (fixed)
  2995                           ; jumptable            260     6 (fixed)
  2996                           ;	Chosen strategy is simple_byte
  2997  0255  0866               	movf	??_main+1,w
  2998  0256  3A00               	xorlw	0	; case 0
  2999  0257  1903               	skipnz
  3000  0258  2A5A               	goto	l5211
  3001  0259  2A68               	goto	l4537
  3002  025A                     l5211:
  3003                           
  3004                           ; Switch size 1, requested type "simple"
  3005                           ; Number of cases is 4, Range of values is 1 to 5
  3006                           ; switch strategies available:
  3007                           ; Name         Instructions Cycles
  3008                           ; simple_byte           13     7 (average)
  3009                           ; direct_byte           19     9 (fixed)
  3010                           ; jumptable            263     9 (fixed)
  3011                           ;	Chosen strategy is simple_byte
  3012  025A  0865               	movf	??_main,w
  3013  025B  3A01               	xorlw	1	; case 1
  3014  025C  1903               	skipnz
  3015  025D  29DB               	goto	l4491
  3016  025E  3A03               	xorlw	3	; case 2
  3017  025F  1903               	skipnz
  3018  0260  29F1               	goto	l4501
  3019  0261  3A01               	xorlw	1	; case 3
  3020  0262  1903               	skipnz
  3021  0263  2A32               	goto	l4521
  3022  0264  3A06               	xorlw	6	; case 5
  3023  0265  1903               	skipnz
  3024  0266  2A07               	goto	l4509
  3025  0267  2A68               	goto	l4537
  3026  0268                     l4537:
  3027                           
  3028                           ;main.c: 279:                     last_state = cmd_state;
  3029  0268  0020               	movlb	0	; select bank0
  3030  0269  0852               	movf	_cmd_state,w
  3031  026A  00E5               	movwf	??_main
  3032  026B  0865               	movf	??_main,w
  3033  026C  00C6               	movwf	main@last_state
  3034  026D                     l4539:
  3035                           
  3036                           ;main.c: 280:                     cmd_state = WAITFORCMD;
  3037  026D  01D2               	clrf	_cmd_state
  3038  026E                     l4541:
  3039                           
  3040                           ;main.c: 281:                     receive_timer_len = 0;
  3041  026E  3000               	movlw	0
  3042  026F  00AB               	movwf	_receive_timer_len+3
  3043  0270  3000               	movlw	0
  3044  0271  00AA               	movwf	_receive_timer_len+2
  3045  0272  3000               	movlw	0
  3046  0273  00A9               	movwf	_receive_timer_len+1
  3047  0274  3000               	movlw	0
  3048  0275  00A8               	movwf	_receive_timer_len
  3049  0276                     l4543:
  3050                           
  3051                           ;main.c: 282:                     receive_time = 0;
  3052  0276  3000               	movlw	0
  3053  0277  00AF               	movwf	_receive_time+3
  3054  0278  3000               	movlw	0
  3055  0279  00AE               	movwf	_receive_time+2
  3056  027A  3000               	movlw	0
  3057  027B  00AD               	movwf	_receive_time+1
  3058  027C  3000               	movlw	0
  3059  027D  00AC               	movwf	_receive_time
  3060                           
  3061                           ;main.c: 283:                     break;
  3062  027E  2AA1               	goto	l4549
  3063  027F                     l4547:
  3064  027F  0852               	movf	_cmd_state,w
  3065  0280  00E5               	movwf	??_main
  3066  0281  01E6               	clrf	??_main+1
  3067                           
  3068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3069                           ; Switch size 1, requested type "simple"
  3070                           ; Number of cases is 1, Range of values is 0 to 0
  3071                           ; switch strategies available:
  3072                           ; Name         Instructions Cycles
  3073                           ; simple_byte            4     3 (average)
  3074                           ; direct_byte            8     6 (fixed)
  3075                           ; jumptable            260     6 (fixed)
  3076                           ;	Chosen strategy is simple_byte
  3077  0282  0866               	movf	??_main+1,w
  3078  0283  3A00               	xorlw	0	; case 0
  3079  0284  1903               	skipnz
  3080  0285  2A87               	goto	l5213
  3081  0286  2AA1               	goto	l4549
  3082  0287                     l5213:
  3083                           
  3084                           ; Switch size 1, requested type "simple"
  3085                           ; Number of cases is 8, Range of values is 0 to 7
  3086                           ; switch strategies available:
  3087                           ; Name         Instructions Cycles
  3088                           ; direct_byte           22     6 (fixed)
  3089                           ; simple_byte           25    13 (average)
  3090                           ; jumptable            260     6 (fixed)
  3091                           ;	Chosen strategy is simple_byte
  3092  0287  0865               	movf	??_main,w
  3093  0288  3A00               	xorlw	0	; case 0
  3094  0289  1903               	skipnz
  3095  028A  2912               	goto	l4429
  3096  028B  3A01               	xorlw	1	; case 1
  3097  028C  1903               	skipnz
  3098  028D  2944               	goto	l4447
  3099  028E  3A03               	xorlw	3	; case 2
  3100  028F  1903               	skipnz
  3101  0290  2951               	goto	l4449
  3102  0291  3A01               	xorlw	1	; case 3
  3103  0292  1903               	skipnz
  3104  0293  296D               	goto	l4457
  3105  0294  3A07               	xorlw	7	; case 4
  3106  0295  1903               	skipnz
  3107  0296  295E               	goto	l4451
  3108  0297  3A01               	xorlw	1	; case 5
  3109  0298  1903               	skipnz
  3110  0299  298A               	goto	l4467
  3111  029A  3A03               	xorlw	3	; case 6
  3112  029B  1903               	skipnz
  3113  029C  29BD               	goto	l4481
  3114  029D  3A01               	xorlw	1	; case 7
  3115  029E  1903               	skipnz
  3116  029F  29D4               	goto	l4487
  3117  02A0  2AA1               	goto	l4549
  3118  02A1                     l4549:
  3119                           
  3120                           ;main.c: 285:             if (last_state != WAITFORCMD) control_byte = control_byte ^ in
      +                          put;
  3121  02A1  0846               	movf	main@last_state,w
  3122  02A2  1903               	btfsc	3,2
  3123  02A3  2AA5               	goto	u2841
  3124  02A4  2AA6               	goto	u2840
  3125  02A5                     u2841:
  3126  02A5  2AAB               	goto	l4553
  3127  02A6                     u2840:
  3128  02A6                     l4551:
  3129  02A6  0848               	movf	main@control_byte,w
  3130  02A7  066D               	xorwf	main@input,w
  3131  02A8  00E5               	movwf	??_main
  3132  02A9  0865               	movf	??_main,w
  3133  02AA  00C8               	movwf	main@control_byte
  3134  02AB                     l4553:
  3135                           
  3136                           ;main.c: 288:         if((status_storage & (1<<7)) > 0) {
  3137  02AB  0020               	movlb	0	; select bank0
  3138  02AC  1FCE               	btfss	_status_storage,7
  3139  02AD  2AAF               	goto	u2851
  3140  02AE  2AB0               	goto	u2850
  3141  02AF                     u2851:
  3142  02AF  2AD6               	goto	l533
  3143  02B0                     u2850:
  3144  02B0  2AC8               	goto	l4567
  3145  02B1                     l4557:
  3146                           
  3147                           ;main.c: 291:                     if(lock_status == 1) {
  3148  02B1  034D               	decf	_lock_status,w
  3149  02B2  1D03               	btfss	3,2
  3150  02B3  2AB5               	goto	u2861
  3151  02B4  2AB6               	goto	u2860
  3152  02B5                     u2861:
  3153  02B5  2ABE               	goto	l536
  3154  02B6                     u2860:
  3155  02B6                     l4559:
  3156                           
  3157                           ;main.c: 292:                         ADC_StartConversion();
  3158  02B6  318C  24E1  3180   	fcall	_ADC_StartConversion
  3159  02B9                     l4561:
  3160                           
  3161                           ;main.c: 293:                         working_state = WAITFORCLOSE;
  3162  02B9  3003               	movlw	3
  3163  02BA  0020               	movlb	0	; select bank0
  3164  02BB  00E5               	movwf	??_main
  3165  02BC  0865               	movf	??_main,w
  3166  02BD  00D3               	movwf	_working_state
  3167  02BE                     l536:	
  3168                           ;main.c: 294:                     }
  3169                           
  3170                           
  3171                           ;main.c: 295:                     stop_cmd();
  3172  02BE  318D  2597  3180   	fcall	_stop_cmd
  3173  02C1                     l4563:
  3174                           
  3175                           ;main.c: 296:                     status_storage = status_storage & (~(1<<7));
  3176  02C1  0020               	movlb	0	; select bank0
  3177  02C2  084E               	movf	_status_storage,w
  3178  02C3  397F               	andlw	127
  3179  02C4  00E5               	movwf	??_main
  3180  02C5  0865               	movf	??_main,w
  3181  02C6  00CE               	movwf	_status_storage
  3182                           
  3183                           ;main.c: 297:                     break;
  3184  02C7  2AD6               	goto	l533
  3185  02C8                     l4567:
  3186  02C8  084E               	movf	_status_storage,w
  3187  02C9  397F               	andlw	127
  3188  02CA  00E5               	movwf	??_main
  3189  02CB  01E6               	clrf	??_main+1
  3190                           
  3191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3192                           ; Switch size 1, requested type "simple"
  3193                           ; Number of cases is 1, Range of values is 0 to 0
  3194                           ; switch strategies available:
  3195                           ; Name         Instructions Cycles
  3196                           ; simple_byte            4     3 (average)
  3197                           ; direct_byte            8     6 (fixed)
  3198                           ; jumptable            260     6 (fixed)
  3199                           ;	Chosen strategy is simple_byte
  3200  02CC  0866               	movf	??_main+1,w
  3201  02CD  3A00               	xorlw	0	; case 0
  3202  02CE  1903               	skipnz
  3203  02CF  2AD1               	goto	l5215
  3204  02D0  2AD6               	goto	l533
  3205  02D1                     l5215:
  3206                           
  3207                           ; Switch size 1, requested type "simple"
  3208                           ; Number of cases is 1, Range of values is 8 to 8
  3209                           ; switch strategies available:
  3210                           ; Name         Instructions Cycles
  3211                           ; simple_byte            4     3 (average)
  3212                           ; direct_byte           11     9 (fixed)
  3213                           ; jumptable            263     9 (fixed)
  3214                           ;	Chosen strategy is simple_byte
  3215  02D1  0865               	movf	??_main,w
  3216  02D2  3A08               	xorlw	8	; case 8
  3217  02D3  1903               	skipnz
  3218  02D4  2AB1               	goto	l4557
  3219  02D5  2AD6               	goto	l533
  3220  02D6                     l533:	
  3221                           ;main.c: 299:         }
  3222                           
  3223                           
  3224                           ;main.c: 300:         if((request_storage & (1<<7)) > 0) {
  3225  02D6  1FCF               	btfss	_request_storage,7
  3226  02D7  2AD9               	goto	u2871
  3227  02D8  2ADA               	goto	u2870
  3228  02D9                     u2871:
  3229  02D9  2D12               	goto	l4753
  3230  02DA                     u2870:
  3231  02DA  2AF0               	goto	l4581
  3232  02DB                     l4571:
  3233                           
  3234                           ;main.c: 303:                     if(lock_status) {
  3235  02DB  084D               	movf	_lock_status,w
  3236  02DC  1903               	btfsc	3,2
  3237  02DD  2ADF               	goto	u2881
  3238  02DE  2AE0               	goto	u2880
  3239  02DF                     u2881:
  3240  02DF  2AE5               	goto	l4575
  3241  02E0                     u2880:
  3242  02E0                     l4573:
  3243                           
  3244                           ;main.c: 304:                         send_stat(LOCK_OPEND);
  3245  02E0  3006               	movlw	6
  3246  02E1  3187  27E7  3180   	fcall	_send_stat
  3247                           
  3248                           ;main.c: 305:                     }else {
  3249  02E4  2AE9               	goto	l4577
  3250  02E5                     l4575:
  3251                           
  3252                           ;main.c: 306:                         send_stat(LOCK_CLOSED);
  3253  02E5  3007               	movlw	7
  3254  02E6  3187  27E7  3180   	fcall	_send_stat
  3255  02E9                     l4577:
  3256                           
  3257                           ;main.c: 308:                     request_storage = status_storage & (~(1<<7));
  3258  02E9  0020               	movlb	0	; select bank0
  3259  02EA  084E               	movf	_status_storage,w
  3260  02EB  397F               	andlw	127
  3261  02EC  00E5               	movwf	??_main
  3262  02ED  0865               	movf	??_main,w
  3263  02EE  00CF               	movwf	_request_storage
  3264                           
  3265                           ;main.c: 309:                     break;
  3266  02EF  2D12               	goto	l4753
  3267  02F0                     l4581:
  3268  02F0  084F               	movf	_request_storage,w
  3269  02F1  397F               	andlw	127
  3270  02F2  00E5               	movwf	??_main
  3271  02F3  01E6               	clrf	??_main+1
  3272                           
  3273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3274                           ; Switch size 1, requested type "simple"
  3275                           ; Number of cases is 1, Range of values is 0 to 0
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte            4     3 (average)
  3279                           ; direct_byte            8     6 (fixed)
  3280                           ; jumptable            260     6 (fixed)
  3281                           ;	Chosen strategy is simple_byte
  3282  02F4  0866               	movf	??_main+1,w
  3283  02F5  3A00               	xorlw	0	; case 0
  3284  02F6  1903               	skipnz
  3285  02F7  2AF9               	goto	l5217
  3286  02F8  2D12               	goto	l4753
  3287  02F9                     l5217:
  3288                           
  3289                           ; Switch size 1, requested type "simple"
  3290                           ; Number of cases is 1, Range of values is 3 to 3
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte            4     3 (average)
  3294                           ; direct_byte           11     9 (fixed)
  3295                           ; jumptable            263     9 (fixed)
  3296                           ;	Chosen strategy is simple_byte
  3297  02F9  0865               	movf	??_main,w
  3298  02FA  3A03               	xorlw	3	; case 3
  3299  02FB  1903               	skipnz
  3300  02FC  2ADB               	goto	l4571
  3301  02FD  2D12               	goto	l4753
  3302  02FE                     l4583:
  3303                           
  3304                           ;main.c: 315:                     cmd_timer_len = 0;
  3305  02FE  3000               	movlw	0
  3306  02FF  00A3               	movwf	_cmd_timer_len+3
  3307  0300  3000               	movlw	0
  3308  0301  00A2               	movwf	_cmd_timer_len+2
  3309  0302  3000               	movlw	0
  3310  0303  00A1               	movwf	_cmd_timer_len+1
  3311  0304  3000               	movlw	0
  3312  0305  00A0               	movwf	_cmd_timer_len
  3313                           
  3314                           ;main.c: 316:                break;
  3315  0306  2D80               	goto	l4791
  3316  0307                     l4585:
  3317                           
  3318                           ;main.c: 318:                 if(old_cmd_exe_counter != cmd_exe_counter) {
  3319  0307  0835               	movf	_cmd_exe_counter+1,w
  3320  0308  0633               	xorwf	main@old_cmd_exe_counter+1,w
  3321  0309  1D03               	skipz
  3322  030A  2B0D               	goto	u2895
  3323  030B  0834               	movf	_cmd_exe_counter,w
  3324  030C  0632               	xorwf	main@old_cmd_exe_counter,w
  3325  030D                     u2895:
  3326  030D  1903               	skipnz
  3327  030E  2B10               	goto	u2891
  3328  030F  2B11               	goto	u2890
  3329  0310                     u2891:
  3330  0310  2B21               	goto	l550
  3331  0311                     u2890:
  3332  0311                     l4587:
  3333                           
  3334                           ;main.c: 319:                     cmd_time = 0;
  3335  0311  3000               	movlw	0
  3336  0312  00A7               	movwf	_cmd_time+3
  3337  0313  3000               	movlw	0
  3338  0314  00A6               	movwf	_cmd_time+2
  3339  0315  3000               	movlw	0
  3340  0316  00A5               	movwf	_cmd_time+1
  3341  0317  3000               	movlw	0
  3342  0318  00A4               	movwf	_cmd_time
  3343                           
  3344                           ;main.c: 320:                     cmd_timer_len = 1000;
  3345  0319  3000               	movlw	0
  3346  031A  00A3               	movwf	_cmd_timer_len+3
  3347  031B  3000               	movlw	0
  3348  031C  00A2               	movwf	_cmd_timer_len+2
  3349  031D  3003               	movlw	3
  3350  031E  00A1               	movwf	_cmd_timer_len+1
  3351  031F  30E8               	movlw	232
  3352  0320  00A0               	movwf	_cmd_timer_len
  3353  0321                     l550:	
  3354                           ;main.c: 321:                 }
  3355                           
  3356                           
  3357                           ;main.c: 322:                 old_cmd_exe_counter = cmd_exe_counter;
  3358  0321  0835               	movf	_cmd_exe_counter+1,w
  3359  0322  00B3               	movwf	main@old_cmd_exe_counter+1
  3360  0323  0834               	movf	_cmd_exe_counter,w
  3361  0324  00B2               	movwf	main@old_cmd_exe_counter
  3362                           
  3363                           ;main.c: 323:                 switch (cmd) {
  3364  0325  2CFF               	goto	l4749
  3365  0326                     l4589:
  3366                           
  3367                           ;main.c: 327:                                 send_req(PASSWORD);
  3368  0326  3001               	movlw	1
  3369  0327  318F  2757  3180   	fcall	_send_req
  3370  032A                     l4591:
  3371                           
  3372                           ;main.c: 328:                                 cmd_exe_counter++;
  3373  032A  3001               	movlw	1
  3374  032B  0020               	movlb	0	; select bank0
  3375  032C  07B4               	addwf	_cmd_exe_counter,f
  3376  032D  3000               	movlw	0
  3377  032E  3DB5               	addwfc	_cmd_exe_counter+1,f
  3378                           
  3379                           ;main.c: 329:                                 break;
  3380  032F  2D80               	goto	l4791
  3381  0330                     l4593:
  3382                           
  3383                           ;main.c: 331:                                 cmd_exe_counter = seek_confirmation(1, 2, 
      +                          0, 255);
  3384  0330  3001               	movlw	1
  3385  0331  00F1               	movwf	seek_confirmation@wait_num
  3386  0332  3000               	movlw	0
  3387  0333  00F2               	movwf	seek_confirmation@wait_num+1
  3388  0334  3002               	movlw	2
  3389  0335  00F3               	movwf	seek_confirmation@continue_num
  3390  0336  3000               	movlw	0
  3391  0337  00F4               	movwf	seek_confirmation@continue_num+1
  3392  0338  3000               	movlw	0
  3393  0339  00F5               	movwf	seek_confirmation@retry_num
  3394  033A  00F6               	movwf	seek_confirmation@retry_num+1
  3395  033B  30FF               	movlw	255
  3396  033C  00F7               	movwf	seek_confirmation@cancel_num
  3397  033D  3000               	movlw	0
  3398  033E  00F8               	movwf	seek_confirmation@cancel_num+1
  3399  033F  318F  2728  3180   	fcall	_seek_confirmation
  3400  0342  0872               	movf	?_seek_confirmation+1,w
  3401  0343  0020               	movlb	0	; select bank0
  3402  0344  00B5               	movwf	_cmd_exe_counter+1
  3403  0345  0871               	movf	?_seek_confirmation,w
  3404  0346  00B4               	movwf	_cmd_exe_counter
  3405                           
  3406                           ;main.c: 332:                                 break;
  3407  0347  2D80               	goto	l4791
  3408  0348                     l4595:
  3409                           
  3410                           ;main.c: 334:                                 if(wait_for_requested(PASSWORD)) {
  3411  0348  3001               	movlw	1
  3412  0349  318D  25F3  3180   	fcall	_wait_for_requested
  3413  034C  3A00               	xorlw	0
  3414  034D  1903               	skipnz
  3415  034E  2B50               	goto	u2901
  3416  034F  2B51               	goto	u2900
  3417  0350                     u2901:
  3418  0350  2D80               	goto	l4791
  3419  0351                     u2900:
  3420  0351                     l4597:
  3421                           
  3422                           ;main.c: 335:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3423  0351  30F1               	movlw	241
  3424  0352  00F2               	movwf	compare_pw@pw
  3425  0353  3020               	movlw	32
  3426  0354  00F3               	movwf	compare_pw@pw+1
  3427  0355  30EF               	movlw	239
  3428  0356  0086               	movwf	6
  3429  0357  3020               	movlw	32
  3430  0358  0087               	movwf	7
  3431  0359  3141               	addfsr 1,1
  3432  035A  0801               	movf	1,w
  3433  035B  0020               	movlb	0	; select bank0
  3434  035C  00E5               	movwf	??_main
  3435  035D  0865               	movf	??_main,w
  3436  035E  00F4               	movwf	compare_pw@len
  3437  035F  3187  27A7  3180   	fcall	_compare_pw
  3438  0362  3A00               	xorlw	0
  3439  0363  1D03               	skipz
  3440  0364  2B66               	goto	u2911
  3441  0365  2B67               	goto	u2910
  3442  0366                     u2911:
  3443  0366  2B2A               	goto	l4591
  3444  0367                     u2910:
  3445  0367                     l4599:
  3446  0367  0020               	movlb	0	; select bank0
  3447  0368  180D               	btfsc	13,0	;volatile
  3448  0369  2B6B               	goto	u2921
  3449  036A  2B6C               	goto	u2920
  3450  036B                     u2921:
  3451  036B  2B6D               	goto	l4603
  3452  036C                     u2920:
  3453  036C  2B2A               	goto	l4591
  3454  036D                     l4603:
  3455                           
  3456                           ;main.c: 338:                                         send_stat(DENY);
  3457  036D  3003               	movlw	3
  3458  036E  3187  27E7  3180   	fcall	_send_stat
  3459  0371                     l4605:
  3460                           
  3461                           ;main.c: 339:                                         stop_cmd();
  3462  0371  318D  2597  3180   	fcall	_stop_cmd
  3463  0374  2D80               	goto	l4791
  3464  0375                     l4607:
  3465                           
  3466                           ;main.c: 344:                                 send_req(NEW_PASSWORD);
  3467  0375  3002               	movlw	2
  3468  0376  318F  2757  3180   	fcall	_send_req
  3469  0379  2B2A               	goto	l4591
  3470  037A                     l4611:
  3471                           
  3472                           ;main.c: 348:                                 cmd_exe_counter = seek_confirmation(4, 5, 
      +                          3, 255);
  3473  037A  3004               	movlw	4
  3474  037B  00F1               	movwf	seek_confirmation@wait_num
  3475  037C  3000               	movlw	0
  3476  037D  00F2               	movwf	seek_confirmation@wait_num+1
  3477  037E  3005               	movlw	5
  3478  037F  00F3               	movwf	seek_confirmation@continue_num
  3479  0380  3000               	movlw	0
  3480  0381  00F4               	movwf	seek_confirmation@continue_num+1
  3481  0382  3003               	movlw	3
  3482  0383  00F5               	movwf	seek_confirmation@retry_num
  3483  0384  3000               	movlw	0
  3484  0385  00F6               	movwf	seek_confirmation@retry_num+1
  3485  0386  30FF               	movlw	255
  3486  0387  00F7               	movwf	seek_confirmation@cancel_num
  3487  0388  3000               	movlw	0
  3488  0389  00F8               	movwf	seek_confirmation@cancel_num+1
  3489  038A  318F  2728  3180   	fcall	_seek_confirmation
  3490  038D  0872               	movf	?_seek_confirmation+1,w
  3491  038E  0020               	movlb	0	; select bank0
  3492  038F  00B5               	movwf	_cmd_exe_counter+1
  3493  0390  0871               	movf	?_seek_confirmation,w
  3494  0391  00B4               	movwf	_cmd_exe_counter
  3495                           
  3496                           ;main.c: 349:                                 break;
  3497  0392  2D80               	goto	l4791
  3498  0393                     l4613:
  3499                           
  3500                           ;main.c: 351:                                 if(wait_for_requested(NEW_PASSWORD)) {
  3501  0393  3002               	movlw	2
  3502  0394  318D  25F3  3180   	fcall	_wait_for_requested
  3503  0397  3A00               	xorlw	0
  3504  0398  1903               	skipnz
  3505  0399  2B9B               	goto	u2931
  3506  039A  2B9C               	goto	u2930
  3507  039B                     u2931:
  3508  039B  2D22               	goto	l548
  3509  039C                     u2930:
  3510  039C                     l4615:
  3511                           
  3512                           ;main.c: 352:                                     save_pw(&data_storage[2], data_storage
      +                          [1]);
  3513  039C  30F1               	movlw	241
  3514  039D  00F4               	movwf	save_pw@pw
  3515  039E  3020               	movlw	32
  3516  039F  00F5               	movwf	save_pw@pw+1
  3517  03A0  30EF               	movlw	239
  3518  03A1  0086               	movwf	6
  3519  03A2  3020               	movlw	32
  3520  03A3  0087               	movwf	7
  3521  03A4  3141               	addfsr 1,1
  3522  03A5  0801               	movf	1,w
  3523  03A6  0020               	movlb	0	; select bank0
  3524  03A7  00E5               	movwf	??_main
  3525  03A8  0865               	movf	??_main,w
  3526  03A9  00F6               	movwf	save_pw@len
  3527  03AA  3187  2762  3180   	fcall	_save_pw
  3528                           
  3529                           ;main.c: 353:                                     send_stat(COMMAND_EXECUTED);
  3530  03AD  3001               	movlw	1
  3531  03AE  3187  27E7  3180   	fcall	_send_stat
  3532  03B1  2B71               	goto	l4605
  3533  03B2                     l4619:
  3534                           
  3535                           ;main.c: 358:                                 send_stat(CANCELD);
  3536  03B2  3008               	movlw	8
  3537  03B3  3187  27E7  3180   	fcall	_send_stat
  3538  03B6  2B71               	goto	l4605
  3539  03B7                     l4625:
  3540                           
  3541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3542                           ; Switch size 1, requested type "simple"
  3543                           ; Number of cases is 1, Range of values is 0 to 0
  3544                           ; switch strategies available:
  3545                           ; Name         Instructions Cycles
  3546                           ; simple_byte            4     3 (average)
  3547                           ; direct_byte            8     6 (fixed)
  3548                           ; jumptable            260     6 (fixed)
  3549                           ;	Chosen strategy is simple_byte
  3550  03B7  0835               	movf	_cmd_exe_counter+1,w
  3551  03B8  3A00               	xorlw	0	; case 0
  3552  03B9  1903               	skipnz
  3553  03BA  2BBC               	goto	l5219
  3554  03BB  2D80               	goto	l4791
  3555  03BC                     l5219:
  3556                           
  3557                           ; Switch size 1, requested type "simple"
  3558                           ; Number of cases is 7, Range of values is 0 to 255
  3559                           ; switch strategies available:
  3560                           ; Name         Instructions Cycles
  3561                           ; simple_byte           22    12 (average)
  3562                           ; jumptable            260     6 (fixed)
  3563                           ;	Chosen strategy is simple_byte
  3564  03BC  0834               	movf	_cmd_exe_counter,w
  3565  03BD  3A00               	xorlw	0	; case 0
  3566  03BE  1903               	skipnz
  3567  03BF  2B26               	goto	l4589
  3568  03C0  3A01               	xorlw	1	; case 1
  3569  03C1  1903               	skipnz
  3570  03C2  2B30               	goto	l4593
  3571  03C3  3A03               	xorlw	3	; case 2
  3572  03C4  1903               	skipnz
  3573  03C5  2B48               	goto	l4595
  3574  03C6  3A01               	xorlw	1	; case 3
  3575  03C7  1903               	skipnz
  3576  03C8  2B75               	goto	l4607
  3577  03C9  3A07               	xorlw	7	; case 4
  3578  03CA  1903               	skipnz
  3579  03CB  2B7A               	goto	l4611
  3580  03CC  3A01               	xorlw	1	; case 5
  3581  03CD  1903               	skipnz
  3582  03CE  2B93               	goto	l4613
  3583  03CF  3AFA               	xorlw	250	; case 255
  3584  03D0  1903               	skipnz
  3585  03D1  2BB2               	goto	l4619
  3586  03D2  2D80               	goto	l4791
  3587  03D3                     l4627:
  3588                           
  3589                           ;main.c: 366:                                 if(lock_status == 1) {
  3590  03D3  034D               	decf	_lock_status,w
  3591  03D4  1D03               	btfss	3,2
  3592  03D5  2BD7               	goto	u2941
  3593  03D6  2BD8               	goto	u2940
  3594  03D7                     u2941:
  3595  03D7  2BE1               	goto	l4635
  3596  03D8                     u2940:
  3597  03D8                     l4629:
  3598                           
  3599                           ;main.c: 367:                                     working_state = WAITFORCLOSE;
  3600  03D8  3003               	movlw	3
  3601  03D9  00E5               	movwf	??_main
  3602  03DA  0865               	movf	??_main,w
  3603  03DB  00D3               	movwf	_working_state
  3604  03DC                     l4631:
  3605                           
  3606                           ;main.c: 368:                                     send_stat(COMMAND_EXECUTED);
  3607  03DC  3001               	movlw	1
  3608  03DD  3187  27E7  3180   	fcall	_send_stat
  3609  03E0  2B71               	goto	l4605
  3610  03E1                     l4635:
  3611                           
  3612                           ;main.c: 371:                                     send_req(PASSWORD);
  3613  03E1  3001               	movlw	1
  3614  03E2  318F  2757  3180   	fcall	_send_req
  3615  03E5  2B2A               	goto	l4591
  3616  03E6                     l4641:
  3617                           
  3618                           ;main.c: 379:                                 if(wait_for_requested(PASSWORD)) {
  3619  03E6  3001               	movlw	1
  3620  03E7  318D  25F3  3180   	fcall	_wait_for_requested
  3621  03EA  3A00               	xorlw	0
  3622  03EB  1903               	skipnz
  3623  03EC  2BEE               	goto	u2951
  3624  03ED  2BEF               	goto	u2950
  3625  03EE                     u2951:
  3626  03EE  2D22               	goto	l548
  3627  03EF                     u2950:
  3628  03EF                     l4643:
  3629                           
  3630                           ;main.c: 380:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3631  03EF  30F1               	movlw	241
  3632  03F0  00F2               	movwf	compare_pw@pw
  3633  03F1  3020               	movlw	32
  3634  03F2  00F3               	movwf	compare_pw@pw+1
  3635  03F3  30EF               	movlw	239
  3636  03F4  0086               	movwf	6
  3637  03F5  3020               	movlw	32
  3638  03F6  0087               	movwf	7
  3639  03F7  3141               	addfsr 1,1
  3640  03F8  0801               	movf	1,w
  3641  03F9  0020               	movlb	0	; select bank0
  3642  03FA  00E5               	movwf	??_main
  3643  03FB  0865               	movf	??_main,w
  3644  03FC  00F4               	movwf	compare_pw@len
  3645  03FD  3187  27A7  3180   	fcall	_compare_pw
  3646  0400  3A00               	xorlw	0
  3647  0401  1D03               	skipz
  3648  0402  2C04               	goto	u2961
  3649  0403  2C05               	goto	u2960
  3650  0404                     u2961:
  3651  0404  2C0A               	goto	l580
  3652  0405                     u2960:
  3653  0405                     l4645:
  3654  0405  0020               	movlb	0	; select bank0
  3655  0406  180D               	btfsc	13,0	;volatile
  3656  0407  2C09               	goto	u2971
  3657  0408  2C0A               	goto	u2970
  3658  0409                     u2971:
  3659  0409  2C12               	goto	l4649
  3660  040A                     u2970:
  3661  040A                     l580:
  3662                           
  3663                           ;main.c: 381:                                         working_state = OPENLOCK;
  3664  040A  0020               	movlb	0	; select bank0
  3665  040B  01D3               	clrf	_working_state
  3666  040C  0AD3               	incf	_working_state,f
  3667  040D                     l4647:
  3668                           
  3669                           ;main.c: 382:                                         send_stat(COMMAND_EXECUTED);
  3670  040D  3001               	movlw	1
  3671  040E  3187  27E7  3180   	fcall	_send_stat
  3672                           
  3673                           ;main.c: 383:                                     }else {
  3674  0411  2B71               	goto	l4605
  3675  0412                     l4649:
  3676                           
  3677                           ;main.c: 384:                                         send_stat(DENY);
  3678  0412  3003               	movlw	3
  3679  0413  3187  27E7  3180   	fcall	_send_stat
  3680  0416  2B71               	goto	l4605
  3681  0417                     l4653:
  3682                           
  3683                           ;main.c: 390:                                 send_stat(CANCELD);
  3684  0417  3008               	movlw	8
  3685  0418  3187  27E7  3180   	fcall	_send_stat
  3686  041B  2B71               	goto	l4605
  3687  041C                     l4659:
  3688                           
  3689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3690                           ; Switch size 1, requested type "simple"
  3691                           ; Number of cases is 1, Range of values is 0 to 0
  3692                           ; switch strategies available:
  3693                           ; Name         Instructions Cycles
  3694                           ; simple_byte            4     3 (average)
  3695                           ; direct_byte            8     6 (fixed)
  3696                           ; jumptable            260     6 (fixed)
  3697                           ;	Chosen strategy is simple_byte
  3698  041C  0835               	movf	_cmd_exe_counter+1,w
  3699  041D  3A00               	xorlw	0	; case 0
  3700  041E  1903               	skipnz
  3701  041F  2C21               	goto	l5221
  3702  0420  2D22               	goto	l548
  3703  0421                     l5221:
  3704                           
  3705                           ; Switch size 1, requested type "simple"
  3706                           ; Number of cases is 4, Range of values is 0 to 255
  3707                           ; switch strategies available:
  3708                           ; Name         Instructions Cycles
  3709                           ; simple_byte           13     7 (average)
  3710                           ; jumptable            260     6 (fixed)
  3711                           ;	Chosen strategy is simple_byte
  3712  0421  0834               	movf	_cmd_exe_counter,w
  3713  0422  3A00               	xorlw	0	; case 0
  3714  0423  1903               	skipnz
  3715  0424  2BD3               	goto	l4627
  3716  0425  3A01               	xorlw	1	; case 1
  3717  0426  1903               	skipnz
  3718  0427  2B30               	goto	l4593
  3719  0428  3A03               	xorlw	3	; case 2
  3720  0429  1903               	skipnz
  3721  042A  2BE6               	goto	l4641
  3722  042B  3AFD               	xorlw	253	; case 255
  3723  042C  1903               	skipnz
  3724  042D  2C17               	goto	l4653
  3725  042E  2D22               	goto	l548
  3726  042F                     l4661:
  3727                           
  3728                           ;main.c: 399:                                 send_req(PASSWORD);
  3729  042F  3001               	movlw	1
  3730  0430  318F  2757  3180   	fcall	_send_req
  3731  0433  2B2A               	goto	l4591
  3732  0434                     l4667:
  3733                           
  3734                           ;main.c: 406:                                 if(wait_for_requested(PASSWORD)) {
  3735  0434  3001               	movlw	1
  3736  0435  318D  25F3  3180   	fcall	_wait_for_requested
  3737  0438  3A00               	xorlw	0
  3738  0439  1903               	skipnz
  3739  043A  2C3C               	goto	u2981
  3740  043B  2C3D               	goto	u2980
  3741  043C                     u2981:
  3742  043C  2D80               	goto	l4791
  3743  043D                     u2980:
  3744  043D                     l4669:
  3745                           
  3746                           ;main.c: 407:                                     if(compare_pw(&data_storage[2], data_s
      +                          torage[1]) || !PORTBbits.RB0) {
  3747  043D  30F1               	movlw	241
  3748  043E  00F2               	movwf	compare_pw@pw
  3749  043F  3020               	movlw	32
  3750  0440  00F3               	movwf	compare_pw@pw+1
  3751  0441  30EF               	movlw	239
  3752  0442  0086               	movwf	6
  3753  0443  3020               	movlw	32
  3754  0444  0087               	movwf	7
  3755  0445  3141               	addfsr 1,1
  3756  0446  0801               	movf	1,w
  3757  0447  0020               	movlb	0	; select bank0
  3758  0448  00E5               	movwf	??_main
  3759  0449  0865               	movf	??_main,w
  3760  044A  00F4               	movwf	compare_pw@len
  3761  044B  3187  27A7  3180   	fcall	_compare_pw
  3762  044E  3A00               	xorlw	0
  3763  044F  1D03               	skipz
  3764  0450  2C52               	goto	u2991
  3765  0451  2C53               	goto	u2990
  3766  0452                     u2991:
  3767  0452  2C58               	goto	l4673
  3768  0453                     u2990:
  3769  0453                     l4671:
  3770  0453  0020               	movlb	0	; select bank0
  3771  0454  180D               	btfsc	13,0	;volatile
  3772  0455  2C57               	goto	u3001
  3773  0456  2C58               	goto	u3000
  3774  0457                     u3001:
  3775  0457  2C68               	goto	l4685
  3776  0458                     u3000:
  3777  0458                     l4673:
  3778                           
  3779                           ;main.c: 408:                                         working_state = IDLE;
  3780  0458  0020               	movlb	0	; select bank0
  3781  0459  01D3               	clrf	_working_state
  3782  045A                     l4675:
  3783  045A  0022               	movlb	2	; select bank2
  3784  045B  140C               	bsf	12,0	;volatile
  3785  045C                     l4677:
  3786                           
  3787                           ;main.c: 410:                                         send_stat(LOCK_OPEND);
  3788  045C  3006               	movlw	6
  3789  045D  3187  27E7  3180   	fcall	_send_stat
  3790  0460                     l4679:
  3791                           
  3792                           ;main.c: 411:                                         lock_status = 1;
  3793  0460  0020               	movlb	0	; select bank0
  3794  0461  01CD               	clrf	_lock_status
  3795  0462  0ACD               	incf	_lock_status,f
  3796  0463                     l4681:
  3797                           
  3798                           ;main.c: 412:                                         send_stat(CONTINUE);
  3799  0463  3009               	movlw	9
  3800  0464  3187  27E7  3180   	fcall	_send_stat
  3801  0467  2B2A               	goto	l4591
  3802  0468                     l4685:
  3803                           
  3804                           ;main.c: 415:                                         send_stat(DENY);
  3805  0468  3003               	movlw	3
  3806  0469  3187  27E7  3180   	fcall	_send_stat
  3807  046C  2B71               	goto	l4605
  3808  046D                     l4689:
  3809                           
  3810                           ;main.c: 422:                                 cmd_timer_len = 12000;
  3811  046D  3000               	movlw	0
  3812  046E  00A3               	movwf	_cmd_timer_len+3
  3813  046F  3000               	movlw	0
  3814  0470  00A2               	movwf	_cmd_timer_len+2
  3815  0471  302E               	movlw	46
  3816  0472  00A1               	movwf	_cmd_timer_len+1
  3817  0473  30E0               	movlw	224
  3818  0474  00A0               	movwf	_cmd_timer_len
  3819  0475                     l4691:
  3820                           
  3821                           ;main.c: 423:                                 if((status_storage & (1<<7)) > 0 && (statu
      +                          s_storage & (~(1<<7))) == CONTINUE) {
  3822  0475  1FCE               	btfss	_status_storage,7
  3823  0476  2C78               	goto	u3011
  3824  0477  2C79               	goto	u3010
  3825  0478                     u3011:
  3826  0478  2C8A               	goto	l4699
  3827  0479                     u3010:
  3828  0479                     l4693:
  3829  0479  307F               	movlw	127
  3830  047A  054E               	andwf	_status_storage,w
  3831  047B  00E5               	movwf	??_main
  3832  047C  3009               	movlw	9
  3833  047D  0665               	xorwf	??_main,w
  3834  047E  1D03               	btfss	3,2
  3835  047F  2C81               	goto	u3021
  3836  0480  2C82               	goto	u3020
  3837  0481                     u3021:
  3838  0481  2C8A               	goto	l4699
  3839  0482                     u3020:
  3840  0482                     l4695:
  3841                           
  3842                           ;main.c: 424:                                     ADC_StartConversion();
  3843  0482  318C  24E1  3180   	fcall	_ADC_StartConversion
  3844  0485                     l4697:
  3845                           
  3846                           ;main.c: 425:                                     cmd_exe_counter ++;
  3847  0485  3001               	movlw	1
  3848  0486  0020               	movlb	0	; select bank0
  3849  0487  07B4               	addwf	_cmd_exe_counter,f
  3850  0488  3000               	movlw	0
  3851  0489  3DB5               	addwfc	_cmd_exe_counter+1,f
  3852  048A                     l4699:
  3853                           
  3854                           ;main.c: 427:                                 status_storage = status_storage & (~(1<<7)
      +                          );
  3855  048A  084E               	movf	_status_storage,w
  3856  048B  397F               	andlw	127
  3857  048C  00E5               	movwf	??_main
  3858  048D  0865               	movf	??_main,w
  3859  048E  00CE               	movwf	_status_storage
  3860                           
  3861                           ;main.c: 428:                                 break;
  3862  048F  2D80               	goto	l4791
  3863  0490                     l4701:
  3864                           
  3865                           ;main.c: 430:                                 if(ADC_IsConversionDone()) {
  3866  0490  318D  2518  3180   	fcall	_ADC_IsConversionDone
  3867  0493  3A00               	xorlw	0
  3868  0494  1903               	skipnz
  3869  0495  2C97               	goto	u3031
  3870  0496  2C98               	goto	u3030
  3871  0497                     u3031:
  3872  0497  2D22               	goto	l548
  3873  0498                     u3030:
  3874  0498                     l4703:
  3875                           
  3876                           ;main.c: 431:                                     new_hall_code_close = ADC_GetConversio
      +                          nResult();
  3877  0498  318C  24DE  3180   	fcall	_ADC_GetConversionResult
  3878  049B  0020               	movlb	0	; select bank0
  3879  049C  00E5               	movwf	??_main
  3880  049D  0865               	movf	??_main,w
  3881  049E  00CB               	movwf	_new_hall_code_close
  3882  049F                     l4705:
  3883                           
  3884                           ;main.c: 432:                                     send_stat(CONTINUE);
  3885  049F  3009               	movlw	9
  3886  04A0  3187  27E7  3180   	fcall	_send_stat
  3887  04A3  2B2A               	goto	l4591
  3888  04A4                     l600:	
  3889                           ;main.c: 436:                             case 5:
  3890                           
  3891                           
  3892                           ;main.c: 437:                                 if((status_storage & (1<<7)) > 0 && (statu
      +                          s_storage & (~(1<<7))) == CONTINUE) {
  3893  04A4  1FCE               	btfss	_status_storage,7
  3894  04A5  2CA7               	goto	u3041
  3895  04A6  2CA8               	goto	u3040
  3896  04A7                     u3041:
  3897  04A7  2C8A               	goto	l4699
  3898  04A8                     u3040:
  3899  04A8                     l4709:
  3900  04A8  307F               	movlw	127
  3901  04A9  054E               	andwf	_status_storage,w
  3902  04AA  00E5               	movwf	??_main
  3903  04AB  3009               	movlw	9
  3904  04AC  0665               	xorwf	??_main,w
  3905  04AD  1D03               	btfss	3,2
  3906  04AE  2CB0               	goto	u3051
  3907  04AF  2CB1               	goto	u3050
  3908  04B0                     u3051:
  3909  04B0  2C8A               	goto	l4699
  3910  04B1                     u3050:
  3911  04B1  2C82               	goto	l4695
  3912  04B2                     l4717:
  3913                           
  3914                           ;main.c: 444:                                 if(ADC_IsConversionDone()) {
  3915  04B2  318D  2518  3180   	fcall	_ADC_IsConversionDone
  3916  04B5  3A00               	xorlw	0
  3917  04B6  1903               	skipnz
  3918  04B7  2CB9               	goto	u3061
  3919  04B8  2CBA               	goto	u3060
  3920  04B9                     u3061:
  3921  04B9  2D22               	goto	l548
  3922  04BA                     u3060:
  3923  04BA                     l4719:
  3924                           
  3925                           ;main.c: 445:                                     new_hall_code_open = ADC_GetConversion
      +                          Result();
  3926  04BA  318C  24DE  3180   	fcall	_ADC_GetConversionResult
  3927  04BD  0020               	movlb	0	; select bank0
  3928  04BE  00E5               	movwf	??_main
  3929  04BF  0865               	movf	??_main,w
  3930  04C0  00CC               	movwf	_new_hall_code_open
  3931  04C1                     l4721:
  3932                           
  3933                           ;main.c: 446:                                     send_stat(COMMAND_EXECUTED);
  3934  04C1  3001               	movlw	1
  3935  04C2  3187  27E7  3180   	fcall	_send_stat
  3936  04C5                     l4723:
  3937                           
  3938                           ;main.c: 447:                                     save_hall_codes(new_hall_code_open, ne
      +                          w_hall_code_close);
  3939  04C5  0020               	movlb	0	; select bank0
  3940  04C6  084B               	movf	_new_hall_code_close,w
  3941  04C7  00E5               	movwf	??_main
  3942  04C8  0865               	movf	??_main,w
  3943  04C9  00F4               	movwf	save_hall_codes@close
  3944  04CA  084C               	movf	_new_hall_code_open,w
  3945  04CB  318E  2689  3180   	fcall	_save_hall_codes
  3946  04CE                     l4725:
  3947                           
  3948                           ;main.c: 448:                                     read_hall_codes();
  3949  04CE  318D  2561  3180   	fcall	_read_hall_codes
  3950  04D1                     l4727:
  3951                           
  3952                           ;main.c: 449:                                     working_state = OPENLOCK;
  3953  04D1  0020               	movlb	0	; select bank0
  3954  04D2  01D3               	clrf	_working_state
  3955  04D3  0AD3               	incf	_working_state,f
  3956  04D4                     l4729:
  3957                           
  3958                           ;main.c: 450:                                     stop_cmd();
  3959  04D4  318D  2597  3180   	fcall	_stop_cmd
  3960  04D7                     l4731:
  3961                           
  3962                           ;main.c: 451:                                     new_hall_code_open = 0;
  3963  04D7  0020               	movlb	0	; select bank0
  3964  04D8  01CC               	clrf	_new_hall_code_open
  3965  04D9                     l4733:
  3966                           
  3967                           ;main.c: 452:                                     new_hall_code_close = 0;
  3968  04D9  01CB               	clrf	_new_hall_code_close
  3969  04DA  2D80               	goto	l4791
  3970  04DB                     l4735:
  3971                           
  3972                           ;main.c: 456:                                 send_stat(CANCELD);
  3973  04DB  3008               	movlw	8
  3974  04DC  3187  27E7  3180   	fcall	_send_stat
  3975  04DF  2CD4               	goto	l4729
  3976  04E0                     l4745:
  3977                           
  3978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3979                           ; Switch size 1, requested type "simple"
  3980                           ; Number of cases is 1, Range of values is 0 to 0
  3981                           ; switch strategies available:
  3982                           ; Name         Instructions Cycles
  3983                           ; simple_byte            4     3 (average)
  3984                           ; direct_byte            8     6 (fixed)
  3985                           ; jumptable            260     6 (fixed)
  3986                           ;	Chosen strategy is simple_byte
  3987  04E0  0835               	movf	_cmd_exe_counter+1,w
  3988  04E1  3A00               	xorlw	0	; case 0
  3989  04E2  1903               	skipnz
  3990  04E3  2CE5               	goto	l5223
  3991  04E4  2D22               	goto	l548
  3992  04E5                     l5223:
  3993                           
  3994                           ; Switch size 1, requested type "simple"
  3995                           ; Number of cases is 8, Range of values is 0 to 255
  3996                           ; switch strategies available:
  3997                           ; Name         Instructions Cycles
  3998                           ; simple_byte           25    13 (average)
  3999                           ; jumptable            260     6 (fixed)
  4000                           ;	Chosen strategy is simple_byte
  4001  04E5  0834               	movf	_cmd_exe_counter,w
  4002  04E6  3A00               	xorlw	0	; case 0
  4003  04E7  1903               	skipnz
  4004  04E8  2C2F               	goto	l4661
  4005  04E9  3A01               	xorlw	1	; case 1
  4006  04EA  1903               	skipnz
  4007  04EB  2B30               	goto	l4593
  4008  04EC  3A03               	xorlw	3	; case 2
  4009  04ED  1903               	skipnz
  4010  04EE  2C34               	goto	l4667
  4011  04EF  3A01               	xorlw	1	; case 3
  4012  04F0  1903               	skipnz
  4013  04F1  2C6D               	goto	l4689
  4014  04F2  3A07               	xorlw	7	; case 4
  4015  04F3  1903               	skipnz
  4016  04F4  2C90               	goto	l4701
  4017  04F5  3A01               	xorlw	1	; case 5
  4018  04F6  1903               	skipnz
  4019  04F7  2CA4               	goto	l600
  4020  04F8  3A03               	xorlw	3	; case 6
  4021  04F9  1903               	skipnz
  4022  04FA  2CB2               	goto	l4717
  4023  04FB  3AF9               	xorlw	249	; case 255
  4024  04FC  1903               	skipnz
  4025  04FD  2CDB               	goto	l4735
  4026  04FE  2D22               	goto	l548
  4027  04FF                     l4749:
  4028  04FF  0850               	movf	_cmd,w
  4029  0500  00E5               	movwf	??_main
  4030  0501  01E6               	clrf	??_main+1
  4031                           
  4032                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4033                           ; Switch size 1, requested type "simple"
  4034                           ; Number of cases is 1, Range of values is 0 to 0
  4035                           ; switch strategies available:
  4036                           ; Name         Instructions Cycles
  4037                           ; simple_byte            4     3 (average)
  4038                           ; direct_byte            8     6 (fixed)
  4039                           ; jumptable            260     6 (fixed)
  4040                           ;	Chosen strategy is simple_byte
  4041  0502  0866               	movf	??_main+1,w
  4042  0503  3A00               	xorlw	0	; case 0
  4043  0504  1903               	skipnz
  4044  0505  2D07               	goto	l5225
  4045  0506  2D80               	goto	l4791
  4046  0507                     l5225:
  4047                           
  4048                           ; Switch size 1, requested type "simple"
  4049                           ; Number of cases is 3, Range of values is 1 to 3
  4050                           ; switch strategies available:
  4051                           ; Name         Instructions Cycles
  4052                           ; simple_byte           10     6 (average)
  4053                           ; direct_byte           15     9 (fixed)
  4054                           ; jumptable            263     9 (fixed)
  4055                           ;	Chosen strategy is simple_byte
  4056  0507  0865               	movf	??_main,w
  4057  0508  3A01               	xorlw	1	; case 1
  4058  0509  1903               	skipnz
  4059  050A  2BB7               	goto	l4625
  4060  050B  3A03               	xorlw	3	; case 2
  4061  050C  1903               	skipnz
  4062  050D  2C1C               	goto	l4659
  4063  050E  3A01               	xorlw	1	; case 3
  4064  050F  1903               	skipnz
  4065  0510  2CE0               	goto	l4745
  4066  0511  2D80               	goto	l4791
  4067  0512                     l4753:
  4068  0512  0851               	movf	_cmd_exe,w
  4069  0513  00E5               	movwf	??_main
  4070  0514  01E6               	clrf	??_main+1
  4071                           
  4072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4073                           ; Switch size 1, requested type "simple"
  4074                           ; Number of cases is 1, Range of values is 0 to 0
  4075                           ; switch strategies available:
  4076                           ; Name         Instructions Cycles
  4077                           ; simple_byte            4     3 (average)
  4078                           ; direct_byte            8     6 (fixed)
  4079                           ; jumptable            260     6 (fixed)
  4080                           ;	Chosen strategy is simple_byte
  4081  0515  0866               	movf	??_main+1,w
  4082  0516  3A00               	xorlw	0	; case 0
  4083  0517  1903               	skipnz
  4084  0518  2D1A               	goto	l5227
  4085  0519  2D80               	goto	l4791
  4086  051A                     l5227:
  4087                           
  4088                           ; Switch size 1, requested type "simple"
  4089                           ; Number of cases is 2, Range of values is 0 to 1
  4090                           ; switch strategies available:
  4091                           ; Name         Instructions Cycles
  4092                           ; simple_byte            7     4 (average)
  4093                           ; direct_byte           10     6 (fixed)
  4094                           ; jumptable            260     6 (fixed)
  4095                           ;	Chosen strategy is simple_byte
  4096  051A  0865               	movf	??_main,w
  4097  051B  3A00               	xorlw	0	; case 0
  4098  051C  1903               	skipnz
  4099  051D  2AFE               	goto	l4583
  4100  051E  3A01               	xorlw	1	; case 1
  4101  051F  1903               	skipnz
  4102  0520  2B07               	goto	l4585
  4103  0521  2D80               	goto	l4791
  4104  0522                     l548:
  4105                           
  4106                           ;main.c: 468:         switch (working_state) {
  4107  0522  2D80               	goto	l4791
  4108  0523                     l609:	
  4109                           ;main.c: 473:                 do { LATAbits.LATA0 = 1; } while(0);
  4110                           
  4111  0523  0022               	movlb	2	; select bank2
  4112  0524  140C               	bsf	12,0	;volatile
  4113  0525                     l4755:
  4114                           
  4115                           ;main.c: 474:                 send_stat(LOCK_OPEND);
  4116  0525  3006               	movlw	6
  4117  0526  3187  27E7  3180   	fcall	_send_stat
  4118  0529                     l4757:
  4119                           
  4120                           ;main.c: 475:                 lock_status = 1;
  4121  0529  0020               	movlb	0	; select bank0
  4122  052A  01CD               	clrf	_lock_status
  4123  052B  0ACD               	incf	_lock_status,f
  4124  052C                     l4759:
  4125                           
  4126                           ;main.c: 476:                 working_state = WAITFOROPEN;
  4127  052C  3002               	movlw	2
  4128  052D  00E5               	movwf	??_main
  4129  052E  0865               	movf	??_main,w
  4130  052F  00D3               	movwf	_working_state
  4131  0530                     l4761:
  4132                           
  4133                           ;main.c: 477:                 ADC_StartConversion();
  4134  0530  318C  24E1  3180   	fcall	_ADC_StartConversion
  4135                           
  4136                           ;main.c: 478:                 break;
  4137  0533  2885               	goto	l4407
  4138  0534                     l4763:
  4139                           
  4140                           ;main.c: 480:                 if(ADC_IsConversionDone()) {
  4141  0534  318D  2518  3180   	fcall	_ADC_IsConversionDone
  4142  0537  3A00               	xorlw	0
  4143  0538  1903               	skipnz
  4144  0539  2D3B               	goto	u3071
  4145  053A  2D3C               	goto	u3070
  4146  053B                     u3071:
  4147  053B  2885               	goto	l4407
  4148  053C                     u3070:
  4149  053C                     l4765:
  4150                           
  4151                           ;main.c: 481:                     uint8_t res = ADRESH;
  4152  053C  0021               	movlb	1	; select bank1
  4153  053D  081C               	movf	28,w	;volatile
  4154  053E  0020               	movlb	0	; select bank0
  4155  053F  00E5               	movwf	??_main
  4156  0540  0865               	movf	??_main,w
  4157  0541  00EB               	movwf	main@res
  4158  0542                     l4767:
  4159                           
  4160                           ;main.c: 482:                     if(door_status_changed(1, res)) {
  4161  0542  086B               	movf	main@res,w
  4162  0543  00E5               	movwf	??_main
  4163  0544  01E6               	clrf	??_main+1
  4164  0545  0865               	movf	??_main,w
  4165  0546  00DE               	movwf	door_status_changed@val
  4166  0547  0866               	movf	??_main+1,w
  4167  0548  00DF               	movwf	door_status_changed@val+1
  4168  0549  3001               	movlw	1
  4169  054A  3185  2599  3180   	fcall	_door_status_changed
  4170  054D  3A00               	xorlw	0
  4171  054E  1903               	skipnz
  4172  054F  2D51               	goto	u3081
  4173  0550  2D52               	goto	u3080
  4174  0551                     u3081:
  4175  0551  2D30               	goto	l4761
  4176  0552                     u3080:
  4177  0552                     l4769:
  4178                           
  4179                           ;main.c: 483:                         working_state = WAITFORCLOSE;
  4180  0552  3003               	movlw	3
  4181  0553  0020               	movlb	0	; select bank0
  4182  0554  00E5               	movwf	??_main
  4183  0555  0865               	movf	??_main,w
  4184  0556  00D3               	movwf	_working_state
  4185  0557  2D30               	goto	l4761
  4186  0558                     l4773:
  4187                           
  4188                           ;main.c: 489:                 if(ADC_IsConversionDone()) {
  4189  0558  318D  2518  3180   	fcall	_ADC_IsConversionDone
  4190  055B  3A00               	xorlw	0
  4191  055C  1903               	skipnz
  4192  055D  2D5F               	goto	u3091
  4193  055E  2D60               	goto	u3090
  4194  055F                     u3091:
  4195  055F  2885               	goto	l4407
  4196  0560                     u3090:
  4197  0560                     l4775:
  4198                           
  4199                           ;main.c: 490:                     uint8_t res = ADRESH;
  4200  0560  0021               	movlb	1	; select bank1
  4201  0561  081C               	movf	28,w	;volatile
  4202  0562  0020               	movlb	0	; select bank0
  4203  0563  00E5               	movwf	??_main
  4204  0564  0865               	movf	??_main,w
  4205  0565  00EC               	movwf	main@res_914
  4206  0566                     l4777:
  4207                           
  4208                           ;main.c: 491:                     if(door_status_changed(0, res)) {
  4209  0566  086C               	movf	main@res_914,w
  4210  0567  00E5               	movwf	??_main
  4211  0568  01E6               	clrf	??_main+1
  4212  0569  0865               	movf	??_main,w
  4213  056A  00DE               	movwf	door_status_changed@val
  4214  056B  0866               	movf	??_main+1,w
  4215  056C  00DF               	movwf	door_status_changed@val+1
  4216  056D  3000               	movlw	0
  4217  056E  3185  2599  3180   	fcall	_door_status_changed
  4218  0571  3A00               	xorlw	0
  4219  0572  1903               	skipnz
  4220  0573  2D75               	goto	u3101
  4221  0574  2D76               	goto	u3100
  4222  0575                     u3101:
  4223  0575  2D30               	goto	l4761
  4224  0576                     u3100:
  4225  0576                     l4779:
  4226                           
  4227                           ;main.c: 492:                         send_stat(LOCK_CLOSED);
  4228  0576  3007               	movlw	7
  4229  0577  3187  27E7  3180   	fcall	_send_stat
  4230  057A                     l4781:
  4231                           
  4232                           ;main.c: 493:                         lock_status = 0;
  4233  057A  0020               	movlb	0	; select bank0
  4234  057B  01CD               	clrf	_lock_status
  4235  057C                     l4783:
  4236                           
  4237                           ;main.c: 494:                         working_state = IDLE;
  4238  057C  01D3               	clrf	_working_state
  4239  057D                     l4785:
  4240  057D  0022               	movlb	2	; select bank2
  4241  057E  100C               	bcf	12,0	;volatile
  4242  057F  2D30               	goto	l4761
  4243  0580                     l4791:
  4244  0580  0020               	movlb	0	; select bank0
  4245  0581  0853               	movf	_working_state,w
  4246  0582  00E5               	movwf	??_main
  4247  0583  01E6               	clrf	??_main+1
  4248                           
  4249                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4250                           ; Switch size 1, requested type "simple"
  4251                           ; Number of cases is 1, Range of values is 0 to 0
  4252                           ; switch strategies available:
  4253                           ; Name         Instructions Cycles
  4254                           ; simple_byte            4     3 (average)
  4255                           ; direct_byte            8     6 (fixed)
  4256                           ; jumptable            260     6 (fixed)
  4257                           ;	Chosen strategy is simple_byte
  4258  0584  0866               	movf	??_main+1,w
  4259  0585  3A00               	xorlw	0	; case 0
  4260  0586  1903               	skipnz
  4261  0587  2D89               	goto	l5229
  4262  0588  2885               	goto	l4407
  4263  0589                     l5229:
  4264                           
  4265                           ; Switch size 1, requested type "simple"
  4266                           ; Number of cases is 4, Range of values is 0 to 3
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; simple_byte           13     7 (average)
  4270                           ; direct_byte           14     6 (fixed)
  4271                           ; jumptable            260     6 (fixed)
  4272                           ;	Chosen strategy is simple_byte
  4273  0589  0865               	movf	??_main,w
  4274  058A  3A00               	xorlw	0	; case 0
  4275  058B  1903               	skipnz
  4276  058C  2885               	goto	l4407
  4277  058D  3A01               	xorlw	1	; case 1
  4278  058E  1903               	skipnz
  4279  058F  2D23               	goto	l609
  4280  0590  3A03               	xorlw	3	; case 2
  4281  0591  1903               	skipnz
  4282  0592  2D34               	goto	l4763
  4283  0593  3A01               	xorlw	1	; case 3
  4284  0594  1903               	skipnz
  4285  0595  2D58               	goto	l4773
  4286  0596  2885               	goto	l4407
  4287  0597  3180  283A         	ljmp	start
  4288  0599                     __end_of_main:
  4289                           
  4290                           	psect	text1
  4291  0DF3                     __ptext1:	
  4292 ;; *************** function _wait_for_requested *****************
  4293 ;; Defined at:
  4294 ;;		line 600 in file "main.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  req             1    wreg     unsigned char 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  req             1    2[COMMON] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      _Bool 
  4301 ;; Registers used:
  4302 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4308 ;;      Params:         0       0       0       0       0       0
  4309 ;;      Locals:         1       0       0       0       0       0
  4310 ;;      Temps:          1       0       0       0       0       0
  4311 ;;      Totals:         2       0       0       0       0       0
  4312 ;;Total ram usage:        2 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 4
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _wait_for_requested
  4324  0DF3                     _wait_for_requested:
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _wait_for_requested: [wreg+fsr1l+fsr1h+status,2+status,0]
  4328                           ;wait_for_requested@req stored from wreg
  4329  0DF3  00F2               	movwf	wait_for_requested@req
  4330  0DF4                     l3331:
  4331                           
  4332                           ;main.c: 601:     if(((data_storage[0] & (1<<7)) > 0) && (req == (data_storage[0] & (~(1
      +                          <<7))))) {
  4333  0DF4  30EF               	movlw	239
  4334  0DF5  0086               	movwf	6
  4335  0DF6  3020               	movlw	32
  4336  0DF7  0087               	movwf	7
  4337  0DF8  1F81               	btfss	1,7
  4338  0DF9  2DFB               	goto	u1641
  4339  0DFA  2DFC               	goto	u1640
  4340  0DFB                     u1641:
  4341  0DFB  2E0B               	goto	l3339
  4342  0DFC                     u1640:
  4343  0DFC                     l3333:
  4344  0DFC  30EF               	movlw	239
  4345  0DFD  0086               	movwf	6
  4346  0DFE  3020               	movlw	32
  4347  0DFF  0087               	movwf	7
  4348  0E00  307F               	movlw	127
  4349  0E01  0501               	andwf	1,w
  4350  0E02  00F1               	movwf	??_wait_for_requested
  4351  0E03  0871               	movf	??_wait_for_requested,w
  4352  0E04  0672               	xorwf	wait_for_requested@req,w
  4353  0E05  1D03               	skipz
  4354  0E06  2E08               	goto	u1651
  4355  0E07  2E09               	goto	u1650
  4356  0E08                     u1651:
  4357  0E08  2E0B               	goto	l3339
  4358  0E09                     u1650:
  4359  0E09                     l3335:
  4360                           
  4361                           ;main.c: 602:         return 1;
  4362  0E09  3001               	movlw	1
  4363  0E0A  2E0C               	goto	l695
  4364  0E0B                     l3339:
  4365                           
  4366                           ;main.c: 604:     return 0;
  4367  0E0B  3000               	movlw	0
  4368  0E0C                     l695:
  4369  0E0C  0008               	return
  4370  0E0D                     __end_of_wait_for_requested:
  4371                           
  4372                           	psect	text2
  4373  0D97                     __ptext2:	
  4374 ;; *************** function _stop_cmd *****************
  4375 ;; Defined at:
  4376 ;;		line 607 in file "main.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;		None
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      void 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4390 ;;      Params:         0       0       0       0       0       0
  4391 ;;      Locals:         0       0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0
  4393 ;;      Totals:         0       0       0       0       0       0
  4394 ;;Total ram usage:        0 bytes
  4395 ;; Hardware stack levels used: 1
  4396 ;; Hardware stack levels required when called: 4
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_main
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function _stop_cmd
  4406  0D97                     _stop_cmd:
  4407  0D97                     l3263:	
  4408                           ;incstack = 0
  4409                           ; Regs used in _stop_cmd: [wreg+status,2]
  4410                           
  4411                           
  4412                           ;main.c: 608:     cmd_time = 0;
  4413  0D97  3000               	movlw	0
  4414  0D98  0020               	movlb	0	; select bank0
  4415  0D99  00A7               	movwf	_cmd_time+3
  4416  0D9A  3000               	movlw	0
  4417  0D9B  00A6               	movwf	_cmd_time+2
  4418  0D9C  3000               	movlw	0
  4419  0D9D  00A5               	movwf	_cmd_time+1
  4420  0D9E  3000               	movlw	0
  4421  0D9F  00A4               	movwf	_cmd_time
  4422                           
  4423                           ;main.c: 609:     cmd_timer_len = 0;
  4424  0DA0  3000               	movlw	0
  4425  0DA1  00A3               	movwf	_cmd_timer_len+3
  4426  0DA2  3000               	movlw	0
  4427  0DA3  00A2               	movwf	_cmd_timer_len+2
  4428  0DA4  3000               	movlw	0
  4429  0DA5  00A1               	movwf	_cmd_timer_len+1
  4430  0DA6  3000               	movlw	0
  4431  0DA7  00A0               	movwf	_cmd_timer_len
  4432  0DA8                     l3265:
  4433                           
  4434                           ;main.c: 610:     cmd_exe_counter = 0;
  4435  0DA8  01B4               	clrf	_cmd_exe_counter
  4436  0DA9  01B5               	clrf	_cmd_exe_counter+1
  4437  0DAA                     l3267:
  4438                           
  4439                           ;main.c: 611:     cmd_exe = WAITTOSTART;
  4440  0DAA  01D1               	clrf	_cmd_exe
  4441  0DAB                     l698:
  4442  0DAB  0008               	return
  4443  0DAC                     __end_of_stop_cmd:
  4444                           
  4445                           	psect	text3
  4446  07E7                     __ptext3:	
  4447 ;; *************** function _send_stat *****************
  4448 ;; Defined at:
  4449 ;;		line 544 in file "main.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  stat            1    wreg     unsigned char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  stat            1    0[BANK0 ] unsigned char 
  4454 ;;  status_proto    2    1[BANK0 ] unsigned char [2]
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4464 ;;      Params:         0       0       0       0       0       0
  4465 ;;      Locals:         0       3       0       0       0       0
  4466 ;;      Temps:          1       0       0       0       0       0
  4467 ;;      Totals:         1       3       0       0       0       0
  4468 ;;Total ram usage:        4 bytes
  4469 ;; Hardware stack levels used: 1
  4470 ;; Hardware stack levels required when called: 6
  4471 ;; This function calls:
  4472 ;;		_send_msg_stopping
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _send_stat
  4480  07E7                     _send_stat:
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _send_stat: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4484                           ;send_stat@stat stored from wreg
  4485  07E7  0020               	movlb	0	; select bank0
  4486  07E8  00DA               	movwf	send_stat@stat
  4487  07E9                     l4341:
  4488                           
  4489                           ;main.c: 545:     uint8_t status_protocol[] = {0b00011000, stat};
  4490  07E9  01DB               	clrf	send_stat@status_protocol
  4491  07EA  01DC               	clrf	send_stat@status_protocol+1
  4492  07EB                     l4343:
  4493  07EB  3018               	movlw	24
  4494  07EC  00F9               	movwf	??_send_stat
  4495  07ED  0879               	movf	??_send_stat,w
  4496  07EE  00DB               	movwf	send_stat@status_protocol
  4497  07EF                     l4345:
  4498  07EF  085A               	movf	send_stat@stat,w
  4499  07F0  00F9               	movwf	??_send_stat
  4500  07F1  0879               	movf	??_send_stat,w
  4501  07F2  00DC               	movwf	send_stat@status_protocol+1
  4502  07F3                     l4347:
  4503                           
  4504                           ;main.c: 546:     send_msg_stopping(status_protocol, 2);
  4505  07F3  305B               	movlw	low send_stat@status_protocol
  4506  07F4  00F3               	movwf	send_msg_stopping@msg
  4507  07F5  3000               	movlw	high send_stat@status_protocol
  4508  07F6  00F4               	movwf	send_msg_stopping@msg+1
  4509  07F7  3002               	movlw	2
  4510  07F8  00F9               	movwf	??_send_stat
  4511  07F9  0879               	movf	??_send_stat,w
  4512  07FA  00F5               	movwf	send_msg_stopping@len
  4513  07FB  318E  26AD  3187   	fcall	_send_msg_stopping
  4514  07FE                     l657:
  4515  07FE  0008               	return
  4516  07FF                     __end_of_send_stat:
  4517                           
  4518                           	psect	text4
  4519  0F57                     __ptext4:	
  4520 ;; *************** function _send_req *****************
  4521 ;; Defined at:
  4522 ;;		line 522 in file "main.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  var             1    wreg     unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  var             1    0[BANK0 ] unsigned char 
  4527 ;;  request_prot    3    1[BANK0 ] unsigned char [3]
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4537 ;;      Params:         0       0       0       0       0       0
  4538 ;;      Locals:         0       4       0       0       0       0
  4539 ;;      Temps:          1       0       0       0       0       0
  4540 ;;      Totals:         1       4       0       0       0       0
  4541 ;;Total ram usage:        5 bytes
  4542 ;; Hardware stack levels used: 1
  4543 ;; Hardware stack levels required when called: 6
  4544 ;; This function calls:
  4545 ;;		_del_array
  4546 ;;		_send_msg_stopping
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function _send_req
  4554  0F57                     _send_req:
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in _send_req: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4558                           ;send_req@var stored from wreg
  4559  0F57  0020               	movlb	0	; select bank0
  4560  0F58  00DA               	movwf	send_req@var
  4561  0F59                     l4349:
  4562                           
  4563                           ;main.c: 523:     del_array(data_storage, 127 + 2);
  4564  0F59  30EF               	movlw	239
  4565  0F5A  00F1               	movwf	del_array@array
  4566  0F5B  3020               	movlw	32
  4567  0F5C  00F2               	movwf	del_array@array+1
  4568  0F5D  3081               	movlw	129
  4569  0F5E  00F3               	movwf	del_array@len
  4570  0F5F  3000               	movlw	0
  4571  0F60  00F4               	movwf	del_array@len+1
  4572  0F61  318E  260D  318F   	fcall	_del_array
  4573  0F64                     l4351:
  4574                           
  4575                           ;main.c: 524:     uint8_t request_protocol[] = {0b01000010, var, 0};
  4576  0F64  3000               	movlw	0
  4577  0F65  0020               	movlb	0	; select bank0
  4578  0F66  00DB               	movwf	send_req@request_protocol
  4579  0F67  3000               	movlw	0
  4580  0F68  00DC               	movwf	send_req@request_protocol+1
  4581  0F69  3000               	movlw	0
  4582  0F6A  00DD               	movwf	send_req@request_protocol+2
  4583  0F6B                     l4353:
  4584  0F6B  3042               	movlw	66
  4585  0F6C  00F9               	movwf	??_send_req
  4586  0F6D  0879               	movf	??_send_req,w
  4587  0F6E  00DB               	movwf	send_req@request_protocol
  4588  0F6F                     l4355:
  4589  0F6F  085A               	movf	send_req@var,w
  4590  0F70  00F9               	movwf	??_send_req
  4591  0F71  0879               	movf	??_send_req,w
  4592  0F72  00DC               	movwf	send_req@request_protocol+1
  4593  0F73                     l4357:
  4594  0F73  01DD               	clrf	send_req@request_protocol+2
  4595  0F74                     l4359:
  4596                           
  4597                           ;main.c: 525:     request_protocol[2] = request_protocol[0] ^ request_protocol[1];
  4598  0F74  085C               	movf	send_req@request_protocol+1,w
  4599  0F75  065B               	xorwf	send_req@request_protocol,w
  4600  0F76  00F9               	movwf	??_send_req
  4601  0F77  0879               	movf	??_send_req,w
  4602  0F78  00DD               	movwf	send_req@request_protocol+2
  4603  0F79                     l4361:
  4604                           
  4605                           ;main.c: 526:     send_msg_stopping(request_protocol, 3);
  4606  0F79  305B               	movlw	low send_req@request_protocol
  4607  0F7A  00F3               	movwf	send_msg_stopping@msg
  4608  0F7B  3000               	movlw	high send_req@request_protocol
  4609  0F7C  00F4               	movwf	send_msg_stopping@msg+1
  4610  0F7D  3003               	movlw	3
  4611  0F7E  00F9               	movwf	??_send_req
  4612  0F7F  0879               	movf	??_send_req,w
  4613  0F80  00F5               	movwf	send_msg_stopping@len
  4614  0F81  318E  26AD  318F   	fcall	_send_msg_stopping
  4615  0F84                     l4363:
  4616                           
  4617                           ;main.c: 527:     status_storage = 0;
  4618  0F84  0020               	movlb	0	; select bank0
  4619  0F85  01CE               	clrf	_status_storage
  4620  0F86                     l646:
  4621  0F86  0008               	return
  4622  0F87                     __end_of_send_req:
  4623                           
  4624                           	psect	text5
  4625  0EAD                     __ptext5:	
  4626 ;; *************** function _send_msg_stopping *****************
  4627 ;; Defined at:
  4628 ;;		line 508 in file "main.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  msg             2    3[COMMON] PTR unsigned char 
  4631 ;;		 -> send_stat@status_protocol(2), RAM(4096), send_dat@var(1), send_dat@len(1), 
  4632 ;;		 -> send_dat@control_byte(1), send_req@request_protocol(3), send_cmd@command_protocol(3), 
  4633 ;;  len             1    5[COMMON] unsigned char 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  x               2    7[COMMON] int 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4645 ;;      Params:         3       0       0       0       0       0
  4646 ;;      Locals:         2       0       0       0       0       0
  4647 ;;      Temps:          1       0       0       0       0       0
  4648 ;;      Totals:         6       0       0       0       0       0
  4649 ;;Total ram usage:        6 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; Hardware stack levels required when called: 5
  4652 ;; This function calls:
  4653 ;;		_EUSART_Write
  4654 ;;		_EUSART_is_tx_done
  4655 ;; This function is called by:
  4656 ;;		_send_req
  4657 ;;		_send_stat
  4658 ;;		_send_cmd
  4659 ;;		_send_dat
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           
  4664                           ;psect for function _send_msg_stopping
  4665  0EAD                     _send_msg_stopping:
  4666  0EAD                     l4273:	
  4667                           ;incstack = 0
  4668                           ; Regs used in _send_msg_stopping: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4669                           
  4670                           
  4671                           ;main.c: 509:     for (int x = 0; x < len; x++) {
  4672  0EAD  01F7               	clrf	send_msg_stopping@x
  4673  0EAE  01F8               	clrf	send_msg_stopping@x+1
  4674  0EAF  2EC6               	goto	l4281
  4675  0EB0                     l4275:
  4676  0EB0  318C  24F0  318E   	fcall	_EUSART_is_tx_done
  4677  0EB3  3A00               	xorlw	0
  4678  0EB4  1903               	skipnz
  4679  0EB5  2EB7               	goto	u2401
  4680  0EB6  2EB8               	goto	u2400
  4681  0EB7                     u2401:
  4682  0EB7  2EB0               	goto	l4275
  4683  0EB8                     u2400:
  4684  0EB8                     l4277:
  4685                           
  4686                           ;main.c: 511:         EUSART_Write(*(msg + x));
  4687  0EB8  0877               	movf	send_msg_stopping@x,w
  4688  0EB9  0773               	addwf	send_msg_stopping@msg,w
  4689  0EBA  0086               	movwf	6
  4690  0EBB  0878               	movf	send_msg_stopping@x+1,w
  4691  0EBC  3D74               	addwfc	send_msg_stopping@msg+1,w
  4692  0EBD  0087               	movwf	7
  4693  0EBE  0801               	movf	1,w
  4694  0EBF  318E  26FE  318E   	fcall	_EUSART_Write
  4695  0EC2                     l4279:
  4696                           
  4697                           ;main.c: 512:     }
  4698  0EC2  3001               	movlw	1
  4699  0EC3  07F7               	addwf	send_msg_stopping@x,f
  4700  0EC4  3000               	movlw	0
  4701  0EC5  3DF8               	addwfc	send_msg_stopping@x+1,f
  4702  0EC6                     l4281:
  4703  0EC6  0878               	movf	send_msg_stopping@x+1,w
  4704  0EC7  3A80               	xorlw	128
  4705  0EC8  00F6               	movwf	??_send_msg_stopping
  4706  0EC9  3080               	movlw	128
  4707  0ECA  0276               	subwf	??_send_msg_stopping,w
  4708  0ECB  1D03               	skipz
  4709  0ECC  2ECF               	goto	u2415
  4710  0ECD  0875               	movf	send_msg_stopping@len,w
  4711  0ECE  0277               	subwf	send_msg_stopping@x,w
  4712  0ECF                     u2415:
  4713  0ECF  1C03               	skipc
  4714  0ED0  2ED2               	goto	u2411
  4715  0ED1  2ED3               	goto	u2410
  4716  0ED2                     u2411:
  4717  0ED2  2EB0               	goto	l4275
  4718  0ED3                     u2410:
  4719  0ED3                     l636:
  4720  0ED3  0008               	return
  4721  0ED4                     __end_of_send_msg_stopping:
  4722                           
  4723                           	psect	text6
  4724  0CF0                     __ptext6:	
  4725 ;; *************** function _EUSART_is_tx_done *****************
  4726 ;; Defined at:
  4727 ;;		line 142 in file "mcc_generated_files/eusart.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;		None
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;		None
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      _Bool 
  4734 ;; Registers used:
  4735 ;;		wreg, status,2, status,0
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4741 ;;      Params:         0       0       0       0       0       0
  4742 ;;      Locals:         0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0
  4744 ;;      Totals:         0       0       0       0       0       0
  4745 ;;Total ram usage:        0 bytes
  4746 ;; Hardware stack levels used: 1
  4747 ;; Hardware stack levels required when called: 4
  4748 ;; This function calls:
  4749 ;;		Nothing
  4750 ;; This function is called by:
  4751 ;;		_send_msg_stopping
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           
  4756                           ;psect for function _EUSART_is_tx_done
  4757  0CF0                     _EUSART_is_tx_done:
  4758  0CF0                     l4251:	
  4759                           ;incstack = 0
  4760                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  4761                           
  4762                           
  4763                           ;mcc_generated_files/eusart.c: 144:     return TXSTAbits.TRMT;
  4764  0CF0  0023               	movlb	3	; select bank3
  4765  0CF1  0C1E               	rrf	30,w	;volatile
  4766  0CF2  3901               	andlw	1
  4767  0CF3                     l168:
  4768  0CF3  0008               	return
  4769  0CF4                     __end_of_EUSART_is_tx_done:
  4770                           
  4771                           	psect	text7
  4772  0EFE                     __ptext7:	
  4773 ;; *************** function _EUSART_Write *****************
  4774 ;; Defined at:
  4775 ;;		line 173 in file "mcc_generated_files/eusart.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  txData          1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  txData          1    2[COMMON] unsigned char 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4789 ;;      Params:         0       0       0       0       0       0
  4790 ;;      Locals:         1       0       0       0       0       0
  4791 ;;      Temps:          1       0       0       0       0       0
  4792 ;;      Totals:         2       0       0       0       0       0
  4793 ;;Total ram usage:        2 bytes
  4794 ;; Hardware stack levels used: 1
  4795 ;; Hardware stack levels required when called: 4
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_send_msg_stopping
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _EUSART_Write
  4805  0EFE                     _EUSART_Write:
  4806                           
  4807                           ;incstack = 0
  4808                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4809                           ;EUSART_Write@txData stored from wreg
  4810  0EFE  00F2               	movwf	EUSART_Write@txData
  4811  0EFF                     l4255:
  4812  0EFF                     l4257:	
  4813                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  4814                           
  4815                           
  4816                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  4817  0EFF  0020               	movlb	0	; select bank0
  4818  0F00  0857               	movf	_eusartTxBufferRemaining,w	;volatile
  4819  0F01  1903               	btfsc	3,2
  4820  0F02  2F04               	goto	u2371
  4821  0F03  2F05               	goto	u2370
  4822  0F04                     u2371:
  4823  0F04  2EFF               	goto	l4257
  4824  0F05                     u2370:
  4825  0F05                     l183:
  4826                           
  4827                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  4828  0F05  0021               	movlb	1	; select bank1
  4829  0F06  1A11               	btfsc	17,4	;volatile
  4830  0F07  2F09               	goto	u2381
  4831  0F08  2F0A               	goto	u2380
  4832  0F09                     u2381:
  4833  0F09  2F0E               	goto	l184
  4834  0F0A                     u2380:
  4835  0F0A                     l4259:
  4836                           
  4837                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  4838  0F0A  0872               	movf	EUSART_Write@txData,w
  4839  0F0B  0023               	movlb	3	; select bank3
  4840  0F0C  009A               	movwf	26	;volatile
  4841                           
  4842                           ;mcc_generated_files/eusart.c: 182:     }
  4843  0F0D  2F25               	goto	l4271
  4844  0F0E                     l184:	
  4845                           ;mcc_generated_files/eusart.c: 183:     else
  4846                           
  4847                           
  4848                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  4849  0F0E  1211               	bcf	17,4	;volatile
  4850  0F0F                     l4261:
  4851                           
  4852                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  4853  0F0F  0872               	movf	EUSART_Write@txData,w
  4854  0F10  00F1               	movwf	??_EUSART_Write
  4855  0F11  0020               	movlb	0	; select bank0
  4856  0F12  0859               	movf	_eusartTxHead,w
  4857  0F13  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4858  0F14  0086               	movwf	6
  4859  0F15  0187               	clrf	7
  4860  0F16  0871               	movf	??_EUSART_Write,w
  4861  0F17  0081               	movwf	1
  4862  0F18                     l4263:
  4863  0F18  3001               	movlw	1
  4864  0F19  00F1               	movwf	??_EUSART_Write
  4865  0F1A  0871               	movf	??_EUSART_Write,w
  4866  0F1B  07D9               	addwf	_eusartTxHead,f	;volatile
  4867  0F1C                     l4265:
  4868                           
  4869                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4870  0F1C  3008               	movlw	8
  4871  0F1D  0259               	subwf	_eusartTxHead,w	;volatile
  4872  0F1E  1C03               	skipc
  4873  0F1F  2F21               	goto	u2391
  4874  0F20  2F22               	goto	u2390
  4875  0F21                     u2391:
  4876  0F21  2F23               	goto	l4269
  4877  0F22                     u2390:
  4878  0F22                     l4267:
  4879                           
  4880                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  4881  0F22  01D9               	clrf	_eusartTxHead	;volatile
  4882  0F23                     l4269:
  4883                           
  4884                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  4885  0F23  3001               	movlw	1
  4886  0F24  02D7               	subwf	_eusartTxBufferRemaining,f	;volatile
  4887  0F25                     l4271:
  4888                           
  4889                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  4890  0F25  0021               	movlb	1	; select bank1
  4891  0F26  1611               	bsf	17,4	;volatile
  4892  0F27                     l187:
  4893  0F27  0008               	return
  4894  0F28                     __end_of_EUSART_Write:
  4895                           
  4896                           	psect	text8
  4897  0E0D                     __ptext8:	
  4898 ;; *************** function _del_array *****************
  4899 ;; Defined at:
  4900 ;;		line 504 in file "main.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  array           2    1[COMMON] PTR unsigned char 
  4903 ;;		 -> data_storage(129), 
  4904 ;;  len             2    3[COMMON] short 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  x               2    6[COMMON] short 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4916 ;;      Params:         4       0       0       0       0       0
  4917 ;;      Locals:         2       0       0       0       0       0
  4918 ;;      Temps:          1       0       0       0       0       0
  4919 ;;      Totals:         7       0       0       0       0       0
  4920 ;;Total ram usage:        7 bytes
  4921 ;; Hardware stack levels used: 1
  4922 ;; Hardware stack levels required when called: 4
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_send_req
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _del_array
  4932  0E0D                     _del_array:
  4933  0E0D                     l3107:	
  4934                           ;incstack = 0
  4935                           ; Regs used in _del_array: [wreg+fsr1l+fsr1h+status,2+status,0]
  4936                           
  4937                           
  4938                           ;main.c: 505:     for (int16_t x = 0; x < len; x++) *(array + x) = 0;
  4939  0E0D  01F6               	clrf	del_array@x
  4940  0E0E  01F7               	clrf	del_array@x+1
  4941  0E0F  2E1B               	goto	l3113
  4942  0E10                     l3109:
  4943  0E10  0876               	movf	del_array@x,w
  4944  0E11  0771               	addwf	del_array@array,w
  4945  0E12  0086               	movwf	6
  4946  0E13  0877               	movf	del_array@x+1,w
  4947  0E14  3D72               	addwfc	del_array@array+1,w
  4948  0E15  0087               	movwf	7
  4949  0E16  0181               	clrf	1
  4950  0E17                     l3111:
  4951  0E17  3001               	movlw	1
  4952  0E18  07F6               	addwf	del_array@x,f
  4953  0E19  3000               	movlw	0
  4954  0E1A  3DF7               	addwfc	del_array@x+1,f
  4955  0E1B                     l3113:
  4956  0E1B  0877               	movf	del_array@x+1,w
  4957  0E1C  3A80               	xorlw	128
  4958  0E1D  00F5               	movwf	??_del_array
  4959  0E1E  0874               	movf	del_array@len+1,w
  4960  0E1F  3A80               	xorlw	128
  4961  0E20  0275               	subwf	??_del_array,w
  4962  0E21  1D03               	skipz
  4963  0E22  2E25               	goto	u1365
  4964  0E23  0873               	movf	del_array@len,w
  4965  0E24  0276               	subwf	del_array@x,w
  4966  0E25                     u1365:
  4967  0E25  1C03               	skipc
  4968  0E26  2E28               	goto	u1361
  4969  0E27  2E29               	goto	u1360
  4970  0E28                     u1361:
  4971  0E28  2E10               	goto	l3109
  4972  0E29                     u1360:
  4973  0E29                     l627:
  4974  0E29  0008               	return
  4975  0E2A                     __end_of_del_array:
  4976                           
  4977                           	psect	text9
  4978  0F28                     __ptext9:	
  4979 ;; *************** function _seek_confirmation *****************
  4980 ;; Defined at:
  4981 ;;		line 582 in file "main.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;  wait_num        2    1[COMMON] int 
  4984 ;;  continue_num    2    3[COMMON] int 
  4985 ;;  retry_num       2    5[COMMON] int 
  4986 ;;  cancel_num      2    7[COMMON] int 
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  2    1[COMMON] int 
  4991 ;; Registers used:
  4992 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4998 ;;      Params:         8       0       0       0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0
  5000 ;;      Temps:          2       0       0       0       0       0
  5001 ;;      Totals:        10       0       0       0       0       0
  5002 ;;Total ram usage:       10 bytes
  5003 ;; Hardware stack levels used: 1
  5004 ;; Hardware stack levels required when called: 4
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_main
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _seek_confirmation
  5014  0F28                     _seek_confirmation:
  5015  0F28                     l3293:	
  5016                           ;incstack = 0
  5017                           ; Regs used in _seek_confirmation: [wreg-fsr0h+status,2+status,0]
  5018                           
  5019                           
  5020                           ;main.c: 583:     if((status_storage & (1<<7)) > 0) {
  5021  0F28  0020               	movlb	0	; select bank0
  5022  0F29  1FCE               	btfss	_status_storage,7
  5023  0F2A  2F2C               	goto	u1631
  5024  0F2B  2F2D               	goto	u1630
  5025  0F2C                     u1631:
  5026  0F2C  2F56               	goto	l3321
  5027  0F2D                     u1630:
  5028  0F2D  2F3D               	goto	l3317
  5029  0F2E                     l3297:
  5030                           
  5031                           ;main.c: 586:                 return continue_num;
  5032  0F2E  0874               	movf	seek_confirmation@continue_num+1,w
  5033  0F2F  00F2               	movwf	?_seek_confirmation+1
  5034  0F30  0873               	movf	seek_confirmation@continue_num,w
  5035  0F31  00F1               	movwf	?_seek_confirmation
  5036  0F32  2F56               	goto	l688
  5037  0F33                     l3303:
  5038                           
  5039                           ;main.c: 589:                 return cancel_num;
  5040  0F33  0878               	movf	seek_confirmation@cancel_num+1,w
  5041  0F34  00F2               	movwf	?_seek_confirmation+1
  5042  0F35  0877               	movf	seek_confirmation@cancel_num,w
  5043  0F36  00F1               	movwf	?_seek_confirmation
  5044  0F37  2F56               	goto	l688
  5045  0F38                     l3309:
  5046                           
  5047                           ;main.c: 592:                 return retry_num;
  5048  0F38  0876               	movf	seek_confirmation@retry_num+1,w
  5049  0F39  00F2               	movwf	?_seek_confirmation+1
  5050  0F3A  0875               	movf	seek_confirmation@retry_num,w
  5051  0F3B  00F1               	movwf	?_seek_confirmation
  5052  0F3C  2F56               	goto	l688
  5053  0F3D                     l3317:
  5054  0F3D  084E               	movf	_status_storage,w
  5055  0F3E  397F               	andlw	127
  5056  0F3F  00F9               	movwf	??_seek_confirmation
  5057  0F40  01FA               	clrf	??_seek_confirmation+1
  5058                           
  5059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5060                           ; Switch size 1, requested type "simple"
  5061                           ; Number of cases is 1, Range of values is 0 to 0
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; simple_byte            4     3 (average)
  5065                           ; direct_byte            8     6 (fixed)
  5066                           ; jumptable            260     6 (fixed)
  5067                           ;	Chosen strategy is simple_byte
  5068  0F41  087A               	movf	??_seek_confirmation+1,w
  5069  0F42  3A00               	xorlw	0	; case 0
  5070  0F43  1903               	skipnz
  5071  0F44  2F46               	goto	l5231
  5072  0F45  2F51               	goto	l3319
  5073  0F46                     l5231:
  5074                           
  5075                           ; Switch size 1, requested type "simple"
  5076                           ; Number of cases is 3, Range of values is 2 to 5
  5077                           ; switch strategies available:
  5078                           ; Name         Instructions Cycles
  5079                           ; simple_byte           10     6 (average)
  5080                           ; direct_byte           17     9 (fixed)
  5081                           ; jumptable            263     9 (fixed)
  5082                           ;	Chosen strategy is simple_byte
  5083  0F46  0879               	movf	??_seek_confirmation,w
  5084  0F47  3A02               	xorlw	2	; case 2
  5085  0F48  1903               	skipnz
  5086  0F49  2F2E               	goto	l3297
  5087  0F4A  3A06               	xorlw	6	; case 4
  5088  0F4B  1903               	skipnz
  5089  0F4C  2F33               	goto	l3303
  5090  0F4D  3A01               	xorlw	1	; case 5
  5091  0F4E  1903               	skipnz
  5092  0F4F  2F38               	goto	l3309
  5093  0F50  2F51               	goto	l3319
  5094  0F51                     l3319:
  5095                           
  5096                           ;main.c: 595:         status_storage = status_storage & (~(1<<7));
  5097  0F51  084E               	movf	_status_storage,w
  5098  0F52  397F               	andlw	127
  5099  0F53  00F9               	movwf	??_seek_confirmation
  5100  0F54  0879               	movf	??_seek_confirmation,w
  5101  0F55  00CE               	movwf	_status_storage
  5102  0F56                     l3321:
  5103  0F56                     l688:	
  5104                           ;main.c: 597:     return wait_num;
  5105                           
  5106  0F56  0008               	return
  5107  0F57                     __end_of_seek_confirmation:
  5108                           
  5109                           	psect	text10
  5110  0762                     __ptext10:	
  5111 ;; *************** function _save_pw *****************
  5112 ;; Defined at:
  5113 ;;		line 567 in file "main.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  pw              2    4[COMMON] PTR unsigned char 
  5116 ;;		 -> data_storage(129), 
  5117 ;;  len             1    6[COMMON] unsigned char 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  x               2    8[COMMON] int 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5129 ;;      Params:         3       0       0       0       0       0
  5130 ;;      Locals:         2       0       0       0       0       0
  5131 ;;      Temps:          1       0       0       0       0       0
  5132 ;;      Totals:         6       0       0       0       0       0
  5133 ;;Total ram usage:        6 bytes
  5134 ;; Hardware stack levels used: 1
  5135 ;; Hardware stack levels required when called: 5
  5136 ;; This function calls:
  5137 ;;		_DATAEE_ReadByte
  5138 ;;		_DATAEE_WriteByte
  5139 ;; This function is called by:
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _save_pw
  5146  0762                     _save_pw:
  5147  0762                     l3367:	
  5148                           ;incstack = 0
  5149                           ; Regs used in _save_pw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5150                           
  5151                           
  5152                           ;main.c: 568:     if (DATAEE_ReadByte(4) != len) DATAEE_WriteByte(4, len);
  5153  0762  3004               	movlw	4
  5154  0763  318D  253C  3187   	fcall	_DATAEE_ReadByte
  5155  0766  0676               	xorwf	save_pw@len,w
  5156  0767  1903               	skipnz
  5157  0768  2F6A               	goto	u1691
  5158  0769  2F6B               	goto	u1690
  5159  076A                     u1691:
  5160  076A  2F73               	goto	l3371
  5161  076B                     u1690:
  5162  076B                     l3369:
  5163  076B  0876               	movf	save_pw@len,w
  5164  076C  00F7               	movwf	??_save_pw
  5165  076D  0877               	movf	??_save_pw,w
  5166  076E  00F1               	movwf	DATAEE_WriteByte@bData
  5167  076F  3004               	movlw	4
  5168  0770  318E  262A  3187   	fcall	_DATAEE_WriteByte
  5169  0773                     l3371:
  5170                           
  5171                           ;main.c: 569:     for (int x = 0; x < len; x++) if (DATAEE_ReadByte(x + 4 + 1) != *(pw +
      +                           x)) DATAEE_WriteByte(x + 4 + 1, *(pw + x));
  5172  0773  01F8               	clrf	save_pw@x
  5173  0774  01F9               	clrf	save_pw@x+1
  5174  0775  2F99               	goto	l3379
  5175  0776                     l3373:
  5176  0776  0878               	movf	save_pw@x,w
  5177  0777  0774               	addwf	save_pw@pw,w
  5178  0778  0086               	movwf	6
  5179  0779  0879               	movf	save_pw@x+1,w
  5180  077A  3D75               	addwfc	save_pw@pw+1,w
  5181  077B  0087               	movwf	7
  5182  077C  0878               	movf	save_pw@x,w
  5183  077D  3E05               	addlw	5
  5184  077E  318D  253C  3187   	fcall	_DATAEE_ReadByte
  5185  0781  0601               	xorwf	1,w
  5186  0782  1903               	skipnz
  5187  0783  2F85               	goto	u1701
  5188  0784  2F86               	goto	u1700
  5189  0785                     u1701:
  5190  0785  2F95               	goto	l3377
  5191  0786                     u1700:
  5192  0786                     l3375:
  5193  0786  0878               	movf	save_pw@x,w
  5194  0787  0774               	addwf	save_pw@pw,w
  5195  0788  0086               	movwf	6
  5196  0789  0879               	movf	save_pw@x+1,w
  5197  078A  3D75               	addwfc	save_pw@pw+1,w
  5198  078B  0087               	movwf	7
  5199  078C  0801               	movf	1,w
  5200  078D  00F7               	movwf	??_save_pw
  5201  078E  0877               	movf	??_save_pw,w
  5202  078F  00F1               	movwf	DATAEE_WriteByte@bData
  5203  0790  0878               	movf	save_pw@x,w
  5204  0791  3E05               	addlw	5
  5205  0792  318E  262A  3187   	fcall	_DATAEE_WriteByte
  5206  0795                     l3377:
  5207  0795  3001               	movlw	1
  5208  0796  07F8               	addwf	save_pw@x,f
  5209  0797  3000               	movlw	0
  5210  0798  3DF9               	addwfc	save_pw@x+1,f
  5211  0799                     l3379:
  5212  0799  0879               	movf	save_pw@x+1,w
  5213  079A  3A80               	xorlw	128
  5214  079B  00F7               	movwf	??_save_pw
  5215  079C  3080               	movlw	128
  5216  079D  0277               	subwf	??_save_pw,w
  5217  079E  1D03               	skipz
  5218  079F  2FA2               	goto	u1715
  5219  07A0  0876               	movf	save_pw@len,w
  5220  07A1  0278               	subwf	save_pw@x,w
  5221  07A2                     u1715:
  5222  07A2  1C03               	skipc
  5223  07A3  2FA5               	goto	u1711
  5224  07A4  2FA6               	goto	u1710
  5225  07A5                     u1711:
  5226  07A5  2F76               	goto	l3373
  5227  07A6                     u1710:
  5228  07A6                     l674:
  5229  07A6  0008               	return
  5230  07A7                     __end_of_save_pw:
  5231                           
  5232                           	psect	text11
  5233  0E89                     __ptext11:	
  5234 ;; *************** function _save_hall_codes *****************
  5235 ;; Defined at:
  5236 ;;		line 577 in file "main.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  open            1    wreg     unsigned char 
  5239 ;;  close           1    4[COMMON] unsigned char 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  open            1    6[COMMON] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0, pclath, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5251 ;;      Params:         1       0       0       0       0       0
  5252 ;;      Locals:         1       0       0       0       0       0
  5253 ;;      Temps:          1       0       0       0       0       0
  5254 ;;      Totals:         3       0       0       0       0       0
  5255 ;;Total ram usage:        3 bytes
  5256 ;; Hardware stack levels used: 1
  5257 ;; Hardware stack levels required when called: 5
  5258 ;; This function calls:
  5259 ;;		_DATAEE_ReadByte
  5260 ;;		_DATAEE_WriteByte
  5261 ;; This function is called by:
  5262 ;;		_main
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _save_hall_codes
  5268  0E89                     _save_hall_codes:
  5269                           
  5270                           ;incstack = 0
  5271                           ; Regs used in _save_hall_codes: [wreg+status,2+status,0+pclath+cstack]
  5272                           ;save_hall_codes@open stored from wreg
  5273  0E89  00F6               	movwf	save_hall_codes@open
  5274  0E8A                     l3381:
  5275                           
  5276                           ;main.c: 578:     if (DATAEE_ReadByte(0) != open) DATAEE_WriteByte(0, open);
  5277  0E8A  3000               	movlw	0
  5278  0E8B  318D  253C  318E   	fcall	_DATAEE_ReadByte
  5279  0E8E  0676               	xorwf	save_hall_codes@open,w
  5280  0E8F  1903               	skipnz
  5281  0E90  2E92               	goto	u1721
  5282  0E91  2E93               	goto	u1720
  5283  0E92                     u1721:
  5284  0E92  2E9B               	goto	l3385
  5285  0E93                     u1720:
  5286  0E93                     l3383:
  5287  0E93  0876               	movf	save_hall_codes@open,w
  5288  0E94  00F5               	movwf	??_save_hall_codes
  5289  0E95  0875               	movf	??_save_hall_codes,w
  5290  0E96  00F1               	movwf	DATAEE_WriteByte@bData
  5291  0E97  3000               	movlw	0
  5292  0E98  318E  262A  318E   	fcall	_DATAEE_WriteByte
  5293  0E9B                     l3385:
  5294                           
  5295                           ;main.c: 579:     if (DATAEE_ReadByte(1) != close) DATAEE_WriteByte(1, close);
  5296  0E9B  3001               	movlw	1
  5297  0E9C  318D  253C  318E   	fcall	_DATAEE_ReadByte
  5298  0E9F  0674               	xorwf	save_hall_codes@close,w
  5299  0EA0  1903               	skipnz
  5300  0EA1  2EA3               	goto	u1731
  5301  0EA2  2EA4               	goto	u1730
  5302  0EA3                     u1731:
  5303  0EA3  2EAC               	goto	l682
  5304  0EA4                     u1730:
  5305  0EA4                     l3387:
  5306  0EA4  0874               	movf	save_hall_codes@close,w
  5307  0EA5  00F5               	movwf	??_save_hall_codes
  5308  0EA6  0875               	movf	??_save_hall_codes,w
  5309  0EA7  00F1               	movwf	DATAEE_WriteByte@bData
  5310  0EA8  3001               	movlw	1
  5311  0EA9  318E  262A  318E   	fcall	_DATAEE_WriteByte
  5312  0EAC                     l682:
  5313  0EAC  0008               	return
  5314  0EAD                     __end_of_save_hall_codes:
  5315                           
  5316                           	psect	text12
  5317  0E2A                     __ptext12:	
  5318 ;; *************** function _DATAEE_WriteByte *****************
  5319 ;; Defined at:
  5320 ;;		line 187 in file "mcc_generated_files/memory.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  bAdd            1    wreg     unsigned char 
  5323 ;;  bData           1    1[COMMON] unsigned char 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  bAdd            1    2[COMMON] unsigned char 
  5326 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5336 ;;      Params:         1       0       0       0       0       0
  5337 ;;      Locals:         2       0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0
  5339 ;;      Totals:         3       0       0       0       0       0
  5340 ;;Total ram usage:        3 bytes
  5341 ;; Hardware stack levels used: 1
  5342 ;; Hardware stack levels required when called: 4
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_save_pw
  5347 ;;		_save_hall_codes
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           
  5352                           ;psect for function _DATAEE_WriteByte
  5353  0E2A                     _DATAEE_WriteByte:
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  5357                           ;DATAEE_WriteByte@bAdd stored from wreg
  5358  0E2A  00F2               	movwf	DATAEE_WriteByte@bAdd
  5359  0E2B                     l3065:
  5360  0E2B                     l3067:
  5361                           
  5362                           ;mcc_generated_files/memory.c: 191:     EEADRL = (uint8_t)(bAdd & 0x0ff);
  5363  0E2B  0872               	movf	DATAEE_WriteByte@bAdd,w
  5364  0E2C  0023               	movlb	3	; select bank3
  5365  0E2D  0091               	movwf	17	;volatile
  5366  0E2E                     l3069:
  5367                           
  5368                           ;mcc_generated_files/memory.c: 192:     EEDATL = bData;
  5369  0E2E  0871               	movf	DATAEE_WriteByte@bData,w
  5370  0E2F  0093               	movwf	19	;volatile
  5371  0E30                     l3071:
  5372                           
  5373                           ;mcc_generated_files/memory.c: 193:     EECON1bits.EEPGD = 0;
  5374  0E30  1395               	bcf	21,7	;volsfr
  5375  0E31                     l3073:
  5376                           
  5377                           ;mcc_generated_files/memory.c: 194:     EECON1bits.CFGS = 0;
  5378  0E31  1315               	bcf	21,6	;volsfr
  5379  0E32                     l3075:
  5380                           
  5381                           ;mcc_generated_files/memory.c: 195:     EECON1bits.WREN = 1;
  5382  0E32  1515               	bsf	21,2	;volsfr
  5383  0E33                     l3077:
  5384                           
  5385                           ;mcc_generated_files/memory.c: 197:     GIEBitValue = INTCONbits.GIE;
  5386  0E33  3000               	movlw	0
  5387  0E34  1B8B               	btfsc	11,7	;volatile
  5388  0E35  3001               	movlw	1
  5389  0E36  00F3               	movwf	DATAEE_WriteByte@GIEBitValue
  5390  0E37                     l3079:
  5391                           
  5392                           ;mcc_generated_files/memory.c: 198:     INTCONbits.GIE = 0;
  5393  0E37  138B               	bcf	11,7	;volatile
  5394                           
  5395                           ;mcc_generated_files/memory.c: 199:     EECON2 = 0x55;
  5396  0E38  3055               	movlw	85
  5397  0E39  0096               	movwf	22	;volsfr
  5398                           
  5399                           ;mcc_generated_files/memory.c: 200:     EECON2 = 0xAA;
  5400  0E3A  30AA               	movlw	170
  5401  0E3B  0096               	movwf	22	;volsfr
  5402  0E3C                     l3081:
  5403                           
  5404                           ;mcc_generated_files/memory.c: 201:     EECON1bits.WR = 1;
  5405  0E3C  1495               	bsf	21,1	;volsfr
  5406  0E3D                     l78:	
  5407                           ;mcc_generated_files/memory.c: 204:     {;mcc_generated_files/memory.c: 205:     }
  5408                           
  5409                           
  5410                           ;mcc_generated_files/memory.c: 203:     while (EECON1bits.WR)
  5411  0E3D  1895               	btfsc	21,1	;volsfr
  5412  0E3E  2E40               	goto	u1341
  5413  0E3F  2E41               	goto	u1340
  5414  0E40                     u1341:
  5415  0E40  2E3D               	goto	l78
  5416  0E41                     u1340:
  5417  0E41                     l80:
  5418                           
  5419                           ;mcc_generated_files/memory.c: 207:     EECON1bits.WREN = 0;
  5420  0E41  1115               	bcf	21,2	;volsfr
  5421  0E42                     l3083:
  5422                           
  5423                           ;mcc_generated_files/memory.c: 208:     INTCONbits.GIE = GIEBitValue;
  5424  0E42  0C73               	rrf	DATAEE_WriteByte@GIEBitValue,w
  5425  0E43  1C03               	skipc
  5426  0E44  138B               	bcf	11,7	;volatile
  5427  0E45  1803               	skipnc
  5428  0E46  178B               	bsf	11,7	;volatile
  5429  0E47                     l81:
  5430  0E47  0008               	return
  5431  0E48                     __end_of_DATAEE_WriteByte:
  5432                           
  5433                           	psect	text13
  5434  0D61                     __ptext13:	
  5435 ;; *************** function _read_hall_codes *****************
  5436 ;; Defined at:
  5437 ;;		line 572 in file "main.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      void 
  5444 ;; Registers used:
  5445 ;;		wreg, pclath, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5451 ;;      Params:         0       0       0       0       0       0
  5452 ;;      Locals:         0       0       0       0       0       0
  5453 ;;      Temps:          1       0       0       0       0       0
  5454 ;;      Totals:         1       0       0       0       0       0
  5455 ;;Total ram usage:        1 bytes
  5456 ;; Hardware stack levels used: 1
  5457 ;; Hardware stack levels required when called: 5
  5458 ;; This function calls:
  5459 ;;		_DATAEE_ReadByte
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _read_hall_codes
  5467  0D61                     _read_hall_codes:
  5468  0D61                     l3261:	
  5469                           ;incstack = 0
  5470                           ; Regs used in _read_hall_codes: [wreg+pclath+cstack]
  5471                           
  5472                           
  5473                           ;main.c: 573:     hall_codes[0] = (uint8_t) DATAEE_ReadByte(0);
  5474  0D61  3000               	movlw	0
  5475  0D62  318D  253C  318D   	fcall	_DATAEE_ReadByte
  5476  0D65  00F2               	movwf	??_read_hall_codes
  5477  0D66  0872               	movf	??_read_hall_codes,w
  5478  0D67  0020               	movlb	0	; select bank0
  5479  0D68  00EE               	movwf	_hall_codes
  5480                           
  5481                           ;main.c: 574:     hall_codes[1] = (uint8_t) DATAEE_ReadByte(1);
  5482  0D69  3001               	movlw	1
  5483  0D6A  318D  253C  318D   	fcall	_DATAEE_ReadByte
  5484  0D6D  00F2               	movwf	??_read_hall_codes
  5485  0D6E  0872               	movf	??_read_hall_codes,w
  5486  0D6F  0020               	movlb	0	; select bank0
  5487  0D70  00EF               	movwf	_hall_codes+1
  5488  0D71                     l677:
  5489  0D71  0008               	return
  5490  0D72                     __end_of_read_hall_codes:
  5491                           
  5492                           	psect	text14
  5493  0599                     __ptext14:	
  5494 ;; *************** function _door_status_changed *****************
  5495 ;; Defined at:
  5496 ;;		line 614 in file "main.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  open_or_clos    1    wreg     _Bool 
  5499 ;;  val             2    4[BANK0 ] short 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  open_or_clos    1   10[BANK0 ] _Bool 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      _Bool 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5511 ;;      Params:         0       2       0       0       0       0
  5512 ;;      Locals:         0       1       0       0       0       0
  5513 ;;      Temps:          0       4       0       0       0       0
  5514 ;;      Totals:         0       7       0       0       0       0
  5515 ;;Total ram usage:        7 bytes
  5516 ;; Hardware stack levels used: 1
  5517 ;; Hardware stack levels required when called: 5
  5518 ;; This function calls:
  5519 ;;		___awdiv
  5520 ;;		___wmul
  5521 ;; This function is called by:
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _door_status_changed
  5528  0599                     _door_status_changed:
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _door_status_changed: [wreg+status,2+status,0+pclath+cstack]
  5532                           ;door_status_changed@open_or_close stored from wreg
  5533  0599  0020               	movlb	0	; select bank0
  5534  059A  00E4               	movwf	door_status_changed@open_or_close
  5535  059B                     l4365:
  5536                           
  5537                           ;main.c: 615:     if(open_or_close) {
  5538  059B  0864               	movf	door_status_changed@open_or_close,w
  5539  059C  1903               	btfsc	3,2
  5540  059D  2D9F               	goto	u2561
  5541  059E  2DA0               	goto	u2560
  5542  059F                     u2561:
  5543  059F  2E0D               	goto	l4379
  5544  05A0                     u2560:
  5545  05A0                     l4367:
  5546                           
  5547                           ;main.c: 616:         if((hall_codes[0] > hall_codes[1] && val >= hall_codes[1] + ((hall
      +                          _codes[0] - hall_codes[1]) * 9 / 10)) || (hall_codes[0] < hall_codes[1] && val <= hall_c
      +                          odes[1] - ((hall_codes[1] - hall_codes[0]) * 9 / 10))) return 1;
  5548  05A0  086E               	movf	_hall_codes,w
  5549  05A1  026F               	subwf	_hall_codes+1,w
  5550  05A2  1803               	skipnc
  5551  05A3  2DA5               	goto	u2571
  5552  05A4  2DA6               	goto	u2570
  5553  05A5                     u2571:
  5554  05A5  2DD4               	goto	l4371
  5555  05A6                     u2570:
  5556  05A6                     l4369:
  5557  05A6  300A               	movlw	10
  5558  05A7  00F7               	movwf	___awdiv@divisor
  5559  05A8  3000               	movlw	0
  5560  05A9  00F8               	movwf	___awdiv@divisor+1
  5561  05AA  086F               	movf	_hall_codes+1,w
  5562  05AB  026E               	subwf	_hall_codes,w
  5563  05AC  00F1               	movwf	___wmul@multiplier
  5564  05AD  01F2               	clrf	___wmul@multiplier+1
  5565  05AE  1C03               	skipc
  5566  05AF  03F2               	decf	___wmul@multiplier+1,f
  5567  05B0  3009               	movlw	9
  5568  05B1  00F3               	movwf	___wmul@multiplicand
  5569  05B2  3000               	movlw	0
  5570  05B3  00F4               	movwf	___wmul@multiplicand+1
  5571  05B4  318E  2648  3185   	fcall	___wmul
  5572  05B7  0872               	movf	?___wmul+1,w
  5573  05B8  00FA               	movwf	___awdiv@dividend+1
  5574  05B9  0871               	movf	?___wmul,w
  5575  05BA  00F9               	movwf	___awdiv@dividend
  5576  05BB  3187  2702  3185   	fcall	___awdiv
  5577  05BE  0020               	movlb	0	; select bank0
  5578  05BF  086F               	movf	_hall_codes+1,w
  5579  05C0  0777               	addwf	?___awdiv,w
  5580  05C1  00E0               	movwf	??_door_status_changed
  5581  05C2  0878               	movf	?___awdiv+1,w
  5582  05C3  1803               	skipnc
  5583  05C4  0A78               	incf	?___awdiv+1,w
  5584  05C5  00E1               	movwf	??_door_status_changed+1
  5585  05C6  085F               	movf	door_status_changed@val+1,w
  5586  05C7  3A80               	xorlw	128
  5587  05C8  00E2               	movwf	??_door_status_changed+2
  5588  05C9  0861               	movf	??_door_status_changed+1,w
  5589  05CA  3A80               	xorlw	128
  5590  05CB  0262               	subwf	??_door_status_changed+2,w
  5591  05CC  1D03               	skipz
  5592  05CD  2DD0               	goto	u2585
  5593  05CE  0860               	movf	??_door_status_changed,w
  5594  05CF  025E               	subwf	door_status_changed@val,w
  5595  05D0                     u2585:
  5596  05D0  1803               	skipnc
  5597  05D1  2DD3               	goto	u2581
  5598  05D2  2DD4               	goto	u2580
  5599  05D3                     u2581:
  5600  05D3  2E0B               	goto	l4375
  5601  05D4                     u2580:
  5602  05D4                     l4371:
  5603  05D4  0020               	movlb	0	; select bank0
  5604  05D5  086F               	movf	_hall_codes+1,w
  5605  05D6  026E               	subwf	_hall_codes,w
  5606  05D7  1803               	skipnc
  5607  05D8  2DDA               	goto	u2591
  5608  05D9  2DDB               	goto	u2590
  5609  05DA                     u2591:
  5610  05DA  2E79               	goto	l4391
  5611  05DB                     u2590:
  5612  05DB                     l4373:
  5613  05DB  300A               	movlw	10
  5614  05DC  00F7               	movwf	___awdiv@divisor
  5615  05DD  3000               	movlw	0
  5616  05DE  00F8               	movwf	___awdiv@divisor+1
  5617  05DF  086E               	movf	_hall_codes,w
  5618  05E0  026F               	subwf	_hall_codes+1,w
  5619  05E1  00F1               	movwf	___wmul@multiplier
  5620  05E2  01F2               	clrf	___wmul@multiplier+1
  5621  05E3  1C03               	skipc
  5622  05E4  03F2               	decf	___wmul@multiplier+1,f
  5623  05E5  3009               	movlw	9
  5624  05E6  00F3               	movwf	___wmul@multiplicand
  5625  05E7  3000               	movlw	0
  5626  05E8  00F4               	movwf	___wmul@multiplicand+1
  5627  05E9  318E  2648  3185   	fcall	___wmul
  5628  05EC  0872               	movf	?___wmul+1,w
  5629  05ED  00FA               	movwf	___awdiv@dividend+1
  5630  05EE  0871               	movf	?___wmul,w
  5631  05EF  00F9               	movwf	___awdiv@dividend
  5632  05F0  3187  2702  3185   	fcall	___awdiv
  5633  05F3  0020               	movlb	0	; select bank0
  5634  05F4  086F               	movf	_hall_codes+1,w
  5635  05F5  00E0               	movwf	??_door_status_changed
  5636  05F6  0877               	movf	?___awdiv,w
  5637  05F7  0260               	subwf	??_door_status_changed,w
  5638  05F8  00E1               	movwf	??_door_status_changed+1
  5639  05F9  0978               	comf	?___awdiv+1,w
  5640  05FA  1803               	skipnc
  5641  05FB  0A89               	incf	9,f
  5642  05FC  00E2               	movwf	??_door_status_changed+2
  5643  05FD  0862               	movf	??_door_status_changed+2,w
  5644  05FE  3A80               	xorlw	128
  5645  05FF  00E3               	movwf	??_door_status_changed+3
  5646  0600  085F               	movf	door_status_changed@val+1,w
  5647  0601  3A80               	xorlw	128
  5648  0602  0263               	subwf	??_door_status_changed+3,w
  5649  0603  1D03               	skipz
  5650  0604  2E07               	goto	u2605
  5651  0605  085E               	movf	door_status_changed@val,w
  5652  0606  0261               	subwf	??_door_status_changed+1,w
  5653  0607                     u2605:
  5654  0607  1C03               	skipc
  5655  0608  2E0A               	goto	u2601
  5656  0609  2E0B               	goto	u2600
  5657  060A                     u2601:
  5658  060A  2E79               	goto	l4391
  5659  060B                     u2600:
  5660  060B                     l4375:
  5661  060B  3001               	movlw	1
  5662  060C  2E7A               	goto	l707
  5663  060D                     l4379:
  5664                           
  5665                           ;main.c: 618:         if((hall_codes[1] > hall_codes[0] && val >= hall_codes[0] + ((hall
      +                          _codes[1] - hall_codes[0]) * 9 / 10)) || (hall_codes[1] < hall_codes[0] && val <= hall_c
      +                          odes[0] - ((hall_codes[0] - hall_codes[1]) * 9 / 10))) return 1;
  5666  060D  086F               	movf	_hall_codes+1,w
  5667  060E  026E               	subwf	_hall_codes,w
  5668  060F  1803               	skipnc
  5669  0610  2E12               	goto	u2611
  5670  0611  2E13               	goto	u2610
  5671  0612                     u2611:
  5672  0612  2E41               	goto	l4383
  5673  0613                     u2610:
  5674  0613                     l4381:
  5675  0613  300A               	movlw	10
  5676  0614  00F7               	movwf	___awdiv@divisor
  5677  0615  3000               	movlw	0
  5678  0616  00F8               	movwf	___awdiv@divisor+1
  5679  0617  086E               	movf	_hall_codes,w
  5680  0618  026F               	subwf	_hall_codes+1,w
  5681  0619  00F1               	movwf	___wmul@multiplier
  5682  061A  01F2               	clrf	___wmul@multiplier+1
  5683  061B  1C03               	skipc
  5684  061C  03F2               	decf	___wmul@multiplier+1,f
  5685  061D  3009               	movlw	9
  5686  061E  00F3               	movwf	___wmul@multiplicand
  5687  061F  3000               	movlw	0
  5688  0620  00F4               	movwf	___wmul@multiplicand+1
  5689  0621  318E  2648  3185   	fcall	___wmul
  5690  0624  0872               	movf	?___wmul+1,w
  5691  0625  00FA               	movwf	___awdiv@dividend+1
  5692  0626  0871               	movf	?___wmul,w
  5693  0627  00F9               	movwf	___awdiv@dividend
  5694  0628  3187  2702  3185   	fcall	___awdiv
  5695  062B  0020               	movlb	0	; select bank0
  5696  062C  086E               	movf	_hall_codes,w
  5697  062D  0777               	addwf	?___awdiv,w
  5698  062E  00E0               	movwf	??_door_status_changed
  5699  062F  0878               	movf	?___awdiv+1,w
  5700  0630  1803               	skipnc
  5701  0631  0A78               	incf	?___awdiv+1,w
  5702  0632  00E1               	movwf	??_door_status_changed+1
  5703  0633  085F               	movf	door_status_changed@val+1,w
  5704  0634  3A80               	xorlw	128
  5705  0635  00E2               	movwf	??_door_status_changed+2
  5706  0636  0861               	movf	??_door_status_changed+1,w
  5707  0637  3A80               	xorlw	128
  5708  0638  0262               	subwf	??_door_status_changed+2,w
  5709  0639  1D03               	skipz
  5710  063A  2E3D               	goto	u2625
  5711  063B  0860               	movf	??_door_status_changed,w
  5712  063C  025E               	subwf	door_status_changed@val,w
  5713  063D                     u2625:
  5714  063D  1803               	skipnc
  5715  063E  2E40               	goto	u2621
  5716  063F  2E41               	goto	u2620
  5717  0640                     u2621:
  5718  0640  2E0B               	goto	l4375
  5719  0641                     u2620:
  5720  0641                     l4383:
  5721  0641  0020               	movlb	0	; select bank0
  5722  0642  086E               	movf	_hall_codes,w
  5723  0643  026F               	subwf	_hall_codes+1,w
  5724  0644  1803               	skipnc
  5725  0645  2E47               	goto	u2631
  5726  0646  2E48               	goto	u2630
  5727  0647                     u2631:
  5728  0647  2E79               	goto	l4391
  5729  0648                     u2630:
  5730  0648                     l4385:
  5731  0648  300A               	movlw	10
  5732  0649  00F7               	movwf	___awdiv@divisor
  5733  064A  3000               	movlw	0
  5734  064B  00F8               	movwf	___awdiv@divisor+1
  5735  064C  086F               	movf	_hall_codes+1,w
  5736  064D  026E               	subwf	_hall_codes,w
  5737  064E  00F1               	movwf	___wmul@multiplier
  5738  064F  01F2               	clrf	___wmul@multiplier+1
  5739  0650  1C03               	skipc
  5740  0651  03F2               	decf	___wmul@multiplier+1,f
  5741  0652  3009               	movlw	9
  5742  0653  00F3               	movwf	___wmul@multiplicand
  5743  0654  3000               	movlw	0
  5744  0655  00F4               	movwf	___wmul@multiplicand+1
  5745  0656  318E  2648  3185   	fcall	___wmul
  5746  0659  0872               	movf	?___wmul+1,w
  5747  065A  00FA               	movwf	___awdiv@dividend+1
  5748  065B  0871               	movf	?___wmul,w
  5749  065C  00F9               	movwf	___awdiv@dividend
  5750  065D  3187  2702  3185   	fcall	___awdiv
  5751  0660  0020               	movlb	0	; select bank0
  5752  0661  086E               	movf	_hall_codes,w
  5753  0662  00E0               	movwf	??_door_status_changed
  5754  0663  0877               	movf	?___awdiv,w
  5755  0664  0260               	subwf	??_door_status_changed,w
  5756  0665  00E1               	movwf	??_door_status_changed+1
  5757  0666  0978               	comf	?___awdiv+1,w
  5758  0667  1803               	skipnc
  5759  0668  0A89               	incf	9,f
  5760  0669  00E2               	movwf	??_door_status_changed+2
  5761  066A  0862               	movf	??_door_status_changed+2,w
  5762  066B  3A80               	xorlw	128
  5763  066C  00E3               	movwf	??_door_status_changed+3
  5764  066D  085F               	movf	door_status_changed@val+1,w
  5765  066E  3A80               	xorlw	128
  5766  066F  0263               	subwf	??_door_status_changed+3,w
  5767  0670  1D03               	skipz
  5768  0671  2E74               	goto	u2645
  5769  0672  085E               	movf	door_status_changed@val,w
  5770  0673  0261               	subwf	??_door_status_changed+1,w
  5771  0674                     u2645:
  5772  0674  1C03               	skipc
  5773  0675  2E77               	goto	u2641
  5774  0676  2E78               	goto	u2640
  5775  0677                     u2641:
  5776  0677  2E79               	goto	l4391
  5777  0678                     u2640:
  5778  0678  2E0B               	goto	l4375
  5779  0679                     l4391:
  5780                           
  5781                           ;main.c: 620:     return 0;
  5782  0679  3000               	movlw	0
  5783  067A                     l707:
  5784  067A  0008               	return
  5785  067B                     __end_of_door_status_changed:
  5786                           
  5787                           	psect	text15
  5788  0E48                     __ptext15:	
  5789 ;; *************** function ___wmul *****************
  5790 ;; Defined at:
  5791 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  multiplier      2    1[COMMON] unsigned int 
  5794 ;;  multiplicand    2    3[COMMON] unsigned int 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  product         2    5[COMMON] unsigned int 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  2    1[COMMON] unsigned int 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5806 ;;      Params:         4       0       0       0       0       0
  5807 ;;      Locals:         2       0       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0       0
  5809 ;;      Totals:         6       0       0       0       0       0
  5810 ;;Total ram usage:        6 bytes
  5811 ;; Hardware stack levels used: 1
  5812 ;; Hardware stack levels required when called: 4
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_door_status_changed
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function ___wmul
  5822  0E48                     ___wmul:
  5823  0E48                     l4283:	
  5824                           ;incstack = 0
  5825                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5826                           
  5827  0E48  01F5               	clrf	___wmul@product
  5828  0E49  01F6               	clrf	___wmul@product+1
  5829  0E4A                     l4285:
  5830  0E4A  1C71               	btfss	___wmul@multiplier,0
  5831  0E4B  2E4D               	goto	u2421
  5832  0E4C  2E4E               	goto	u2420
  5833  0E4D                     u2421:
  5834  0E4D  2E52               	goto	l863
  5835  0E4E                     u2420:
  5836  0E4E                     l4287:
  5837  0E4E  0873               	movf	___wmul@multiplicand,w
  5838  0E4F  07F5               	addwf	___wmul@product,f
  5839  0E50  0874               	movf	___wmul@multiplicand+1,w
  5840  0E51  3DF6               	addwfc	___wmul@product+1,f
  5841  0E52                     l863:
  5842  0E52  3001               	movlw	1
  5843  0E53                     u2435:
  5844  0E53  35F3               	lslf	___wmul@multiplicand,f
  5845  0E54  0DF4               	rlf	___wmul@multiplicand+1,f
  5846  0E55  0B89               	decfsz	9,f
  5847  0E56  2E53               	goto	u2435
  5848  0E57                     l4289:
  5849  0E57  3001               	movlw	1
  5850  0E58                     u2445:
  5851  0E58  36F2               	lsrf	___wmul@multiplier+1,f
  5852  0E59  0CF1               	rrf	___wmul@multiplier,f
  5853  0E5A  0B89               	decfsz	9,f
  5854  0E5B  2E58               	goto	u2445
  5855  0E5C                     l4291:
  5856  0E5C  0871               	movf	___wmul@multiplier,w
  5857  0E5D  0472               	iorwf	___wmul@multiplier+1,w
  5858  0E5E  1D03               	btfss	3,2
  5859  0E5F  2E61               	goto	u2451
  5860  0E60  2E62               	goto	u2450
  5861  0E61                     u2451:
  5862  0E61  2E4A               	goto	l4285
  5863  0E62                     u2450:
  5864  0E62                     l4293:
  5865  0E62  0876               	movf	___wmul@product+1,w
  5866  0E63  00F2               	movwf	?___wmul+1
  5867  0E64  0875               	movf	___wmul@product,w
  5868  0E65  00F1               	movwf	?___wmul
  5869  0E66                     l865:
  5870  0E66  0008               	return
  5871  0E67                     __end_of___wmul:
  5872                           
  5873                           	psect	text16
  5874  0702                     __ptext16:	
  5875 ;; *************** function ___awdiv *****************
  5876 ;; Defined at:
  5877 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  divisor         2    7[COMMON] int 
  5880 ;;  dividend        2    9[COMMON] int 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  quotient        2    2[BANK0 ] int 
  5883 ;;  sign            1    1[BANK0 ] unsigned char 
  5884 ;;  counter         1    0[BANK0 ] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  2    7[COMMON] int 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, status,0
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5894 ;;      Params:         4       0       0       0       0       0
  5895 ;;      Locals:         0       4       0       0       0       0
  5896 ;;      Temps:          1       0       0       0       0       0
  5897 ;;      Totals:         5       4       0       0       0       0
  5898 ;;Total ram usage:        9 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 4
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_door_status_changed
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function ___awdiv
  5910  0702                     ___awdiv:
  5911  0702                     l4297:	
  5912                           ;incstack = 0
  5913                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5914                           
  5915  0702  0020               	movlb	0	; select bank0
  5916  0703  01DB               	clrf	___awdiv@sign
  5917  0704                     l4299:
  5918  0704  1FF8               	btfss	___awdiv@divisor+1,7
  5919  0705  2F07               	goto	u2461
  5920  0706  2F08               	goto	u2460
  5921  0707                     u2461:
  5922  0707  2F0F               	goto	l4305
  5923  0708                     u2460:
  5924  0708                     l4301:
  5925  0708  09F7               	comf	___awdiv@divisor,f
  5926  0709  09F8               	comf	___awdiv@divisor+1,f
  5927  070A  0AF7               	incf	___awdiv@divisor,f
  5928  070B  1903               	skipnz
  5929  070C  0AF8               	incf	___awdiv@divisor+1,f
  5930  070D                     l4303:
  5931  070D  01DB               	clrf	___awdiv@sign
  5932  070E  0ADB               	incf	___awdiv@sign,f
  5933  070F                     l4305:
  5934  070F  1FFA               	btfss	___awdiv@dividend+1,7
  5935  0710  2F12               	goto	u2471
  5936  0711  2F13               	goto	u2470
  5937  0712                     u2471:
  5938  0712  2F1C               	goto	l4311
  5939  0713                     u2470:
  5940  0713                     l4307:
  5941  0713  09F9               	comf	___awdiv@dividend,f
  5942  0714  09FA               	comf	___awdiv@dividend+1,f
  5943  0715  0AF9               	incf	___awdiv@dividend,f
  5944  0716  1903               	skipnz
  5945  0717  0AFA               	incf	___awdiv@dividend+1,f
  5946  0718                     l4309:
  5947  0718  3001               	movlw	1
  5948  0719  00FB               	movwf	??___awdiv
  5949  071A  087B               	movf	??___awdiv,w
  5950  071B  06DB               	xorwf	___awdiv@sign,f
  5951  071C                     l4311:
  5952  071C  01DC               	clrf	___awdiv@quotient
  5953  071D  01DD               	clrf	___awdiv@quotient+1
  5954  071E                     l4313:
  5955  071E  0877               	movf	___awdiv@divisor,w
  5956  071F  0478               	iorwf	___awdiv@divisor+1,w
  5957  0720  1903               	btfsc	3,2
  5958  0721  2F23               	goto	u2481
  5959  0722  2F24               	goto	u2480
  5960  0723                     u2481:
  5961  0723  2F53               	goto	l4333
  5962  0724                     u2480:
  5963  0724                     l4315:
  5964  0724  01DA               	clrf	___awdiv@counter
  5965  0725  0ADA               	incf	___awdiv@counter,f
  5966  0726  2F30               	goto	l4321
  5967  0727                     l4317:
  5968  0727  3001               	movlw	1
  5969  0728                     u2495:
  5970  0728  35F7               	lslf	___awdiv@divisor,f
  5971  0729  0DF8               	rlf	___awdiv@divisor+1,f
  5972  072A  0B89               	decfsz	9,f
  5973  072B  2F28               	goto	u2495
  5974  072C                     l4319:
  5975  072C  3001               	movlw	1
  5976  072D  00FB               	movwf	??___awdiv
  5977  072E  087B               	movf	??___awdiv,w
  5978  072F  07DA               	addwf	___awdiv@counter,f
  5979  0730                     l4321:
  5980  0730  1FF8               	btfss	___awdiv@divisor+1,7
  5981  0731  2F33               	goto	u2501
  5982  0732  2F34               	goto	u2500
  5983  0733                     u2501:
  5984  0733  2F27               	goto	l4317
  5985  0734                     u2500:
  5986  0734                     l4323:
  5987  0734  3001               	movlw	1
  5988  0735                     u2515:
  5989  0735  35DC               	lslf	___awdiv@quotient,f
  5990  0736  0DDD               	rlf	___awdiv@quotient+1,f
  5991  0737  0B89               	decfsz	9,f
  5992  0738  2F35               	goto	u2515
  5993  0739  0878               	movf	___awdiv@divisor+1,w
  5994  073A  027A               	subwf	___awdiv@dividend+1,w
  5995  073B  1D03               	skipz
  5996  073C  2F3F               	goto	u2525
  5997  073D  0877               	movf	___awdiv@divisor,w
  5998  073E  0279               	subwf	___awdiv@dividend,w
  5999  073F                     u2525:
  6000  073F  1C03               	skipc
  6001  0740  2F42               	goto	u2521
  6002  0741  2F43               	goto	u2520
  6003  0742                     u2521:
  6004  0742  2F48               	goto	l4329
  6005  0743                     u2520:
  6006  0743                     l4325:
  6007  0743  0877               	movf	___awdiv@divisor,w
  6008  0744  02F9               	subwf	___awdiv@dividend,f
  6009  0745  0878               	movf	___awdiv@divisor+1,w
  6010  0746  3BFA               	subwfb	___awdiv@dividend+1,f
  6011  0747                     l4327:
  6012  0747  145C               	bsf	___awdiv@quotient,0
  6013  0748                     l4329:
  6014  0748  3001               	movlw	1
  6015  0749                     u2535:
  6016  0749  36F8               	lsrf	___awdiv@divisor+1,f
  6017  074A  0CF7               	rrf	___awdiv@divisor,f
  6018  074B  0B89               	decfsz	9,f
  6019  074C  2F49               	goto	u2535
  6020  074D                     l4331:
  6021  074D  3001               	movlw	1
  6022  074E  02DA               	subwf	___awdiv@counter,f
  6023  074F  1D03               	btfss	3,2
  6024  0750  2F52               	goto	u2541
  6025  0751  2F53               	goto	u2540
  6026  0752                     u2541:
  6027  0752  2F34               	goto	l4323
  6028  0753                     u2540:
  6029  0753                     l4333:
  6030  0753  085B               	movf	___awdiv@sign,w
  6031  0754  1903               	btfsc	3,2
  6032  0755  2F57               	goto	u2551
  6033  0756  2F58               	goto	u2550
  6034  0757                     u2551:
  6035  0757  2F5D               	goto	l4337
  6036  0758                     u2550:
  6037  0758                     l4335:
  6038  0758  09DC               	comf	___awdiv@quotient,f
  6039  0759  09DD               	comf	___awdiv@quotient+1,f
  6040  075A  0ADC               	incf	___awdiv@quotient,f
  6041  075B  1903               	skipnz
  6042  075C  0ADD               	incf	___awdiv@quotient+1,f
  6043  075D                     l4337:
  6044  075D  085D               	movf	___awdiv@quotient+1,w
  6045  075E  00F8               	movwf	?___awdiv+1
  6046  075F  085C               	movf	___awdiv@quotient,w
  6047  0760  00F7               	movwf	?___awdiv
  6048  0761                     l1016:
  6049  0761  0008               	return
  6050  0762                     __end_of___awdiv:
  6051                           
  6052                           	psect	text17
  6053  07A7                     __ptext17:	
  6054 ;; *************** function _compare_pw *****************
  6055 ;; Defined at:
  6056 ;;		line 549 in file "main.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  pw              2    2[COMMON] PTR unsigned char 
  6059 ;;		 -> data_storage(129), 
  6060 ;;  len             1    4[COMMON] unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  indata          1    6[COMMON] unsigned char 
  6063 ;;  x               2    9[COMMON] int 
  6064 ;;  eedata          1    8[COMMON] unsigned char 
  6065 ;;  res             1    7[COMMON] _Bool 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      _Bool 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6075 ;;      Params:         3       0       0       0       0       0
  6076 ;;      Locals:         5       0       0       0       0       0
  6077 ;;      Temps:          1       0       0       0       0       0
  6078 ;;      Totals:         9       0       0       0       0       0
  6079 ;;Total ram usage:        9 bytes
  6080 ;; Hardware stack levels used: 1
  6081 ;; Hardware stack levels required when called: 5
  6082 ;; This function calls:
  6083 ;;		_DATAEE_ReadByte
  6084 ;; This function is called by:
  6085 ;;		_main
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           
  6090                           ;psect for function _compare_pw
  6091  07A7                     _compare_pw:
  6092  07A7                     l3343:	
  6093                           ;incstack = 0
  6094                           ; Regs used in _compare_pw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6095                           
  6096                           
  6097                           ;main.c: 550:     _Bool res = 1;
  6098  07A7  01F7               	clrf	compare_pw@res
  6099  07A8  0AF7               	incf	compare_pw@res,f
  6100  07A9                     l3345:
  6101                           
  6102                           ;main.c: 551:     uint8_t eedata = DATAEE_ReadByte(4);
  6103  07A9  3004               	movlw	4
  6104  07AA  318D  253C  3187   	fcall	_DATAEE_ReadByte
  6105  07AD  00F5               	movwf	??_compare_pw
  6106  07AE  0875               	movf	??_compare_pw,w
  6107  07AF  00F8               	movwf	compare_pw@eedata
  6108  07B0                     l3347:
  6109                           
  6110                           ;main.c: 552:     if (eedata != len) {
  6111  07B0  0878               	movf	compare_pw@eedata,w
  6112  07B1  0674               	xorwf	compare_pw@len,w
  6113  07B2  1903               	skipnz
  6114  07B3  2FB5               	goto	u1661
  6115  07B4  2FB6               	goto	u1660
  6116  07B5                     u1661:
  6117  07B5  2FB8               	goto	l3351
  6118  07B6                     u1660:
  6119  07B6                     l3349:
  6120                           
  6121                           ;main.c: 553:         res = 0;
  6122  07B6  01F7               	clrf	compare_pw@res
  6123                           
  6124                           ;main.c: 554:     } else {
  6125  07B7  2FE5               	goto	l3363
  6126  07B8                     l3351:
  6127                           
  6128                           ;main.c: 555:         for (int x = 0; x < len; x++) {
  6129  07B8  01F9               	clrf	compare_pw@x
  6130  07B9  01FA               	clrf	compare_pw@x+1
  6131  07BA  2FD8               	goto	l662
  6132  07BB                     l3353:
  6133                           
  6134                           ;main.c: 556:             eedata = DATAEE_ReadByte(x + 4 + 1);
  6135  07BB  0879               	movf	compare_pw@x,w
  6136  07BC  3E05               	addlw	5
  6137  07BD  318D  253C  3187   	fcall	_DATAEE_ReadByte
  6138  07C0  00F5               	movwf	??_compare_pw
  6139  07C1  0875               	movf	??_compare_pw,w
  6140  07C2  00F8               	movwf	compare_pw@eedata
  6141  07C3                     l3355:
  6142                           
  6143                           ;main.c: 557:             uint8_t indata = *(pw + x);
  6144  07C3  0879               	movf	compare_pw@x,w
  6145  07C4  0772               	addwf	compare_pw@pw,w
  6146  07C5  0086               	movwf	6
  6147  07C6  087A               	movf	compare_pw@x+1,w
  6148  07C7  3D73               	addwfc	compare_pw@pw+1,w
  6149  07C8  0087               	movwf	7
  6150  07C9  0801               	movf	1,w
  6151  07CA  00F5               	movwf	??_compare_pw
  6152  07CB  0875               	movf	??_compare_pw,w
  6153  07CC  00F6               	movwf	compare_pw@indata
  6154  07CD                     l3357:
  6155                           
  6156                           ;main.c: 558:             if (eedata != indata) {
  6157  07CD  0878               	movf	compare_pw@eedata,w
  6158  07CE  0676               	xorwf	compare_pw@indata,w
  6159  07CF  1903               	skipnz
  6160  07D0  2FD2               	goto	u1671
  6161  07D1  2FD3               	goto	u1670
  6162  07D2                     u1671:
  6163  07D2  2FD4               	goto	l3361
  6164  07D3                     u1670:
  6165  07D3  2FB6               	goto	l3349
  6166  07D4                     l3361:
  6167                           
  6168                           ;main.c: 562:         }
  6169  07D4  3001               	movlw	1
  6170  07D5  07F9               	addwf	compare_pw@x,f
  6171  07D6  3000               	movlw	0
  6172  07D7  3DFA               	addwfc	compare_pw@x+1,f
  6173  07D8                     l662:
  6174  07D8  087A               	movf	compare_pw@x+1,w
  6175  07D9  3A80               	xorlw	128
  6176  07DA  00F5               	movwf	??_compare_pw
  6177  07DB  3080               	movlw	128
  6178  07DC  0275               	subwf	??_compare_pw,w
  6179  07DD  1D03               	skipz
  6180  07DE  2FE1               	goto	u1685
  6181  07DF  0874               	movf	compare_pw@len,w
  6182  07E0  0279               	subwf	compare_pw@x,w
  6183  07E1                     u1685:
  6184  07E1  1C03               	skipc
  6185  07E2  2FE4               	goto	u1681
  6186  07E3  2FE5               	goto	u1680
  6187  07E4                     u1681:
  6188  07E4  2FBB               	goto	l3353
  6189  07E5                     u1680:
  6190  07E5                     l3363:
  6191                           
  6192                           ;main.c: 564:     return res;
  6193  07E5  0877               	movf	compare_pw@res,w
  6194  07E6                     l666:
  6195  07E6  0008               	return
  6196  07E7                     __end_of_compare_pw:
  6197                           
  6198                           	psect	text18
  6199  0D3C                     __ptext18:	
  6200 ;; *************** function _DATAEE_ReadByte *****************
  6201 ;; Defined at:
  6202 ;;		line 211 in file "mcc_generated_files/memory.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  bAdd            1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  bAdd            1    1[COMMON] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      unsigned char 
  6209 ;; Registers used:
  6210 ;;		wreg
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6216 ;;      Params:         0       0       0       0       0       0
  6217 ;;      Locals:         1       0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0
  6219 ;;      Totals:         1       0       0       0       0       0
  6220 ;;Total ram usage:        1 bytes
  6221 ;; Hardware stack levels used: 1
  6222 ;; Hardware stack levels required when called: 4
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_compare_pw
  6227 ;;		_save_pw
  6228 ;;		_read_hall_codes
  6229 ;;		_save_hall_codes
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function _DATAEE_ReadByte
  6235  0D3C                     _DATAEE_ReadByte:
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6239                           ;DATAEE_ReadByte@bAdd stored from wreg
  6240  0D3C  00F1               	movwf	DATAEE_ReadByte@bAdd
  6241  0D3D                     l3085:
  6242                           
  6243                           ;mcc_generated_files/memory.c: 211: uint8_t DATAEE_ReadByte(uint8_t bAdd);mcc_generated_
      +                          files/memory.c: 212: {;mcc_generated_files/memory.c: 213:     EEADRL = (uint8_t)(bAdd & 
      +                          0x0ff);
  6244  0D3D  0871               	movf	DATAEE_ReadByte@bAdd,w
  6245  0D3E  0023               	movlb	3	; select bank3
  6246  0D3F  0091               	movwf	17	;volatile
  6247  0D40                     l3087:
  6248                           
  6249                           ;mcc_generated_files/memory.c: 214:     EECON1bits.CFGS = 0;
  6250  0D40  1315               	bcf	21,6	;volsfr
  6251  0D41                     l3089:
  6252                           
  6253                           ;mcc_generated_files/memory.c: 215:     EECON1bits.EEPGD = 0;
  6254  0D41  1395               	bcf	21,7	;volsfr
  6255  0D42                     l3091:
  6256                           
  6257                           ;mcc_generated_files/memory.c: 216:     EECON1bits.RD = 1;
  6258  0D42  1415               	bsf	21,0	;volsfr
  6259  0D43                     l3093:
  6260                           
  6261                           ;mcc_generated_files/memory.c: 217:     __nop();
  6262  0D43  0000               	nop
  6263  0D44                     l3095:
  6264                           
  6265                           ;mcc_generated_files/memory.c: 218:     __nop();
  6266  0D44  0000               	nop
  6267                           
  6268                           ;mcc_generated_files/memory.c: 220:     return (EEDATL);
  6269  0D45  0023               	movlb	3	; select bank3
  6270  0D46  0813               	movf	19,w	;volatile
  6271  0D47                     l84:
  6272  0D47  0008               	return
  6273  0D48                     __end_of_DATAEE_ReadByte:
  6274                           
  6275                           	psect	text19
  6276  0D84                     __ptext19:	
  6277 ;; *************** function _SYSTEM_Initialize *****************
  6278 ;; Defined at:
  6279 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, status,2, status,0, pclath, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6293 ;;      Params:         0       0       0       0       0       0
  6294 ;;      Locals:         0       0       0       0       0       0
  6295 ;;      Temps:          0       0       0       0       0       0
  6296 ;;      Totals:         0       0       0       0       0       0
  6297 ;;Total ram usage:        0 bytes
  6298 ;; Hardware stack levels used: 1
  6299 ;; Hardware stack levels required when called: 6
  6300 ;; This function calls:
  6301 ;;		_ADC_Initialize
  6302 ;;		_EUSART_Initialize
  6303 ;;		_OSCILLATOR_Initialize
  6304 ;;		_PIN_MANAGER_Initialize
  6305 ;;		_TMR2_Initialize
  6306 ;;		_WDT_Initialize
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _SYSTEM_Initialize
  6314  0D84                     _SYSTEM_Initialize:
  6315  0D84                     l3183:	
  6316                           ;incstack = 0
  6317                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6318                           
  6319                           
  6320                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6321  0D84  318D  25C2  318D   	fcall	_PIN_MANAGER_Initialize
  6322                           
  6323                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6324  0D87  318D  2530  318D   	fcall	_OSCILLATOR_Initialize
  6325                           
  6326                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6327  0D8A  318C  24EC  318D   	fcall	_WDT_Initialize
  6328                           
  6329                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6330  0D8D  318D  2572  318D   	fcall	_TMR2_Initialize
  6331                           
  6332                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  6333  0D90  318D  251F  318D   	fcall	_ADC_Initialize
  6334                           
  6335                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  6336  0D93  318F  27C0  318D   	fcall	_EUSART_Initialize
  6337  0D96                     l25:
  6338  0D96  0008               	return
  6339  0D97                     __end_of_SYSTEM_Initialize:
  6340                           
  6341                           	psect	text20
  6342  0CEC                     __ptext20:	
  6343 ;; *************** function _WDT_Initialize *****************
  6344 ;; Defined at:
  6345 ;;		line 75 in file "mcc_generated_files/mcc.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;		None
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;		None
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      void 
  6352 ;; Registers used:
  6353 ;;		wreg
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6359 ;;      Params:         0       0       0       0       0       0
  6360 ;;      Locals:         0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0
  6362 ;;      Totals:         0       0       0       0       0       0
  6363 ;;Total ram usage:        0 bytes
  6364 ;; Hardware stack levels used: 1
  6365 ;; Hardware stack levels required when called: 4
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_SYSTEM_Initialize
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _WDT_Initialize
  6375  0CEC                     _WDT_Initialize:
  6376  0CEC                     l3013:	
  6377                           ;incstack = 0
  6378                           ; Regs used in _WDT_Initialize: [wreg]
  6379                           
  6380                           
  6381                           ;mcc_generated_files/mcc.c: 78:     WDTCON = 0x16;
  6382  0CEC  3016               	movlw	22
  6383  0CED  0021               	movlb	1	; select bank1
  6384  0CEE  0097               	movwf	23	;volatile
  6385  0CEF                     l34:
  6386  0CEF  0008               	return
  6387  0CF0                     __end_of_WDT_Initialize:
  6388                           
  6389                           	psect	text21
  6390  0D72                     __ptext21:	
  6391 ;; *************** function _TMR2_Initialize *****************
  6392 ;; Defined at:
  6393 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;		None
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;		None
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      void 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, pclath, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6407 ;;      Params:         0       0       0       0       0       0
  6408 ;;      Locals:         0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0
  6410 ;;      Totals:         0       0       0       0       0       0
  6411 ;;Total ram usage:        0 bytes
  6412 ;; Hardware stack levels used: 1
  6413 ;; Hardware stack levels required when called: 5
  6414 ;; This function calls:
  6415 ;;		_TMR2_SetInterruptHandler
  6416 ;; This function is called by:
  6417 ;;		_SYSTEM_Initialize
  6418 ;;		_main
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           
  6423                           ;psect for function _TMR2_Initialize
  6424  0D72                     _TMR2_Initialize:
  6425  0D72                     l3015:	
  6426                           ;incstack = 0
  6427                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6428                           
  6429                           
  6430                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xC7;
  6431  0D72  30C7               	movlw	199
  6432  0D73  0020               	movlb	0	; select bank0
  6433  0D74  009B               	movwf	27	;volatile
  6434  0D75                     l3017:
  6435                           
  6436                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  6437  0D75  019A               	clrf	26	;volatile
  6438  0D76                     l3019:
  6439                           
  6440                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  6441  0D76  1091               	bcf	17,1	;volatile
  6442  0D77                     l3021:
  6443                           
  6444                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  6445  0D77  0021               	movlb	1	; select bank1
  6446  0D78  1491               	bsf	17,1	;volatile
  6447  0D79                     l3023:
  6448                           
  6449                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  6450  0D79  30FF               	movlw	low _TMR2_DefaultInterruptHandler
  6451  0D7A  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  6452  0D7B  3007               	movlw	high _TMR2_DefaultInterruptHandler
  6453  0D7C  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  6454  0D7D  318D  2512  318D   	fcall	_TMR2_SetInterruptHandler
  6455  0D80                     l3025:
  6456                           
  6457                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4D;
  6458  0D80  304D               	movlw	77
  6459  0D81  0020               	movlb	0	; select bank0
  6460  0D82  009C               	movwf	28	;volatile
  6461  0D83                     l342:
  6462  0D83  0008               	return
  6463  0D84                     __end_of_TMR2_Initialize:
  6464                           
  6465                           	psect	text22
  6466  0D12                     __ptext22:	
  6467 ;; *************** function _TMR2_SetInterruptHandler *****************
  6468 ;; Defined at:
  6469 ;;		line 147 in file "mcc_generated_files/tmr2.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  6472 ;;		 -> timer_up(1), TMR2_DefaultInterruptHandler(1), 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6484 ;;      Params:         2       0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0
  6486 ;;      Temps:          0       0       0       0       0       0
  6487 ;;      Totals:         2       0       0       0       0       0
  6488 ;;Total ram usage:        2 bytes
  6489 ;; Hardware stack levels used: 1
  6490 ;; Hardware stack levels required when called: 4
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_TMR2_Initialize
  6495 ;;		_main
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _TMR2_SetInterruptHandler
  6501  0D12                     _TMR2_SetInterruptHandler:
  6502  0D12                     l2959:	
  6503                           ;incstack = 0
  6504                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6505                           
  6506                           
  6507                           ;mcc_generated_files/tmr2.c: 148:     TMR2_InterruptHandler = InterruptHandler;
  6508  0D12  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  6509  0D13  0020               	movlb	0	; select bank0
  6510  0D14  00B9               	movwf	_TMR2_InterruptHandler+1
  6511  0D15  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  6512  0D16  00B8               	movwf	_TMR2_InterruptHandler
  6513  0D17                     l370:
  6514  0D17  0008               	return
  6515  0D18                     __end_of_TMR2_SetInterruptHandler:
  6516                           
  6517                           	psect	text23
  6518  0DC2                     __ptext23:	
  6519 ;; *************** function _PIN_MANAGER_Initialize *****************
  6520 ;; Defined at:
  6521 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6535 ;;      Params:         0       0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0
  6538 ;;      Totals:         0       0       0       0       0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used: 1
  6541 ;; Hardware stack levels required when called: 4
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_SYSTEM_Initialize
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _PIN_MANAGER_Initialize
  6551  0DC2                     _PIN_MANAGER_Initialize:
  6552  0DC2                     l2987:	
  6553                           ;incstack = 0
  6554                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6555                           
  6556                           
  6557                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  6558  0DC2  0022               	movlb	2	; select bank2
  6559  0DC3  018C               	clrf	12	;volatile
  6560                           
  6561                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  6562  0DC4  018D               	clrf	13	;volatile
  6563  0DC5                     l2989:
  6564                           
  6565                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0xFE;
  6566  0DC5  30FE               	movlw	254
  6567  0DC6  0021               	movlb	1	; select bank1
  6568  0DC7  008C               	movwf	12	;volatile
  6569  0DC8                     l2991:
  6570                           
  6571                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xFF;
  6572  0DC8  30FF               	movlw	255
  6573  0DC9  008D               	movwf	13	;volatile
  6574  0DCA                     l2993:
  6575                           
  6576                           ;mcc_generated_files/pin_manager.c: 72:     ANSELB = 0xE8;
  6577  0DCA  30E8               	movlw	232
  6578  0DCB  0023               	movlb	3	; select bank3
  6579  0DCC  008D               	movwf	13	;volatile
  6580  0DCD                     l2995:
  6581                           
  6582                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x1E;
  6583  0DCD  301E               	movlw	30
  6584  0DCE  008C               	movwf	12	;volatile
  6585  0DCF                     l2997:
  6586                           
  6587                           ;mcc_generated_files/pin_manager.c: 78:     WPUB = 0x01;
  6588  0DCF  3001               	movlw	1
  6589  0DD0  0024               	movlb	4	; select bank4
  6590  0DD1  008D               	movwf	13	;volatile
  6591  0DD2                     l2999:
  6592                           
  6593                           ;mcc_generated_files/pin_manager.c: 79:     WPUA = 0x00;
  6594  0DD2  018C               	clrf	12	;volatile
  6595  0DD3                     l3001:
  6596                           
  6597                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 0;
  6598  0DD3  0021               	movlb	1	; select bank1
  6599  0DD4  1395               	bcf	21,7	;volatile
  6600  0DD5                     l3003:
  6601                           
  6602                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
  6603  0DD5  0022               	movlb	2	; select bank2
  6604  0DD6  019D               	clrf	29	;volatile
  6605  0DD7                     l3005:
  6606                           
  6607                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x00;
  6608  0DD7  019E               	clrf	30	;volatile
  6609  0DD8                     l253:
  6610  0DD8  0008               	return
  6611  0DD9                     __end_of_PIN_MANAGER_Initialize:
  6612                           
  6613                           	psect	text24
  6614  0D30                     __ptext24:	
  6615 ;; *************** function _OSCILLATOR_Initialize *****************
  6616 ;; Defined at:
  6617 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;		None
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  1    wreg      void 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6631 ;;      Params:         0       0       0       0       0       0
  6632 ;;      Locals:         0       0       0       0       0       0
  6633 ;;      Temps:          0       0       0       0       0       0
  6634 ;;      Totals:         0       0       0       0       0       0
  6635 ;;Total ram usage:        0 bytes
  6636 ;; Hardware stack levels used: 1
  6637 ;; Hardware stack levels required when called: 4
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_SYSTEM_Initialize
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           
  6646                           ;psect for function _OSCILLATOR_Initialize
  6647  0D30                     _OSCILLATOR_Initialize:
  6648  0D30                     l3007:	
  6649                           ;incstack = 0
  6650                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6651                           
  6652                           
  6653                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x70;
  6654  0D30  3070               	movlw	112
  6655  0D31  0021               	movlb	1	; select bank1
  6656  0D32  0099               	movwf	25	;volatile
  6657  0D33                     l3009:
  6658                           
  6659                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  6660  0D33  0198               	clrf	24	;volatile
  6661  0D34                     l3011:
  6662                           
  6663                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  6664  0D34  0022               	movlb	2	; select bank2
  6665  0D35  0196               	clrf	22	;volatile
  6666  0D36                     l28:	
  6667                           ;mcc_generated_files/mcc.c: 71:     {;mcc_generated_files/mcc.c: 72:     }
  6668                           
  6669                           
  6670                           ;mcc_generated_files/mcc.c: 70:     while(PLLR == 0)
  6671  0D36  0021               	movlb	1	; select bank1
  6672  0D37  1F1A               	btfss	26,6	;volatile
  6673  0D38  2D3A               	goto	u1331
  6674  0D39  2D3B               	goto	u1330
  6675  0D3A                     u1331:
  6676  0D3A  2D36               	goto	l28
  6677  0D3B                     u1330:
  6678  0D3B                     l31:
  6679  0D3B  0008               	return
  6680  0D3C                     __end_of_OSCILLATOR_Initialize:
  6681                           
  6682                           	psect	text25
  6683  0FC0                     __ptext25:	
  6684 ;; *************** function _EUSART_Initialize *****************
  6685 ;; Defined at:
  6686 ;;		line 88 in file "mcc_generated_files/eusart.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6700 ;;      Params:         0       0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0
  6702 ;;      Temps:          1       0       0       0       0       0
  6703 ;;      Totals:         1       0       0       0       0       0
  6704 ;;Total ram usage:        1 bytes
  6705 ;; Hardware stack levels used: 1
  6706 ;; Hardware stack levels required when called: 5
  6707 ;; This function calls:
  6708 ;;		_EUSART_SetErrorHandler
  6709 ;;		_EUSART_SetFramingErrorHandler
  6710 ;;		_EUSART_SetOverrunErrorHandler
  6711 ;;		_EUSART_SetRxInterruptHandler
  6712 ;;		_EUSART_SetTxInterruptHandler
  6713 ;; This function is called by:
  6714 ;;		_SYSTEM_Initialize
  6715 ;;		_main
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           
  6720                           ;psect for function _EUSART_Initialize
  6721  0FC0                     _EUSART_Initialize:
  6722  0FC0                     l3033:	
  6723                           ;incstack = 0
  6724                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6725                           
  6726                           
  6727                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  6728  0FC0  0021               	movlb	1	; select bank1
  6729  0FC1  1291               	bcf	17,5	;volatile
  6730  0FC2                     l3035:
  6731                           
  6732                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6733  0FC2  3087               	movlw	low _EUSART_Receive_ISR
  6734  0FC3  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6735  0FC4  300F               	movlw	high _EUSART_Receive_ISR
  6736  0FC5  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6737  0FC6  318D  2506  318F   	fcall	_EUSART_SetRxInterruptHandler
  6738  0FC9                     l3037:
  6739                           
  6740                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  6741  0FC9  0021               	movlb	1	; select bank1
  6742  0FCA  1211               	bcf	17,4	;volatile
  6743                           
  6744                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6745  0FCB  3067               	movlw	low _EUSART_Transmit_ISR
  6746  0FCC  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6747  0FCD  300E               	movlw	high _EUSART_Transmit_ISR
  6748  0FCE  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6749  0FCF  318D  250C  318F   	fcall	_EUSART_SetTxInterruptHandler
  6750  0FD2                     l3039:
  6751                           
  6752                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  6753  0FD2  3008               	movlw	8
  6754  0FD3  0023               	movlb	3	; select bank3
  6755  0FD4  009F               	movwf	31	;volatile
  6756  0FD5                     l3041:
  6757                           
  6758                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  6759  0FD5  3090               	movlw	144
  6760  0FD6  009D               	movwf	29	;volatile
  6761  0FD7                     l3043:
  6762                           
  6763                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  6764  0FD7  3024               	movlw	36
  6765  0FD8  009E               	movwf	30	;volatile
  6766  0FD9                     l3045:
  6767                           
  6768                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x40;
  6769  0FD9  3040               	movlw	64
  6770  0FDA  009B               	movwf	27	;volatile
  6771  0FDB                     l3047:
  6772                           
  6773                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x03;
  6774  0FDB  3003               	movlw	3
  6775  0FDC  009C               	movwf	28	;volatile
  6776  0FDD                     l3049:
  6777                           
  6778                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6779  0FDD  30DD               	movlw	low _EUSART_DefaultFramingErrorHandler
  6780  0FDE  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6781  0FDF  300C               	movlw	high _EUSART_DefaultFramingErrorHandler
  6782  0FE0  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6783  0FE1  318C  24FA  318F   	fcall	_EUSART_SetFramingErrorHandler
  6784  0FE4                     l3051:
  6785                           
  6786                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6787  0FE4  30E8               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6788  0FE5  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6789  0FE6  300C               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6790  0FE7  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6791  0FE8  318D  2500  318F   	fcall	_EUSART_SetOverrunErrorHandler
  6792  0FEB                     l3053:
  6793                           
  6794                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6795  0FEB  30E4               	movlw	low _EUSART_DefaultErrorHandler
  6796  0FEC  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6797  0FED  300C               	movlw	high _EUSART_DefaultErrorHandler
  6798  0FEE  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6799  0FEF  318C  24F4  318F   	fcall	_EUSART_SetErrorHandler
  6800  0FF2                     l3055:
  6801                           
  6802                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  6803  0FF2  0020               	movlb	0	; select bank0
  6804  0FF3  01D4               	clrf	_eusartRxLastError	;volatile
  6805  0FF4                     l3057:
  6806                           
  6807                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  6808  0FF4  01D9               	clrf	_eusartTxHead	;volatile
  6809  0FF5                     l3059:
  6810                           
  6811                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  6812  0FF5  01D8               	clrf	_eusartTxTail	;volatile
  6813  0FF6                     l3061:
  6814                           
  6815                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  6816  0FF6  3008               	movlw	8
  6817  0FF7  00F3               	movwf	??_EUSART_Initialize
  6818  0FF8  0873               	movf	??_EUSART_Initialize,w
  6819  0FF9  00D7               	movwf	_eusartTxBufferRemaining	;volatile
  6820                           
  6821                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  6822  0FFA  01FC               	clrf	_eusartRxHead	;volatile
  6823                           
  6824                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  6825  0FFB  01D6               	clrf	_eusartRxTail	;volatile
  6826                           
  6827                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  6828  0FFC  01D5               	clrf	_eusartRxCount	;volatile
  6829  0FFD                     l3063:
  6830                           
  6831                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  6832  0FFD  0021               	movlb	1	; select bank1
  6833  0FFE  1691               	bsf	17,5	;volatile
  6834  0FFF                     l159:
  6835  0FFF  0008               	return
  6836  1000                     __end_of_EUSART_Initialize:
  6837                           
  6838                           	psect	text26
  6839  0D0C                     __ptext26:	
  6840 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  6841 ;; Defined at:
  6842 ;;		line 276 in file "mcc_generated_files/eusart.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6845 ;;		 -> EUSART_Transmit_ISR(1), 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6857 ;;      Params:         2       0       0       0       0       0
  6858 ;;      Locals:         0       0       0       0       0       0
  6859 ;;      Temps:          0       0       0       0       0       0
  6860 ;;      Totals:         2       0       0       0       0       0
  6861 ;;Total ram usage:        2 bytes
  6862 ;; Hardware stack levels used: 1
  6863 ;; Hardware stack levels required when called: 4
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_EUSART_Initialize
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _EUSART_SetTxInterruptHandler
  6873  0D0C                     _EUSART_SetTxInterruptHandler:
  6874  0D0C                     l2919:	
  6875                           ;incstack = 0
  6876                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  6877                           
  6878                           
  6879                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  6880  0D0C  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  6881  0D0D  0020               	movlb	0	; select bank0
  6882  0D0E  00C5               	movwf	_EUSART_TxDefaultInterruptHandler+1
  6883  0D0F  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  6884  0D10  00C4               	movwf	_EUSART_TxDefaultInterruptHandler
  6885  0D11                     l225:
  6886  0D11  0008               	return
  6887  0D12                     __end_of_EUSART_SetTxInterruptHandler:
  6888                           
  6889                           	psect	text27
  6890  0D06                     __ptext27:	
  6891 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6892 ;; Defined at:
  6893 ;;		line 280 in file "mcc_generated_files/eusart.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6896 ;;		 -> EUSART_Receive_ISR(1), 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6908 ;;      Params:         2       0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0
  6911 ;;      Totals:         2       0       0       0       0       0
  6912 ;;Total ram usage:        2 bytes
  6913 ;; Hardware stack levels used: 1
  6914 ;; Hardware stack levels required when called: 4
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_EUSART_Initialize
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _EUSART_SetRxInterruptHandler
  6924  0D06                     _EUSART_SetRxInterruptHandler:
  6925  0D06                     l2917:	
  6926                           ;incstack = 0
  6927                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6928                           
  6929                           
  6930                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  6931  0D06  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6932  0D07  0020               	movlb	0	; select bank0
  6933  0D08  00C3               	movwf	_EUSART_RxDefaultInterruptHandler+1
  6934  0D09  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6935  0D0A  00C2               	movwf	_EUSART_RxDefaultInterruptHandler
  6936  0D0B                     l228:
  6937  0D0B  0008               	return
  6938  0D0C                     __end_of_EUSART_SetRxInterruptHandler:
  6939                           
  6940                           	psect	text28
  6941  0D00                     __ptext28:	
  6942 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6943 ;; Defined at:
  6944 ;;		line 268 in file "mcc_generated_files/eusart.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6947 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6959 ;;      Params:         2       0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0
  6962 ;;      Totals:         2       0       0       0       0       0
  6963 ;;Total ram usage:        2 bytes
  6964 ;; Hardware stack levels used: 1
  6965 ;; Hardware stack levels required when called: 4
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_EUSART_Initialize
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           
  6974                           ;psect for function _EUSART_SetOverrunErrorHandler
  6975  0D00                     _EUSART_SetOverrunErrorHandler:
  6976  0D00                     l2923:	
  6977                           ;incstack = 0
  6978                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6979                           
  6980                           
  6981                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  6982  0D00  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6983  0D01  0020               	movlb	0	; select bank0
  6984  0D02  00BF               	movwf	_EUSART_OverrunErrorHandler+1
  6985  0D03  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6986  0D04  00BE               	movwf	_EUSART_OverrunErrorHandler
  6987  0D05                     l219:
  6988  0D05  0008               	return
  6989  0D06                     __end_of_EUSART_SetOverrunErrorHandler:
  6990                           
  6991                           	psect	text29
  6992  0CFA                     __ptext29:	
  6993 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6994 ;; Defined at:
  6995 ;;		line 264 in file "mcc_generated_files/eusart.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6998 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;		None
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7010 ;;      Params:         2       0       0       0       0       0
  7011 ;;      Locals:         0       0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0
  7013 ;;      Totals:         2       0       0       0       0       0
  7014 ;;Total ram usage:        2 bytes
  7015 ;; Hardware stack levels used: 1
  7016 ;; Hardware stack levels required when called: 4
  7017 ;; This function calls:
  7018 ;;		Nothing
  7019 ;; This function is called by:
  7020 ;;		_EUSART_Initialize
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           
  7025                           ;psect for function _EUSART_SetFramingErrorHandler
  7026  0CFA                     _EUSART_SetFramingErrorHandler:
  7027  0CFA                     l2921:	
  7028                           ;incstack = 0
  7029                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7030                           
  7031                           
  7032                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  7033  0CFA  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7034  0CFB  0020               	movlb	0	; select bank0
  7035  0CFC  00C1               	movwf	_EUSART_FramingErrorHandler+1
  7036  0CFD  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7037  0CFE  00C0               	movwf	_EUSART_FramingErrorHandler
  7038  0CFF                     l216:
  7039  0CFF  0008               	return
  7040  0D00                     __end_of_EUSART_SetFramingErrorHandler:
  7041                           
  7042                           	psect	text30
  7043  0CF4                     __ptext30:	
  7044 ;; *************** function _EUSART_SetErrorHandler *****************
  7045 ;; Defined at:
  7046 ;;		line 272 in file "mcc_generated_files/eusart.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7049 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;		None
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      void 
  7054 ;; Registers used:
  7055 ;;		wreg
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7061 ;;      Params:         2       0       0       0       0       0
  7062 ;;      Locals:         0       0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0
  7064 ;;      Totals:         2       0       0       0       0       0
  7065 ;;Total ram usage:        2 bytes
  7066 ;; Hardware stack levels used: 1
  7067 ;; Hardware stack levels required when called: 4
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_EUSART_Initialize
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function _EUSART_SetErrorHandler
  7077  0CF4                     _EUSART_SetErrorHandler:
  7078  0CF4                     l2925:	
  7079                           ;incstack = 0
  7080                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7081                           
  7082                           
  7083                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  7084  0CF4  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7085  0CF5  0020               	movlb	0	; select bank0
  7086  0CF6  00BD               	movwf	_EUSART_ErrorHandler+1
  7087  0CF7  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7088  0CF8  00BC               	movwf	_EUSART_ErrorHandler
  7089  0CF9                     l222:
  7090  0CF9  0008               	return
  7091  0CFA                     __end_of_EUSART_SetErrorHandler:
  7092                           
  7093                           	psect	text31
  7094  0D1F                     __ptext31:	
  7095 ;; *************** function _ADC_Initialize *****************
  7096 ;; Defined at:
  7097 ;;		line 67 in file "mcc_generated_files/adc.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;		None
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;		None
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, status,2
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7111 ;;      Params:         0       0       0       0       0       0
  7112 ;;      Locals:         0       0       0       0       0       0
  7113 ;;      Temps:          0       0       0       0       0       0
  7114 ;;      Totals:         0       0       0       0       0       0
  7115 ;;Total ram usage:        0 bytes
  7116 ;; Hardware stack levels used: 1
  7117 ;; Hardware stack levels required when called: 4
  7118 ;; This function calls:
  7119 ;;		Nothing
  7120 ;; This function is called by:
  7121 ;;		_SYSTEM_Initialize
  7122 ;;		_main
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           
  7127                           ;psect for function _ADC_Initialize
  7128  0D1F                     _ADC_Initialize:
  7129  0D1F                     l3027:	
  7130                           ;incstack = 0
  7131                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7132                           
  7133                           
  7134                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x10;
  7135  0D1F  3010               	movlw	16
  7136  0D20  0021               	movlb	1	; select bank1
  7137  0D21  009E               	movwf	30	;volatile
  7138  0D22                     l3029:
  7139                           
  7140                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  7141  0D22  019B               	clrf	27	;volatile
  7142  0D23                     l3031:
  7143                           
  7144                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  7145  0D23  019C               	clrf	28	;volatile
  7146                           
  7147                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x25;
  7148  0D24  3025               	movlw	37
  7149  0D25  009D               	movwf	29	;volatile
  7150  0D26                     l298:
  7151  0D26  0008               	return
  7152  0D27                     __end_of_ADC_Initialize:
  7153                           
  7154                           	psect	text32
  7155  0D27                     __ptext32:	
  7156 ;; *************** function _EUSART_is_rx_ready *****************
  7157 ;; Defined at:
  7158 ;;		line 137 in file "mcc_generated_files/eusart.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      _Bool 
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7172 ;;      Params:         0       0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0
  7175 ;;      Totals:         0       0       0       0       0       0
  7176 ;;Total ram usage:        0 bytes
  7177 ;; Hardware stack levels used: 1
  7178 ;; Hardware stack levels required when called: 4
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _EUSART_is_rx_ready
  7188  0D27                     _EUSART_is_rx_ready:
  7189  0D27                     l3185:	
  7190                           ;incstack = 0
  7191                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  7192                           
  7193                           
  7194                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  7195  0D27  0020               	movlb	0	; select bank0
  7196  0D28  0855               	movf	_eusartRxCount,w	;volatile
  7197  0D29  1D03               	btfss	3,2
  7198  0D2A  2D2C               	goto	u1531
  7199  0D2B  2D2E               	goto	u1530
  7200  0D2C                     u1531:
  7201  0D2C  3001               	movlw	1
  7202  0D2D  2D2F               	goto	u1540
  7203  0D2E                     u1530:
  7204  0D2E  3000               	movlw	0
  7205  0D2F                     u1540:
  7206  0D2F                     l165:
  7207  0D2F  0008               	return
  7208  0D30                     __end_of_EUSART_is_rx_ready:
  7209                           
  7210                           	psect	text33
  7211  0ED4                     __ptext33:	
  7212 ;; *************** function _EUSART_Read *****************
  7213 ;; Defined at:
  7214 ;;		line 151 in file "mcc_generated_files/eusart.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;		None
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  readValue       1    2[COMMON] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      unsigned char 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7228 ;;      Params:         0       0       0       0       0       0
  7229 ;;      Locals:         1       0       0       0       0       0
  7230 ;;      Temps:          1       0       0       0       0       0
  7231 ;;      Totals:         2       0       0       0       0       0
  7232 ;;Total ram usage:        2 bytes
  7233 ;; Hardware stack levels used: 1
  7234 ;; Hardware stack levels required when called: 4
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		_main
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _EUSART_Read
  7244  0ED4                     _EUSART_Read:
  7245  0ED4                     l3189:	
  7246                           ;incstack = 0
  7247                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7248                           
  7249  0ED4                     l3191:	
  7250                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7251                           
  7252                           
  7253                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  7254  0ED4  0020               	movlb	0	; select bank0
  7255  0ED5  0855               	movf	_eusartRxCount,w	;volatile
  7256  0ED6  1903               	btfsc	3,2
  7257  0ED7  2ED9               	goto	u1551
  7258  0ED8  2EDA               	goto	u1550
  7259  0ED9                     u1551:
  7260  0ED9  2ED4               	goto	l3191
  7261  0EDA                     u1550:
  7262  0EDA                     l3193:
  7263                           
  7264                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  7265  0EDA  0856               	movf	_eusartRxTail,w	;volatile
  7266  0EDB  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  7267  0EDC  0086               	movwf	6
  7268  0EDD  0187               	clrf	7
  7269  0EDE  0801               	movf	1,w
  7270  0EDF  00F1               	movwf	??_EUSART_Read
  7271  0EE0  0871               	movf	??_EUSART_Read,w
  7272  0EE1  00D4               	movwf	_eusartRxLastError	;volatile
  7273                           
  7274                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  7275  0EE2  0856               	movf	_eusartRxTail,w
  7276  0EE3  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7277  0EE4  0086               	movwf	6
  7278  0EE5  0187               	clrf	7
  7279  0EE6  0801               	movf	1,w
  7280  0EE7  00F1               	movwf	??_EUSART_Read
  7281  0EE8  0871               	movf	??_EUSART_Read,w
  7282  0EE9  00F2               	movwf	EUSART_Read@readValue
  7283  0EEA                     l3195:
  7284  0EEA  3001               	movlw	1
  7285  0EEB  00F1               	movwf	??_EUSART_Read
  7286  0EEC  0871               	movf	??_EUSART_Read,w
  7287  0EED  07D6               	addwf	_eusartRxTail,f	;volatile
  7288  0EEE                     l3197:
  7289                           
  7290                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7291  0EEE  3008               	movlw	8
  7292  0EEF  0256               	subwf	_eusartRxTail,w	;volatile
  7293  0EF0  1C03               	skipc
  7294  0EF1  2EF3               	goto	u1561
  7295  0EF2  2EF4               	goto	u1560
  7296  0EF3                     u1561:
  7297  0EF3  2EF5               	goto	l3201
  7298  0EF4                     u1560:
  7299  0EF4                     l3199:
  7300                           
  7301                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  7302  0EF4  01D6               	clrf	_eusartRxTail	;volatile
  7303  0EF5                     l3201:
  7304                           
  7305                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  7306  0EF5  0021               	movlb	1	; select bank1
  7307  0EF6  1291               	bcf	17,5	;volatile
  7308  0EF7                     l3203:
  7309                           
  7310                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  7311  0EF7  3001               	movlw	1
  7312  0EF8  0020               	movlb	0	; select bank0
  7313  0EF9  02D5               	subwf	_eusartRxCount,f	;volatile
  7314  0EFA                     l3205:
  7315                           
  7316                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  7317  0EFA  0021               	movlb	1	; select bank1
  7318  0EFB  1691               	bsf	17,5	;volatile
  7319  0EFC                     l3207:
  7320                           
  7321                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  7322  0EFC  0872               	movf	EUSART_Read@readValue,w
  7323  0EFD                     l178:
  7324  0EFD  0008               	return
  7325  0EFE                     __end_of_EUSART_Read:
  7326                           
  7327                           	psect	text34
  7328  0CE1                     __ptext34:	
  7329 ;; *************** function _ADC_StartConversion *****************
  7330 ;; Defined at:
  7331 ;;		line 93 in file "mcc_generated_files/adc.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;                  1    wreg      void 
  7338 ;; Registers used:
  7339 ;;		None
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7345 ;;      Params:         0       0       0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used: 1
  7351 ;; Hardware stack levels required when called: 4
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_main
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           
  7360                           ;psect for function _ADC_StartConversion
  7361  0CE1                     _ADC_StartConversion:
  7362  0CE1                     l3251:	
  7363                           ;incstack = 0
  7364                           ; Regs used in _ADC_StartConversion: []
  7365                           
  7366                           
  7367                           ;mcc_generated_files/adc.c: 96:     ADCON0bits.GO_nDONE = 1;
  7368  0CE1  0021               	movlb	1	; select bank1
  7369  0CE2  149D               	bsf	29,1	;volatile
  7370  0CE3                     l304:
  7371  0CE3  0008               	return
  7372  0CE4                     __end_of_ADC_StartConversion:
  7373                           
  7374                           	psect	text35
  7375  0D18                     __ptext35:	
  7376 ;; *************** function _ADC_IsConversionDone *****************
  7377 ;; Defined at:
  7378 ;;		line 100 in file "mcc_generated_files/adc.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;		None
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      _Bool 
  7385 ;; Registers used:
  7386 ;;		wreg, status,0
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7392 ;;      Params:         0       0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used: 1
  7398 ;; Hardware stack levels required when called: 4
  7399 ;; This function calls:
  7400 ;;		Nothing
  7401 ;; This function is called by:
  7402 ;;		_main
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           
  7407                           ;psect for function _ADC_IsConversionDone
  7408  0D18                     _ADC_IsConversionDone:
  7409  0D18                     l3253:	
  7410                           ;incstack = 0
  7411                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  7412                           
  7413                           
  7414                           ;mcc_generated_files/adc.c: 103:    return ((_Bool)(!ADCON0bits.GO_nDONE));
  7415  0D18  1003               	clrc
  7416  0D19  0021               	movlb	1	; select bank1
  7417  0D1A  1C9D               	btfss	29,1	;volatile
  7418  0D1B  1403               	setc
  7419  0D1C  3000               	movlw	0
  7420  0D1D  3D09               	addwfc	9,w
  7421  0D1E                     l307:
  7422  0D1E  0008               	return
  7423  0D1F                     __end_of_ADC_IsConversionDone:
  7424                           
  7425                           	psect	text36
  7426  0CDE                     __ptext36:	
  7427 ;; *************** function _ADC_GetConversionResult *****************
  7428 ;; Defined at:
  7429 ;;		line 106 in file "mcc_generated_files/adc.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;		None
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      unsigned char 
  7436 ;; Registers used:
  7437 ;;		wreg
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7443 ;;      Params:         0       0       0       0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0
  7446 ;;      Totals:         0       0       0       0       0       0
  7447 ;;Total ram usage:        0 bytes
  7448 ;; Hardware stack levels used: 1
  7449 ;; Hardware stack levels required when called: 4
  7450 ;; This function calls:
  7451 ;;		Nothing
  7452 ;; This function is called by:
  7453 ;;		_main
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _ADC_GetConversionResult
  7459  0CDE                     _ADC_GetConversionResult:
  7460  0CDE                     l3257:	
  7461                           ;incstack = 0
  7462                           ; Regs used in _ADC_GetConversionResult: [wreg]
  7463                           
  7464                           
  7465                           ;mcc_generated_files/adc.c: 109:     return ADRESH;
  7466  0CDE  0021               	movlb	1	; select bank1
  7467  0CDF  081C               	movf	28,w	;volatile
  7468  0CE0                     l310:
  7469  0CE0  0008               	return
  7470  0CE1                     __end_of_ADC_GetConversionResult:
  7471                           
  7472                           	psect	intentry
  7473  0004                     __pintentry:	
  7474 ;; *************** function _INTERRUPT_InterruptManager *****************
  7475 ;; Defined at:
  7476 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;		None
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;		None
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  1    wreg      void 
  7483 ;; Registers used:
  7484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7490 ;;      Params:         0       0       0       0       0       0
  7491 ;;      Locals:         0       0       0       0       0       0
  7492 ;;      Temps:          0       0       0       0       0       0
  7493 ;;      Totals:         0       0       0       0       0       0
  7494 ;;Total ram usage:        0 bytes
  7495 ;; Hardware stack levels used: 1
  7496 ;; Hardware stack levels required when called: 3
  7497 ;; This function calls:
  7498 ;;		Absolute function
  7499 ;;		_EUSART_Receive_ISR
  7500 ;;		_EUSART_Transmit_ISR
  7501 ;;		_TMR2_ISR
  7502 ;; This function is called by:
  7503 ;;		Interrupt level 1
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507  0004                     _INTERRUPT_InterruptManager:
  7508                           
  7509                           ;incstack = 0
  7510  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  7511                           
  7512                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7513  0005  3180               	pagesel	$
  7514  0006                     i1l3419:
  7515                           
  7516                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  7517  0006  1F0B               	btfss	11,6	;volatile
  7518  0007  2809               	goto	u183_21
  7519  0008  280A               	goto	u183_20
  7520  0009                     u183_21:
  7521  0009  2838               	goto	i1l281
  7522  000A                     u183_20:
  7523  000A                     i1l3421:
  7524                           
  7525                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  7526  000A  0021               	movlb	1	; select bank1
  7527  000B  1E11               	btfss	17,4	;volatile
  7528  000C  280E               	goto	u184_21
  7529  000D  280F               	goto	u184_20
  7530  000E                     u184_21:
  7531  000E  281A               	goto	i1l274
  7532  000F                     u184_20:
  7533  000F                     i1l3423:
  7534  000F  0020               	movlb	0	; select bank0
  7535  0010  1E11               	btfss	17,4	;volatile
  7536  0011  2813               	goto	u185_21
  7537  0012  2814               	goto	u185_20
  7538  0013                     u185_21:
  7539  0013  281A               	goto	i1l274
  7540  0014                     u185_20:
  7541  0014                     i1l3425:
  7542                           
  7543                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  7544  0014  0845               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  7545  0015  008A               	movwf	10
  7546  0016  0844               	movf	_EUSART_TxDefaultInterruptHandler,w
  7547  0017  000A               	callw
  7548  0018  3180               	pagesel	$
  7549                           
  7550                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  7551  0019  2838               	goto	i1l281
  7552  001A                     i1l274:	
  7553                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  7554                           
  7555  001A  0021               	movlb	1	; select bank1
  7556  001B  1E91               	btfss	17,5	;volatile
  7557  001C  281E               	goto	u186_21
  7558  001D  281F               	goto	u186_20
  7559  001E                     u186_21:
  7560  001E  282A               	goto	i1l276
  7561  001F                     u186_20:
  7562  001F                     i1l3427:
  7563  001F  0020               	movlb	0	; select bank0
  7564  0020  1E91               	btfss	17,5	;volatile
  7565  0021  2823               	goto	u187_21
  7566  0022  2824               	goto	u187_20
  7567  0023                     u187_21:
  7568  0023  282A               	goto	i1l276
  7569  0024                     u187_20:
  7570  0024                     i1l3429:
  7571                           
  7572                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  7573  0024  0843               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  7574  0025  008A               	movwf	10
  7575  0026  0842               	movf	_EUSART_RxDefaultInterruptHandler,w
  7576  0027  000A               	callw
  7577  0028  3180               	pagesel	$
  7578                           
  7579                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  7580  0029  2838               	goto	i1l281
  7581  002A                     i1l276:	
  7582                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  7583                           
  7584  002A  0021               	movlb	1	; select bank1
  7585  002B  1C91               	btfss	17,1	;volatile
  7586  002C  282E               	goto	u188_21
  7587  002D  282F               	goto	u188_20
  7588  002E                     u188_21:
  7589  002E  2838               	goto	i1l275
  7590  002F                     u188_20:
  7591  002F                     i1l3431:
  7592  002F  0020               	movlb	0	; select bank0
  7593  0030  1C91               	btfss	17,1	;volatile
  7594  0031  2833               	goto	u189_21
  7595  0032  2834               	goto	u189_20
  7596  0033                     u189_21:
  7597  0033  2838               	goto	i1l275
  7598  0034                     u189_20:
  7599  0034                     i1l3433:
  7600                           
  7601                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR2_ISR();
  7602  0034  318D  25AC  3180   	fcall	_TMR2_ISR
  7603                           
  7604                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  7605  0037  2838               	goto	i1l281
  7606  0038                     i1l275:
  7607  0038                     i1l281:	
  7608                           ;mcc_generated_files/interrupt_manager.c: 73:     }
  7609                           
  7610  0038  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7611  0039  0009               	retfie
  7612  003A                     __end_of_INTERRUPT_InterruptManager:
  7613                           
  7614                           	psect	text38
  7615  0DAC                     __ptext38:	
  7616 ;; *************** function _TMR2_ISR *****************
  7617 ;; Defined at:
  7618 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0, pclath, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7632 ;;      Params:         0       0       0       0       0       0
  7633 ;;      Locals:         0       0       0       0       0       0
  7634 ;;      Temps:          0       0       0       0       0       0
  7635 ;;      Totals:         0       0       0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used: 1
  7638 ;; Hardware stack levels required when called: 2
  7639 ;; This function calls:
  7640 ;;		_TMR2_CallBack
  7641 ;; This function is called by:
  7642 ;;		_INTERRUPT_InterruptManager
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _TMR2_ISR
  7648  0DAC                     _TMR2_ISR:
  7649  0DAC                     i1l3243:	
  7650                           ;incstack = 0
  7651                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  7652                           
  7653                           
  7654                           ;mcc_generated_files/tmr2.c: 121:     static volatile unsigned int CountCallBack = 0;;mc
      +                          c_generated_files/tmr2.c: 124:     PIR1bits.TMR2IF = 0;
  7655  0DAC  0020               	movlb	0	; select bank0
  7656  0DAD  1091               	bcf	17,1	;volatile
  7657  0DAE                     i1l3245:
  7658                           
  7659                           ;mcc_generated_files/tmr2.c: 127:     if (++CountCallBack >= 10)
  7660  0DAE  3001               	movlw	1
  7661  0DAF  07B6               	addwf	TMR2_ISR@CountCallBack,f	;volatile
  7662  0DB0  3000               	movlw	0
  7663  0DB1  3DB7               	addwfc	TMR2_ISR@CountCallBack+1,f	;volatile
  7664  0DB2  3000               	movlw	0
  7665  0DB3  0237               	subwf	TMR2_ISR@CountCallBack+1,w	;volatile
  7666  0DB4  300A               	movlw	10
  7667  0DB5  1903               	skipnz
  7668  0DB6  0236               	subwf	TMR2_ISR@CountCallBack,w	;volatile
  7669  0DB7  1C03               	skipc
  7670  0DB8  2DBA               	goto	u162_21
  7671  0DB9  2DBB               	goto	u162_20
  7672  0DBA                     u162_21:
  7673  0DBA  2DC1               	goto	i1l363
  7674  0DBB                     u162_20:
  7675  0DBB                     i1l3247:
  7676                           
  7677                           ;mcc_generated_files/tmr2.c: 128:     {;mcc_generated_files/tmr2.c: 130:         TMR2_Ca
      +                          llBack();
  7678  0DBB  318D  2554  318D   	fcall	_TMR2_CallBack
  7679  0DBE                     i1l3249:
  7680                           
  7681                           ;mcc_generated_files/tmr2.c: 133:         CountCallBack = 0;
  7682  0DBE  0020               	movlb	0	; select bank0
  7683  0DBF  01B6               	clrf	TMR2_ISR@CountCallBack	;volatile
  7684  0DC0  01B7               	clrf	TMR2_ISR@CountCallBack+1	;volatile
  7685  0DC1                     i1l363:
  7686  0DC1  0008               	return
  7687  0DC2                     __end_of_TMR2_ISR:
  7688                           
  7689                           	psect	text39
  7690  0D54                     __ptext39:	
  7691 ;; *************** function _TMR2_CallBack *****************
  7692 ;; Defined at:
  7693 ;;		line 137 in file "mcc_generated_files/tmr2.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;		None
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7707 ;;      Params:         0       0       0       0       0       0
  7708 ;;      Locals:         0       0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0
  7710 ;;      Totals:         0       0       0       0       0       0
  7711 ;;Total ram usage:        0 bytes
  7712 ;; Hardware stack levels used: 1
  7713 ;; Hardware stack levels required when called: 1
  7714 ;; This function calls:
  7715 ;;		Absolute function
  7716 ;;		_TMR2_DefaultInterruptHandler
  7717 ;;		_timer_up
  7718 ;; This function is called by:
  7719 ;;		_TMR2_ISR
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _TMR2_CallBack
  7725  0D54                     _TMR2_CallBack:
  7726  0D54                     i1l3103:	
  7727                           ;incstack = 0
  7728                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
  7729                           
  7730                           
  7731                           ;mcc_generated_files/tmr2.c: 141:     if(TMR2_InterruptHandler)
  7732  0D54  0020               	movlb	0	; select bank0
  7733  0D55  0838               	movf	_TMR2_InterruptHandler,w
  7734  0D56  0439               	iorwf	_TMR2_InterruptHandler+1,w
  7735  0D57  1903               	btfsc	3,2
  7736  0D58  2D5A               	goto	u135_21
  7737  0D59  2D5B               	goto	u135_20
  7738  0D5A                     u135_21:
  7739  0D5A  2D60               	goto	i1l367
  7740  0D5B                     u135_20:
  7741  0D5B                     i1l3105:
  7742                           
  7743                           ;mcc_generated_files/tmr2.c: 142:     {;mcc_generated_files/tmr2.c: 143:         TMR2_In
      +                          terruptHandler();
  7744  0D5B  0839               	movf	_TMR2_InterruptHandler+1,w
  7745  0D5C  008A               	movwf	10
  7746  0D5D  0838               	movf	_TMR2_InterruptHandler,w
  7747  0D5E  000A               	callw
  7748  0D5F  318D               	pagesel	$
  7749  0D60                     i1l367:
  7750  0D60  0008               	return
  7751  0D61                     __end_of_TMR2_CallBack:
  7752                           
  7753                           	psect	text40
  7754  07FF                     __ptext40:	
  7755 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  7756 ;; Defined at:
  7757 ;;		line 151 in file "mcc_generated_files/tmr2.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;		None
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;		None
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		None
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7771 ;;      Params:         0       0       0       0       0       0
  7772 ;;      Locals:         0       0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0
  7774 ;;      Totals:         0       0       0       0       0       0
  7775 ;;Total ram usage:        0 bytes
  7776 ;; Hardware stack levels used: 1
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_TMR2_Initialize
  7781 ;;		_TMR2_CallBack
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function _TMR2_DefaultInterruptHandler
  7787  07FF                     _TMR2_DefaultInterruptHandler:
  7788  07FF                     i1l373:	
  7789                           ;incstack = 0
  7790                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  7791                           
  7792  07FF  0008               	return
  7793  0800                     __end_of_TMR2_DefaultInterruptHandler:
  7794                           
  7795                           	psect	text41
  7796  067B                     __ptext41:	
  7797 ;; *************** function _timer_up *****************
  7798 ;; Defined at:
  7799 ;;		line 133 in file "main.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;		None
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;		None
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      void 
  7806 ;; Registers used:
  7807 ;;		wreg, status,2, status,0
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7813 ;;      Params:         0       0       0       0       0       0
  7814 ;;      Locals:         0       0       0       0       0       0
  7815 ;;      Temps:          1       0       0       0       0       0
  7816 ;;      Totals:         1       0       0       0       0       0
  7817 ;;Total ram usage:        1 bytes
  7818 ;; Hardware stack levels used: 1
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_main
  7823 ;;		_TMR2_CallBack
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function _timer_up
  7829  067B                     _timer_up:
  7830  067B                     i1l2961:	
  7831                           ;incstack = 0
  7832                           ; Regs used in _timer_up: [wreg+status,2+status,0]
  7833                           
  7834                           
  7835                           ;main.c: 134:     if(receive_timer_len > 0) receive_time++;
  7836  067B  0020               	movlb	0	; select bank0
  7837  067C  1BAB               	btfsc	_receive_timer_len+3,7
  7838  067D  2E8C               	goto	u126_21
  7839  067E  082B               	movf	_receive_timer_len+3,w
  7840  067F  1D03               	btfss	3,2
  7841  0680  2E8D               	goto	u126_20
  7842  0681  082A               	movf	_receive_timer_len+2,w
  7843  0682  1D03               	btfss	3,2
  7844  0683  2E8D               	goto	u126_20
  7845  0684  0829               	movf	_receive_timer_len+1,w
  7846  0685  1D03               	btfss	3,2
  7847  0686  2E8D               	goto	u126_20
  7848  0687  3001               	movlw	1
  7849  0688  0228               	subwf	_receive_timer_len,w
  7850  0689  1C03               	btfss	3,0
  7851  068A  2E8C               	goto	u126_21
  7852  068B  2E8D               	goto	u126_20
  7853  068C                     u126_21:
  7854  068C  2E96               	goto	i1l2965
  7855  068D                     u126_20:
  7856  068D                     i1l2963:
  7857  068D  3001               	movlw	1
  7858  068E  0020               	movlb	0	; select bank0
  7859  068F  07AC               	addwf	_receive_time,f
  7860  0690  3000               	movlw	0
  7861  0691  3DAD               	addwfc	_receive_time+1,f
  7862  0692  3000               	movlw	0
  7863  0693  3DAE               	addwfc	_receive_time+2,f
  7864  0694  3000               	movlw	0
  7865  0695  3DAF               	addwfc	_receive_time+3,f
  7866  0696                     i1l2965:
  7867                           
  7868                           ;main.c: 135:     if(cmd_timer_len > 0) cmd_time++;
  7869  0696  0020               	movlb	0	; select bank0
  7870  0697  1BA3               	btfsc	_cmd_timer_len+3,7
  7871  0698  2EA7               	goto	u127_21
  7872  0699  0823               	movf	_cmd_timer_len+3,w
  7873  069A  1D03               	btfss	3,2
  7874  069B  2EA8               	goto	u127_20
  7875  069C  0822               	movf	_cmd_timer_len+2,w
  7876  069D  1D03               	btfss	3,2
  7877  069E  2EA8               	goto	u127_20
  7878  069F  0821               	movf	_cmd_timer_len+1,w
  7879  06A0  1D03               	btfss	3,2
  7880  06A1  2EA8               	goto	u127_20
  7881  06A2  3001               	movlw	1
  7882  06A3  0220               	subwf	_cmd_timer_len,w
  7883  06A4  1C03               	btfss	3,0
  7884  06A5  2EA7               	goto	u127_21
  7885  06A6  2EA8               	goto	u127_20
  7886  06A7                     u127_21:
  7887  06A7  2EB1               	goto	i1l2969
  7888  06A8                     u127_20:
  7889  06A8                     i1l2967:
  7890  06A8  3001               	movlw	1
  7891  06A9  0020               	movlb	0	; select bank0
  7892  06AA  07A4               	addwf	_cmd_time,f
  7893  06AB  3000               	movlw	0
  7894  06AC  3DA5               	addwfc	_cmd_time+1,f
  7895  06AD  3000               	movlw	0
  7896  06AE  3DA6               	addwfc	_cmd_time+2,f
  7897  06AF  3000               	movlw	0
  7898  06B0  3DA7               	addwfc	_cmd_time+3,f
  7899  06B1                     i1l2969:
  7900                           
  7901                           ;main.c: 136:     if(button_status) button_time++;
  7902  06B1  0020               	movlb	0	; select bank0
  7903  06B2  084A               	movf	_button_status,w
  7904  06B3  1903               	btfsc	3,2
  7905  06B4  2EB6               	goto	u128_21
  7906  06B5  2EB7               	goto	u128_20
  7907  06B6                     u128_21:
  7908  06B6  2EC0               	goto	i1l2973
  7909  06B7                     u128_20:
  7910  06B7                     i1l2971:
  7911  06B7  3001               	movlw	1
  7912  06B8  0021               	movlb	1	; select bank1
  7913  06B9  07B8               	addwf	_button_time^(0+128),f
  7914  06BA  3000               	movlw	0
  7915  06BB  3DB9               	addwfc	(_button_time+1)^(0+128),f
  7916  06BC  3000               	movlw	0
  7917  06BD  3DBA               	addwfc	(_button_time+2)^(0+128),f
  7918  06BE  3000               	movlw	0
  7919  06BF  3DBB               	addwfc	(_button_time+3)^(0+128),f
  7920  06C0                     i1l2973:
  7921                           
  7922                           ;main.c: 137:     button = !PORTBbits.RB0;
  7923  06C0  1003               	clrc
  7924  06C1  0020               	movlb	0	; select bank0
  7925  06C2  1C0D               	btfss	13,0	;volatile
  7926  06C3  1403               	setc
  7927  06C4  3000               	movlw	0
  7928  06C5  1803               	btfsc	3,0
  7929  06C6  3001               	movlw	1
  7930  06C7  00C9               	movwf	_button
  7931  06C8                     i1l2975:
  7932                           
  7933                           ;main.c: 138:     if(button != button_status) {
  7934  06C8  0849               	movf	_button,w
  7935  06C9  064A               	xorwf	_button_status,w
  7936  06CA  1903               	skipnz
  7937  06CB  2ECD               	goto	u129_21
  7938  06CC  2ECE               	goto	u129_20
  7939  06CD                     u129_21:
  7940  06CD  2EFC               	goto	i1l473
  7941  06CE                     u129_20:
  7942  06CE                     i1l2977:
  7943                           
  7944                           ;main.c: 139:         if(button_status && button_time < 50) {
  7945  06CE  084A               	movf	_button_status,w
  7946  06CF  1903               	btfsc	3,2
  7947  06D0  2ED2               	goto	u130_21
  7948  06D1  2ED3               	goto	u130_20
  7949  06D2                     u130_21:
  7950  06D2  2EF3               	goto	i1l2985
  7951  06D3                     u130_20:
  7952  06D3                     i1l2979:
  7953  06D3  0021               	movlb	1	; select bank1
  7954  06D4  1BBB               	btfsc	(_button_time+3)^(0+128),7
  7955  06D5  2EE5               	goto	u131_20
  7956  06D6  083B               	movf	(_button_time+3)^(0+128),w
  7957  06D7  1D03               	btfss	3,2
  7958  06D8  2EE4               	goto	u131_21
  7959  06D9  083A               	movf	(_button_time+2)^(0+128),w
  7960  06DA  1D03               	btfss	3,2
  7961  06DB  2EE4               	goto	u131_21
  7962  06DC  0839               	movf	(_button_time+1)^(0+128),w
  7963  06DD  1D03               	btfss	3,2
  7964  06DE  2EE4               	goto	u131_21
  7965  06DF  3032               	movlw	50
  7966  06E0  0238               	subwf	_button_time^(0+128),w
  7967  06E1  1803               	btfsc	3,0
  7968  06E2  2EE4               	goto	u131_21
  7969  06E3  2EE5               	goto	u131_20
  7970  06E4                     u131_21:
  7971  06E4  2EF3               	goto	i1l2985
  7972  06E5                     u131_20:
  7973  06E5                     i1l2981:
  7974                           
  7975                           ;main.c: 140:             if(lock_status) {
  7976  06E5  0020               	movlb	0	; select bank0
  7977  06E6  084D               	movf	_lock_status,w
  7978  06E7  1903               	btfsc	3,2
  7979  06E8  2EEA               	goto	u132_21
  7980  06E9  2EEB               	goto	u132_20
  7981  06EA                     u132_21:
  7982  06EA  2EF0               	goto	i1l475
  7983  06EB                     u132_20:
  7984  06EB                     i1l2983:
  7985                           
  7986                           ;main.c: 141:                 working_state = WAITFORCLOSE;
  7987  06EB  3003               	movlw	3
  7988  06EC  00F0               	movwf	??_timer_up
  7989  06ED  0870               	movf	??_timer_up,w
  7990  06EE  00D3               	movwf	_working_state
  7991                           
  7992                           ;main.c: 142:             }else {
  7993  06EF  2EFC               	goto	i1l473
  7994  06F0                     i1l475:
  7995                           
  7996                           ;main.c: 143:                 working_state = OPENLOCK;
  7997  06F0  01D3               	clrf	_working_state
  7998  06F1  0AD3               	incf	_working_state,f
  7999  06F2  2EFC               	goto	i1l473
  8000  06F3                     i1l2985:
  8001                           
  8002                           ;main.c: 146:             button_time = 0;
  8003  06F3  3000               	movlw	0
  8004  06F4  0021               	movlb	1	; select bank1
  8005  06F5  00BB               	movwf	(_button_time+3)^(0+128)
  8006  06F6  3000               	movlw	0
  8007  06F7  00BA               	movwf	(_button_time+2)^(0+128)
  8008  06F8  3000               	movlw	0
  8009  06F9  00B9               	movwf	(_button_time+1)^(0+128)
  8010  06FA  3000               	movlw	0
  8011  06FB  00B8               	movwf	_button_time^(0+128)
  8012  06FC                     i1l473:	
  8013                           ;main.c: 148:     }
  8014                           
  8015                           
  8016                           ;main.c: 149:     button_status = button;
  8017  06FC  0020               	movlb	0	; select bank0
  8018  06FD  0849               	movf	_button,w
  8019  06FE  00F0               	movwf	??_timer_up
  8020  06FF  0870               	movf	??_timer_up,w
  8021  0700  00CA               	movwf	_button_status
  8022  0701                     i1l478:
  8023  0701  0008               	return
  8024  0702                     __end_of_timer_up:
  8025                           
  8026                           	psect	text42
  8027  0E67                     __ptext42:	
  8028 ;; *************** function _EUSART_Transmit_ISR *****************
  8029 ;; Defined at:
  8030 ;;		line 197 in file "mcc_generated_files/eusart.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8044 ;;      Params:         0       0       0       0       0       0
  8045 ;;      Locals:         0       0       0       0       0       0
  8046 ;;      Temps:          1       0       0       0       0       0
  8047 ;;      Totals:         1       0       0       0       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_EUSART_Initialize
  8054 ;;		_INTERRUPT_InterruptManager
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _EUSART_Transmit_ISR
  8060  0E67                     _EUSART_Transmit_ISR:
  8061  0E67                     i1l3211:	
  8062                           ;incstack = 0
  8063                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8064                           
  8065                           
  8066                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  8067  0E67  3008               	movlw	8
  8068  0E68  0020               	movlb	0	; select bank0
  8069  0E69  0257               	subwf	_eusartTxBufferRemaining,w	;volatile
  8070  0E6A  1803               	skipnc
  8071  0E6B  2E6D               	goto	u157_21
  8072  0E6C  2E6E               	goto	u157_20
  8073  0E6D                     u157_21:
  8074  0E6D  2E86               	goto	i1l190
  8075  0E6E                     u157_20:
  8076  0E6E                     i1l3213:
  8077                           
  8078                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  8079  0E6E  0858               	movf	_eusartTxTail,w
  8080  0E6F  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8081  0E70  0086               	movwf	6
  8082  0E71  0187               	clrf	7
  8083  0E72  0801               	movf	1,w
  8084  0E73  0023               	movlb	3	; select bank3
  8085  0E74  009A               	movwf	26	;volatile
  8086  0E75                     i1l3215:
  8087  0E75  3001               	movlw	1
  8088  0E76  00F0               	movwf	??_EUSART_Transmit_ISR
  8089  0E77  0870               	movf	??_EUSART_Transmit_ISR,w
  8090  0E78  0020               	movlb	0	; select bank0
  8091  0E79  07D8               	addwf	_eusartTxTail,f	;volatile
  8092  0E7A                     i1l3217:
  8093                           
  8094                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8095  0E7A  3008               	movlw	8
  8096  0E7B  0258               	subwf	_eusartTxTail,w	;volatile
  8097  0E7C  1C03               	skipc
  8098  0E7D  2E7F               	goto	u158_21
  8099  0E7E  2E80               	goto	u158_20
  8100  0E7F                     u158_21:
  8101  0E7F  2E81               	goto	i1l3221
  8102  0E80                     u158_20:
  8103  0E80                     i1l3219:
  8104                           
  8105                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  8106  0E80  01D8               	clrf	_eusartTxTail	;volatile
  8107  0E81                     i1l3221:
  8108                           
  8109                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  8110  0E81  3001               	movlw	1
  8111  0E82  00F0               	movwf	??_EUSART_Transmit_ISR
  8112  0E83  0870               	movf	??_EUSART_Transmit_ISR,w
  8113  0E84  07D7               	addwf	_eusartTxBufferRemaining,f	;volatile
  8114                           
  8115                           ;mcc_generated_files/eusart.c: 209:     }
  8116  0E85  2E88               	goto	i1l193
  8117  0E86                     i1l190:	
  8118                           ;mcc_generated_files/eusart.c: 210:     else
  8119                           
  8120                           
  8121                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  8122  0E86  0021               	movlb	1	; select bank1
  8123  0E87  1211               	bcf	17,4	;volatile
  8124  0E88                     i1l193:
  8125  0E88  0008               	return
  8126  0E89                     __end_of_EUSART_Transmit_ISR:
  8127                           
  8128                           	psect	text43
  8129  0F87                     __ptext43:	
  8130 ;; *************** function _EUSART_Receive_ISR *****************
  8131 ;; Defined at:
  8132 ;;		line 216 in file "mcc_generated_files/eusart.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;		None
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8146 ;;      Params:         0       0       0       0       0       0
  8147 ;;      Locals:         0       0       0       0       0       0
  8148 ;;      Temps:          0       0       0       0       0       0
  8149 ;;      Totals:         0       0       0       0       0       0
  8150 ;;Total ram usage:        0 bytes
  8151 ;; Hardware stack levels used: 1
  8152 ;; Hardware stack levels required when called: 2
  8153 ;; This function calls:
  8154 ;;		Absolute function
  8155 ;;		_EUSART_DefaultErrorHandler
  8156 ;;		_EUSART_DefaultFramingErrorHandler
  8157 ;;		_EUSART_DefaultOverrunErrorHandler
  8158 ;;		_EUSART_RxDataHandler
  8159 ;; This function is called by:
  8160 ;;		_EUSART_Initialize
  8161 ;;		_INTERRUPT_InterruptManager
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _EUSART_Receive_ISR
  8167  0F87                     _EUSART_Receive_ISR:
  8168  0F87                     i1l3223:	
  8169                           ;incstack = 0
  8170                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8171                           
  8172                           
  8173                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  8174  0F87  087C               	movf	_eusartRxHead,w	;volatile
  8175  0F88  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8176  0F89  0086               	movwf	6
  8177  0F8A  0187               	clrf	7
  8178  0F8B  0181               	clrf	1
  8179  0F8C                     i1l3225:
  8180                           
  8181                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  8182  0F8C  0023               	movlb	3	; select bank3
  8183  0F8D  1D1D               	btfss	29,2	;volatile
  8184  0F8E  2F90               	goto	u159_21
  8185  0F8F  2F91               	goto	u159_20
  8186  0F90                     u159_21:
  8187  0F90  2F9C               	goto	i1l3231
  8188  0F91                     u159_20:
  8189  0F91                     i1l3227:
  8190                           
  8191                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  8192  0F91  087C               	movf	_eusartRxHead,w	;volatile
  8193  0F92  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8194  0F93  0086               	movwf	6
  8195  0F94  0187               	clrf	7
  8196  0F95  1481               	bsf	1,1
  8197  0F96                     i1l3229:
  8198                           
  8199                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  8200  0F96  0020               	movlb	0	; select bank0
  8201  0F97  0841               	movf	_EUSART_FramingErrorHandler+1,w
  8202  0F98  008A               	movwf	10
  8203  0F99  0840               	movf	_EUSART_FramingErrorHandler,w
  8204  0F9A  000A               	callw
  8205  0F9B  318F               	pagesel	$
  8206  0F9C                     i1l3231:
  8207                           
  8208                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  8209  0F9C  0023               	movlb	3	; select bank3
  8210  0F9D  1C9D               	btfss	29,1	;volatile
  8211  0F9E  2FA0               	goto	u160_21
  8212  0F9F  2FA1               	goto	u160_20
  8213  0FA0                     u160_21:
  8214  0FA0  2FAC               	goto	i1l3237
  8215  0FA1                     u160_20:
  8216  0FA1                     i1l3233:
  8217                           
  8218                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  8219  0FA1  087C               	movf	_eusartRxHead,w	;volatile
  8220  0FA2  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8221  0FA3  0086               	movwf	6
  8222  0FA4  0187               	clrf	7
  8223  0FA5  1501               	bsf	1,2
  8224  0FA6                     i1l3235:
  8225                           
  8226                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  8227  0FA6  0020               	movlb	0	; select bank0
  8228  0FA7  083F               	movf	_EUSART_OverrunErrorHandler+1,w
  8229  0FA8  008A               	movwf	10
  8230  0FA9  083E               	movf	_EUSART_OverrunErrorHandler,w
  8231  0FAA  000A               	callw
  8232  0FAB  318F               	pagesel	$
  8233  0FAC                     i1l3237:
  8234                           
  8235                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  8236  0FAC  087C               	movf	_eusartRxHead,w	;volatile
  8237  0FAD  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  8238  0FAE  0086               	movwf	6
  8239  0FAF  0187               	clrf	7
  8240  0FB0  0801               	movf	1,w
  8241  0FB1  1903               	btfsc	3,2
  8242  0FB2  2FB4               	goto	u161_21
  8243  0FB3  2FB5               	goto	u161_20
  8244  0FB4                     u161_21:
  8245  0FB4  2FBC               	goto	i1l3241
  8246  0FB5                     u161_20:
  8247  0FB5                     i1l3239:
  8248                           
  8249                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  8250  0FB5  0020               	movlb	0	; select bank0
  8251  0FB6  083D               	movf	_EUSART_ErrorHandler+1,w
  8252  0FB7  008A               	movwf	10
  8253  0FB8  083C               	movf	_EUSART_ErrorHandler,w
  8254  0FB9  000A               	callw
  8255  0FBA  318F               	pagesel	$
  8256                           
  8257                           ;mcc_generated_files/eusart.c: 233:     } else {
  8258  0FBB  2FBF               	goto	i1l200
  8259  0FBC                     i1l3241:
  8260                           
  8261                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  8262  0FBC  318D  25D9  318F   	fcall	_EUSART_RxDataHandler
  8263  0FBF                     i1l200:
  8264  0FBF  0008               	return
  8265  0FC0                     __end_of_EUSART_Receive_ISR:
  8266                           
  8267                           	psect	text44
  8268  0CE8                     __ptext44:	
  8269 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  8270 ;; Defined at:
  8271 ;;		line 252 in file "mcc_generated_files/eusart.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;		None
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		None
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8285 ;;      Params:         0       0       0       0       0       0
  8286 ;;      Locals:         0       0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0
  8288 ;;      Totals:         0       0       0       0       0       0
  8289 ;;Total ram usage:        0 bytes
  8290 ;; Hardware stack levels used: 1
  8291 ;; This function calls:
  8292 ;;		Nothing
  8293 ;; This function is called by:
  8294 ;;		_EUSART_Initialize
  8295 ;;		_EUSART_Receive_ISR
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  8301  0CE8                     _EUSART_DefaultOverrunErrorHandler:
  8302  0CE8                     i1l3099:	
  8303                           ;incstack = 0
  8304                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  8305                           
  8306                           
  8307                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  8308  0CE8  0023               	movlb	3	; select bank3
  8309  0CE9  121D               	bcf	29,4	;volatile
  8310                           
  8311                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  8312  0CEA  161D               	bsf	29,4	;volatile
  8313  0CEB                     i1l210:
  8314  0CEB  0008               	return
  8315  0CEC                     __end_of_EUSART_DefaultOverrunErrorHandler:
  8316                           
  8317                           	psect	text45
  8318  0CDD                     __ptext45:	
  8319 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  8320 ;; Defined at:
  8321 ;;		line 250 in file "mcc_generated_files/eusart.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;		None
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      void 
  8328 ;; Registers used:
  8329 ;;		None
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8335 ;;      Params:         0       0       0       0       0       0
  8336 ;;      Locals:         0       0       0       0       0       0
  8337 ;;      Temps:          0       0       0       0       0       0
  8338 ;;      Totals:         0       0       0       0       0       0
  8339 ;;Total ram usage:        0 bytes
  8340 ;; Hardware stack levels used: 1
  8341 ;; This function calls:
  8342 ;;		Nothing
  8343 ;; This function is called by:
  8344 ;;		_EUSART_Initialize
  8345 ;;		_EUSART_Receive_ISR
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _EUSART_DefaultFramingErrorHandler
  8351  0CDD                     _EUSART_DefaultFramingErrorHandler:
  8352  0CDD                     i1l207:	
  8353                           ;incstack = 0
  8354                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  8355                           
  8356  0CDD  0008               	return
  8357  0CDE                     __end_of_EUSART_DefaultFramingErrorHandler:
  8358                           
  8359                           	psect	text46
  8360  0CE4                     __ptext46:	
  8361 ;; *************** function _EUSART_DefaultErrorHandler *****************
  8362 ;; Defined at:
  8363 ;;		line 260 in file "mcc_generated_files/eusart.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;		None
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;		None
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      void 
  8370 ;; Registers used:
  8371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8377 ;;      Params:         0       0       0       0       0       0
  8378 ;;      Locals:         0       0       0       0       0       0
  8379 ;;      Temps:          0       0       0       0       0       0
  8380 ;;      Totals:         0       0       0       0       0       0
  8381 ;;Total ram usage:        0 bytes
  8382 ;; Hardware stack levels used: 1
  8383 ;; Hardware stack levels required when called: 1
  8384 ;; This function calls:
  8385 ;;		_EUSART_RxDataHandler
  8386 ;; This function is called by:
  8387 ;;		_EUSART_Initialize
  8388 ;;		_EUSART_Receive_ISR
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _EUSART_DefaultErrorHandler
  8394  0CE4                     _EUSART_DefaultErrorHandler:
  8395  0CE4                     i1l3101:	
  8396                           ;incstack = 0
  8397                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8398                           
  8399                           
  8400                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  8401  0CE4  318D  25D9  318C   	fcall	_EUSART_RxDataHandler
  8402  0CE7                     i1l213:
  8403  0CE7  0008               	return
  8404  0CE8                     __end_of_EUSART_DefaultErrorHandler:
  8405                           
  8406                           	psect	text47
  8407  0DD9                     __ptext47:	
  8408 ;; *************** function _EUSART_RxDataHandler *****************
  8409 ;; Defined at:
  8410 ;;		line 240 in file "mcc_generated_files/eusart.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;		None
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;		None
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      void 
  8417 ;; Registers used:
  8418 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8424 ;;      Params:         0       0       0       0       0       0
  8425 ;;      Locals:         0       0       0       0       0       0
  8426 ;;      Temps:          1       0       0       0       0       0
  8427 ;;      Totals:         1       0       0       0       0       0
  8428 ;;Total ram usage:        1 bytes
  8429 ;; Hardware stack levels used: 1
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_EUSART_Receive_ISR
  8434 ;;		_EUSART_DefaultErrorHandler
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _EUSART_RxDataHandler
  8440  0DD9                     _EUSART_RxDataHandler:
  8441  0DD9                     i1l2949:	
  8442                           ;incstack = 0
  8443                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  8444                           
  8445                           
  8446                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  8447  0DD9  0023               	movlb	3	; select bank3
  8448  0DDA  0819               	movf	25,w	;volatile
  8449  0DDB  00F0               	movwf	??_EUSART_RxDataHandler
  8450  0DDC  087C               	movf	_eusartRxHead,w
  8451  0DDD  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8452  0DDE  0086               	movwf	6
  8453  0DDF  0187               	clrf	7
  8454  0DE0  0870               	movf	??_EUSART_RxDataHandler,w
  8455  0DE1  0081               	movwf	1
  8456  0DE2                     i1l2951:
  8457  0DE2  3001               	movlw	1
  8458  0DE3  00F0               	movwf	??_EUSART_RxDataHandler
  8459  0DE4  0870               	movf	??_EUSART_RxDataHandler,w
  8460  0DE5  07FC               	addwf	_eusartRxHead,f	;volatile
  8461  0DE6                     i1l2953:
  8462                           
  8463                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8464  0DE6  3008               	movlw	8
  8465  0DE7  027C               	subwf	_eusartRxHead,w	;volatile
  8466  0DE8  1C03               	skipc
  8467  0DE9  2DEB               	goto	u125_21
  8468  0DEA  2DEC               	goto	u125_20
  8469  0DEB                     u125_21:
  8470  0DEB  2DED               	goto	i1l2957
  8471  0DEC                     u125_20:
  8472  0DEC                     i1l2955:
  8473                           
  8474                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  8475  0DEC  01FC               	clrf	_eusartRxHead	;volatile
  8476  0DED                     i1l2957:
  8477                           
  8478                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  8479  0DED  3001               	movlw	1
  8480  0DEE  00F0               	movwf	??_EUSART_RxDataHandler
  8481  0DEF  0870               	movf	??_EUSART_RxDataHandler,w
  8482  0DF0  0020               	movlb	0	; select bank0
  8483  0DF1  07D5               	addwf	_eusartRxCount,f	;volatile
  8484  0DF2                     i1l204:
  8485  0DF2  0008               	return
  8486  0DF3                     __end_of_EUSART_RxDataHandler:
  8487  007E                     btemp	set	126	;btemp
  8488  007E                     int$flags	set	126
  8489  007E                     wtemp0	set	126
  8490  20EF                     
  8491                           	psect	idloc
  8492                           
  8493                           ;Config register IDLOC0 @ 0x8000
  8494                           ;	unspecified, using default values
  8495  8000                     	org	32768
  8496  8000  3FFF               	dw	16383
  8497                           
  8498                           ;Config register IDLOC1 @ 0x8001
  8499                           ;	unspecified, using default values
  8500  8001                     	org	32769
  8501  8001  3FFF               	dw	16383
  8502                           
  8503                           ;Config register IDLOC2 @ 0x8002
  8504                           ;	unspecified, using default values
  8505  8002                     	org	32770
  8506  8002  3FFF               	dw	16383
  8507                           
  8508                           ;Config register IDLOC3 @ 0x8003
  8509                           ;	unspecified, using default values
  8510  8003                     	org	32771
  8511  8003  3FFF               	dw	16383
  8512                           
  8513                           	psect	config
  8514                           
  8515                           ;Config register CONFIG1 @ 0x8007
  8516                           ;	Oscillator Selection
  8517                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  8518                           ;	Watchdog Timer Enable
  8519                           ;	WDTE = OFF, WDT disabled
  8520                           ;	Power-up Timer Enable
  8521                           ;	PWRTE = OFF, PWRT disabled
  8522                           ;	MCLR Pin Function Select
  8523                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  8524                           ;	Flash Program Memory Code Protection
  8525                           ;	CP = OFF, Program memory code protection is disabled
  8526                           ;	Data Memory Code Protection
  8527                           ;	CPD = OFF, Data memory code protection is disabled
  8528                           ;	Brown-out Reset Enable
  8529                           ;	BOREN = ON, Brown-out Reset enabled
  8530                           ;	Clock Out Enable
  8531                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  8532                           ;	Internal/External Switchover
  8533                           ;	IESO = ON, Internal/External Switchover mode is enabled
  8534                           ;	Fail-Safe Clock Monitor Enable
  8535                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8536  8007                     	org	32775
  8537  8007  3FE4               	dw	16356
  8538                           
  8539                           ;Config register CONFIG2 @ 0x8008
  8540                           ;	Flash Memory Self-Write Protection
  8541                           ;	WRT = OFF, Write protection off
  8542                           ;	PLL Enable
  8543                           ;	PLLEN = ON, 4x PLL enabled
  8544                           ;	Stack Overflow/Underflow Reset Enable
  8545                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  8546                           ;	Brown-out Reset Voltage Selection
  8547                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  8548                           ;	Low-Voltage Programming Enable
  8549                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  8550  8008                     	org	32776
  8551  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         93
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     20      80
    BANK1            80      0      34
    BANK2            79      0       0
    BANK3             0      0       0
    BANK4             0      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    save_pw@pw	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    compare_pw@pw	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    send_msg_stopping@msg	PTR unsigned char  size(2) Largest target is 4096
		 -> send_stat@status_protocol(BANK0[2]), RAM(DATA[4096]), send_dat@var(COMMON[1]), send_dat@len(COMMON[1]), 
		 -> send_dat@control_byte(COMMON[1]), send_req@request_protocol(BANK0[3]), send_cmd@command_protocol(COMMON[3]), 

    del_array@array	PTR unsigned char  size(2) Largest target is 129
		 -> data_storage(BIGRAM[129]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_up(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_up(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _send_stat->_send_msg_stopping
    _send_req->_send_msg_stopping
    _send_msg_stopping->_EUSART_Write
    _save_pw->_DATAEE_WriteByte
    _save_hall_codes->_DATAEE_WriteByte
    _read_hall_codes->_DATAEE_ReadByte
    _door_status_changed->___awdiv
    ___awdiv->___wmul
    _compare_pw->_DATAEE_ReadByte
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _TMR2_CallBack->_timer_up
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_door_status_changed
    _door_status_changed->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   11721
                                             11 BANK0      9     9      0
            _ADC_GetConversionResult
                     _ADC_Initialize
               _ADC_IsConversionDone
                _ADC_StartConversion
                  _EUSART_Initialize
                        _EUSART_Read
                 _EUSART_is_rx_ready
                  _SYSTEM_Initialize
                    _TMR2_Initialize
           _TMR2_SetInterruptHandler
                         _compare_pw
                _door_status_changed
                    _read_hall_codes
                    _save_hall_codes
                            _save_pw
                  _seek_confirmation
                           _send_req
                          _send_stat
                           _stop_cmd
                 _wait_for_requested
 ---------------------------------------------------------------------------------
 (1) _wait_for_requested                                   2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _stop_cmd                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_stat                                            4     4      0    1740
                                              9 COMMON     1     1      0
                                              0 BANK0      3     3      0
                  _send_msg_stopping
 ---------------------------------------------------------------------------------
 (1) _send_req                                             5     5      0    2121
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                          _del_array
                  _send_msg_stopping
 ---------------------------------------------------------------------------------
 (2) _send_msg_stopping                                    6     3      3    1632
                                              3 COMMON     6     3      3
                       _EUSART_Write
                  _EUSART_is_tx_done
 ---------------------------------------------------------------------------------
 (3) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _del_array                                            7     3      4     242
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _seek_confirmation                                   10     2      8    1304
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _save_pw                                              6     3      3     768
                                              4 COMMON     6     3      3
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _save_hall_codes                                      3     2      1     558
                                              4 COMMON     3     2      1
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     372
                                              1 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _read_hall_codes                                      1     1      0      22
                                              2 COMMON     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (1) _door_status_changed                                  7     5      2    2356
                                              4 BANK0      7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1165
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _compare_pw                                           9     6      3     706
                                              2 COMMON     9     6      3
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0       0
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR2_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                           _timer_up *
 ---------------------------------------------------------------------------------
 (7) _timer_up                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_Initialize
   _ADC_IsConversionDone
   _ADC_StartConversion
   _EUSART_Initialize
     _EUSART_SetErrorHandler
     _EUSART_SetFramingErrorHandler
     _EUSART_SetOverrunErrorHandler
     _EUSART_SetRxInterruptHandler
     _EUSART_SetTxInterruptHandler
   _EUSART_Read
   _EUSART_is_rx_ready
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _TMR2_Initialize
   _TMR2_SetInterruptHandler
   _compare_pw
     _DATAEE_ReadByte
   _door_status_changed
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _read_hall_codes
     _DATAEE_ReadByte
   _save_hall_codes
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _save_pw
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _seek_confirmation
   _send_req
     _del_array
     _send_msg_stopping
       _EUSART_Write
       _EUSART_is_tx_done
   _send_stat
     _send_msg_stopping
   _stop_cmd
   _wait_for_requested

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _timer_up *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     14      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      22       8       42.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               4F      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      7F      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Apr 05 13:40:29 2022

                ?_EUSART_SetRxInterruptHandler 0071               __end_of_TMR2_SetInterruptHandler 0D18  
                                           l31 0D3B                                             l25 0D96  
                                           l34 0CEF                                             l28 0D36  
                                           l80 0E41                                             l81 0E47  
                                           l84 0D47                                             l78 0E3D  
                                 ___awdiv@sign 005B                            ___wmul@multiplicand 0073  
                                          l310 0CE0                                            l222 0CF9  
                                          l304 0CE3                                            l216 0CFF  
                                          l225 0D11                                            l307 0D1E  
                                          l219 0D05                                            l228 0D0B  
                                          l165 0D2F                                            l253 0DD8  
                                          l342 0D83                                            l159 0FFF  
                                          l183 0F05                                            l184 0F0E  
                                          l168 0CF3                                            l600 04A4  
                                          l178 0EFD                                            l370 0D17  
                                          l187 0F27                                            l533 02D6  
                                          l550 0321                                            l536 02BE  
                                          l609 0523                                            l298 0D26  
                                          l707 067A                                            l627 0E29  
                                          l636 0ED3                                            l580 040A  
                                          l548 0522                                            l662 07D8  
                                          l646 0F86                                            l496 013F  
                                          l657 07FE                                            l666 07E6  
                                          l682 0EAC                                            l674 07A6  
                                          l677 0D71                                            l863 0E52  
                                          l695 0E0C                                            l688 0F56  
                                          l865 0E66                                            l698 0DAB  
                                          _PR2 001B                         ??_EUSART_RxDataHandler 0070  
                                          _cmd 0050                 ?_EUSART_SetFramingErrorHandler 0071  
                              _TMR2_Initialize 0D72                                            wreg 0009  
                                 ?_EUSART_Read 0070                                           l1016 0761  
                                         l3001 0DD3                                           l3011 0D34  
                                         l3003 0DD5                                           l3005 0DD7  
                                         l3021 0D77                                           l3013 0CEC  
                                         l3031 0D23                                           l3007 0D30  
                                         l3023 0D79                                           l3015 0D72  
                                         l3111 0E17                                           l3201 0EF5  
                                         l3041 0FD5                                           l3033 0FC0  
                                         l3009 0D33                                           l3025 0D80  
                                         l3017 0D75                                           l3113 0E1B  
                                         l3203 0EF7                                           l3027 0D1F  
                                         l3051 0FE4                                           l3043 0FD7  
                                         l3035 0FC2                                           l3019 0D76  
                                         l3107 0E0D                                           l3205 0EFA  
                                         l3029 0D22                                           l3061 0FF6  
                                         l3053 0FEB                                           l3045 0FD9  
                                         l3037 0FC9                                           l3109 0E10  
                                         l3207 0EFC                                           l3063 0FFD  
                                         l3055 0FF2                                           l3047 0FDB  
                                         l3039 0FD2                                           l3071 0E30  
                                         l3303 0F33                                           l3057 0FF4  
                                         l3049 0FDD                                           l3081 0E3C  
                                         l3073 0E31                                           l3065 0E2B  
                                         l3321 0F56                                           l3251 0CE1  
                                         l3059 0FF5                                           l3091 0D42  
                                         l3083 0E42                                           l3075 0E32  
                                         l3067 0E2B                                           l3331 0DF4  
                                         l3253 0D18                                           l3093 0D43  
                                         l3085 0D3D                                           l4301 0708  
                                         l3261 0D61                                           l3077 0E33  
                                         l3069 0E2E                                           l3309 0F38  
                                         l3317 0F3D                                           l3333 0DFC  
                                         l3191 0ED4                                           l3183 0D84  
                                         l3095 0D44                                           l3087 0D40  
                                         l3351 07B8                                           l3343 07A7  
                                         l4311 071C                                           l4303 070D  
                                         l3079 0E37                                           l3319 0F51  
                                         l3263 0D97                                           l3335 0E09  
                                         l3257 0CDE                                           l3193 0EDA  
                                         l3185 0D27                                           l3089 0D41  
                                         l3361 07D4                                           l3353 07BB  
                                         l3345 07A9                                           l4321 0730  
                                         l4313 071E                                           l4305 070F  
                                         l3265 0DA8                                           l4401 0078  
                                         l3195 0EEA                                           l3355 07C3  
                                         l3363 07E5                                           l3347 07B0  
                                         l4331 074D                                           l4323 0734  
                                         l4315 0724                                           l4307 0713  
                                         l3371 0773                                           l4251 0CF0  
                                         l3267 0DAA                                           l3339 0E0B  
                                         l5211 025A                                           l4411 00AE  
                                         l4403 007B                                           l3197 0EEE  
                                         l3189 0ED4                                           l3357 07CD  
                                         l3349 07B6                                           l4325 0743  
                                         l4317 0727                                           l4333 0753  
                                         l4309 0718                                           l3381 0E8A  
                                         l3373 0776                                           l3293 0F28  
                                         l4261 0F0F                                           l4341 07E9  
                                         l5221 0421                                           l5213 0287  
                                         l4501 01F1                                           l4421 00EE  
                                         l4413 00BE                                           l4405 0082  
                                         l3199 0EF4                                           l4335 0758  
                                         l4327 0747                                           l4319 072C  
                                         l3383 0E93                                           l3375 0786  
                                         l3367 0762                                           l5231 0F46  
                                         l4263 0F18                                           l4271 0F25  
                                         l4255 0EFF                                           l4351 0F64  
                                         l4343 07EB                                           l5223 04E5  
                                         l5215 02D1                                           l4511 0212  
                                         l4503 01F7                                           l4431 0116  
                                         l4423 00F1                                           l4415 00C1  
                                         l4407 0085                                           l2921 0CFA  
                                         l4337 075D                                           l4329 0748  
                                         l3385 0E9B                                           l3377 0795  
                                         l3369 076B                                           l3297 0F2E  
                                         l4265 0F1C                                           l4257 0EFF  
                                         l4281 0EC6                                           l4273 0EAD  
                                         l4361 0F79                                           l4353 0F6B  
                                         l4345 07EF                                           l5225 0507  
                                         l5217 02F9                                           l4521 0232  
                                         l4513 0217                                           l4505 01FC  
                                         l4441 0130                                           l4433 011C  
                                         l4425 00F9                                           l4417 00D3  
                                         l4409 0097                                           l2923 0D00  
                                         l4291 0E5C                                           l4283 0E48  
                                         l4371 05D4                                           l3387 0EA4  
                                         l3379 0799                                           l4267 0F22  
                                         l4259 0F0A                                           l4275 0EB0  
                                         l4363 0F84                                           l4355 0F6F  
                                         l4347 07F3                                           l5227 051A  
                                         l5219 03BC                                           l4611 037A  
                                         l4603 036D                                           l4523 023D  
                                         l4515 021D                                           l4507 0200  
                                         l4451 015E                                           l4443 0135  
                                         l4435 011F                                           l4427 010A  
                                         l4419 00EA                                           l2925 0CF4  
                                         l2917 0D06                                           l4293 0E62  
                                         l4285 0E4A                                           l4381 0613  
                                         l4373 05DB                                           l4365 059B  
                                         l4269 0F23                                           l4277 0EB8  
                                         l4357 0F73                                           l4349 0F59  
                                         l5229 0589                                           l4701 0490  
                                         l4613 0393                                           l4605 0371  
                                         l4541 026E                                           l4525 0242  
                                         l4517 0222                                           l4509 0207  
                                         l4461 0177                                           l4453 0164  
                                         l4445 013B                                           l4437 0125  
                                         l4429 0112                                           l2919 0D0C  
                                         l4287 0E4E                                           l4383 0641  
                                         l4391 0679                                           l4375 060B  
                                         l4367 05A0                                           l4279 0EC2  
                                         l4359 0F74                                           l4703 0498  
                                         l4631 03DC                                           l4615 039C  
                                         l4607 0375                                           l4551 02A6  
                                         l4543 0276                                           l4527 0248  
                                         l4519 0226                                           l4535 0252  
                                         l4471 01A8                                           l4463 017B  
                                         l4455 0168                                           l4447 0144  
                                         l4439 012A                                           l4297 0702  
                                         l4289 0E57                                           l4385 0648  
                                         l4369 05A6                                           l4721 04C1  
                                         l4705 049F                                           l4641 03E6  
                                         l4625 03B7                                           l4561 02B9  
                                         l4529 024D                                           l4537 0268  
                                         l4481 01BD                                           l4473 01AC  
                                         l4465 0185                                           l4457 016D  
                                         l4449 0151                                           l4553 02AB  
                                         l4299 0704                                           l4379 060D  
                                         l4731 04D7                                           l4723 04C5  
                                         l4643 03EF                                           l4635 03E1  
                                         l4627 03D3                                           l4619 03B2  
                                         l4571 02DB                                           l4563 02C1  
                                         l4539 026D                                           l4491 01DB  
                                         l4483 01C5                                           l4475 01B7  
                                         l4467 018A                                           l4459 0173  
                                         l4547 027F                                           l4395 006A  
                                         l4733 04D9                                           l4725 04CE  
                                         l4717 04B2                                           l4709 04A8  
                                         l4661 042F                                           l4653 0417  
                                         l4645 0405                                           l4629 03D8  
                                         l4573 02E0                                           l4581 02F0  
                                         l4557 02B1                                           l4493 01E1  
                                         l4485 01CB                                           l4477 01B8  
                                         l4469 0195                                           l4549 02A1  
                                         l4397 0076                                           l2991 0DC8  
                                         l2959 0D12                                           l4735 04DB  
                                         l4727 04D1                                           l4719 04BA  
                                         l4671 0453                                           l4647 040D  
                                         l4591 032A                                           l4583 02FE  
                                         l4575 02E5                                           l4559 02B6  
                                         l4567 02C8                                           l4495 01E6  
                                         l4487 01D4                                           l4399 0077  
                                         l2993 0DCA                                           l4761 0530  
                                         l4745 04E0                                           l4729 04D4  
                                         l4681 0463                                           l4673 0458  
                                         l4649 0412                                           l4593 0330  
                                         l4585 0307                                           l4577 02E9  
                                         l4753 0512                                           l4497 01E9  
                                         l2995 0DCD                                           l2987 0DC2  
                                         l4763 0534                                           l4755 0525  
                                         l4691 0475                                           l4675 045A  
                                         l4667 0434                                           l4659 041C  
                                         l4595 0348                                           l4587 0311  
                                         l4499 01ED                                           l2997 0DCF  
                                         l2989 0DC5                                           l4781 057A  
                                         l4773 0558                                           l4765 053C  
                                         l4757 0529                                           l4693 0479  
                                         l4677 045C                                           l4685 0468  
                                         l4669 043D                                           l4597 0351  
                                         l4589 0326                                           l4749 04FF  
                                         l2999 0DD2                                           l4783 057C  
                                         l4775 0560                                           l4767 0542  
                                         l4759 052C                                           l4695 0482  
                                         l4679 0460                                           l4599 0367  
                                         l4791 0580                                           l4785 057D  
                                         l4777 0566                                           l4769 0552  
                                         l4697 0485                                           l4689 046D  
                                         l4779 0576                                           l4699 048A  
                                         u3000 0458                                           u3001 0457  
                                         u1330 0D3B                                           u3010 0479  
                                         u1331 0D3A                                           u3011 0478  
                                         u1340 0E41                                           u3100 0576  
                                         u3020 0482                                           u1341 0E40  
                                         u3101 0575                                           u3021 0481  
                                         _LATA 010C                                           u3030 0498  
                                         _LATB 010D                                           u3031 0497  
                                         u1360 0E29                                           u2400 0EB8  
                                         u3040 04A8                                           u1361 0E28  
                                         u2401 0EB7                                           u3041 04A7  
                                         u1530 0D2E                                           u2410 0ED3  
                                         u3050 04B1                                           u1531 0D2C  
                                         u2411 0ED2                                           u3051 04B0  
                                         u1540 0D2F                                           u2500 0734  
                                         u2420 0E4E                                           u1700 0786  
                                         u3060 04BA                                           u2501 0733  
                                         u2421 0E4D                                           u1701 0785  
                                         u1365 0E25                                           u3061 04B9  
                                         u1550 0EDA                                           u1710 07A6  
                                         u1630 0F2D                                           u3070 053C  
                                         u1551 0ED9                                           u1711 07A5  
                                         u1631 0F2C                                           u2415 0ECF  
                                         u3071 053B                                           u1560 0EF4  
                                         u2520 0743                                           u2600 060B  
                                         u1720 0E93                                           u1640 0DFC  
                                         u3080 0552                                           u1561 0EF3  
                                         u2521 0742                                           u2601 060A  
                                         u1721 0E92                                           u1641 0DFB  
                                         u3081 0551                                           u2450 0E62  
                                         u2610 0613                                           u1730 0EA4  
                                         u2370 0F05                                           u1650 0E09  
                                         u3090 0560                                           u2515 0735  
                                         u2451 0E61                                           u2435 0E53  
                                         u2611 0612                                           u1731 0EA3  
                                         u1715 07A2                                           u2371 0F04  
                                         u1651 0E08                                           u3091 055F  
                                         u1660 07B6                                           u2540 0753  
                                         u2460 0708                                           u2620 0641  
                                         u2380 0F0A                                           u2700 011C  
                                         u1661 07B5                                           u2541 0752  
                                         u2525 073F                                           u2461 0707  
                                         u2445 0E58                                           u2621 0640  
                                         u2605 0607                                           u2381 0F09  
                                         u2701 011B                                           u1670 07D3  
                                         u2550 0758                                           u2470 0713  
                                         u2630 0648                                           u2390 0F22  
                                         u2710 0125                                           u1671 07D2  
                                         u2551 0757                                           u2535 0749  
                                         u2471 0712                                           u2631 0647  
                                         u2391 0F21                                           u2711 0124  
                                         u1680 07E5                                           u2480 0724  
                                         u2640 0678                                           u2560 05A0  
                                         u2800 0212                                           u2720 0130  
                                         u1681 07E4                                           u2481 0723  
                                         u2641 0677                                           u2625 063D  
                                         u2561 059F                                           u2801 0211  
                                         u2721 012F                                           u2570 05A6  
                                         u1690 076B                                           u2810 021D  
                                         u2730 013B                                           u2650 0097  
                                         u2571 05A5                                           u1691 076A  
                                         u2811 021C                                           u2731 013A  
                                         u2651 0096                                           u2580 05D4  
                                         u2900 0351                                           u2820 023D  
                                         u2740 0185                                           u2660 00AE  
                                         u1685 07E1                                           u2645 0674  
                                         u2581 05D3                                           u2901 0350  
                                         u2821 023C                                           u2741 0184  
                                         u2661 00AD                                           u2590 05DB  
                                         u2910 0367                                           u2830 0248  
                                         u2750 0195                                           u2670 00D3  
                                         u2495 0728                                           u2591 05DA  
                                         u2911 0366                                           u2831 0247  
                                         u2751 0194                                           u2671 00D2  
                                         u2663 00AA                                           u2920 036C  
                                         u2840 02A6                                           u2760 01B7  
                                         u2680 00EA                                           u2585 05D0  
                                         u2921 036B                                           u2841 02A5  
                                         u2761 01B6                                           u2681 00E9  
                                         u2930 039C                                           u2850 02B0  
                                         u2770 01DA                                           u2690 00F9  
                                         u2931 039B                                           u2851 02AF  
                                         u2771 01D9                                           u2691 00F8  
                                         u2683 00E6                                           u2940 03D8  
                                         u2860 02B6                                           u2780 01E1  
                                         u2941 03D7                                           u2861 02B5  
                                         u2781 01E0                                           u2950 03EF  
                                         u2870 02DA                                           u2790 01F7  
                                         u2951 03EE                                           u2871 02D9  
                                         u2791 01F6                                           u2960 0405  
                                         u2880 02E0                                           u2961 0404  
                                         u2881 02DF                                           u2970 040A  
                                         u2890 0311                                           u2971 0409  
                                         u2891 0310                                           u2980 043D  
                                         u2981 043C                                           u2990 0453  
                                         u2991 0452                                           u2895 030D  
                                         _PLLR 04D6                                           _TMR2 001A  
                                  main@res_914 006C                                           _WPUA 020C  
                                         _WPUB 020D                                           _main 006A  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                           start 003A  
                                  compare_pw@x 0079                              ??_read_hall_codes 0072  
                    __size_of_DATAEE_WriteByte 001E                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 000C                  __end_of_OSCILLATOR_Initialize 0D3C  
                                        ?_main 0070                                __end_of___awdiv 0762  
                              ___awdiv@divisor 0077                                          _T2CON 001C  
                                        i1l200 0FBF                                          i1l210 0CEB  
                                        i1l204 0DF2                                          i1l213 0CE7  
                                        i1l207 0CDD                                          i1l190 0E86  
                                        i1l193 0E88                                          i1l281 0038  
                                        i1l274 001A                                          i1l363 0DC1  
                                        i1l275 0038                                          i1l276 002A  
                                        i1l373 07FF                                          i1l367 0D60  
                                        i1l473 06FC                                          i1l475 06F0  
                                        i1l478 0701                                ___awdiv@counter 005A  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TXREG 019A                                          _TXSTA 019E  
             __size_of_ADC_GetConversionResult 0003                             _wait_for_requested 0DF3  
                            _receive_timer_len 0028                               __end_of_TMR2_ISR 0DC2  
                     __size_of_save_hall_codes 0024                                _DATAEE_ReadByte 0D3C  
                               _WDT_Initialize 0CEC                        main@old_cmd_exe_counter 0032  
                              __end_of_save_pw 07A7                            ?_wait_for_requested 0070  
                                        pclath 000A                                          status 0003  
                                 compare_pw@pw 0072                                          wtemp0 007E  
                               send_stat@F3032 0030                                __initialization 003C  
                                 __end_of_main 0599                                 ??_EUSART_Write 0071  
                         ??_wait_for_requested 0071                        __end_of_TMR2_Initialize 0D84  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0073  
                     _TMR2_SetInterruptHandler 0D12                                         ??_main 0065  
                       __end_of_WDT_Initialize 0CF0                  __size_of_ADC_IsConversionDone 0007  
    __end_of_EUSART_DefaultFramingErrorHandler 0CDE     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0CDD                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 003E  
                                       _ADRESH 009C                                         _EEADRH 0192  
                                       _ADRESL 009B                                         _EEADRL 0191  
                                       _EEDATH 0194                                         _EEDATL 0193  
                                       _EECON2 0196                               ___awdiv@dividend 0079  
                                       _ANSELA 018C                                         _ANSELB 018D  
                   __end_of_EUSART_is_rx_ready 0D30                                         _BORCON 0116  
                                       i1l3101 0CE4                                         i1l3103 0D54  
                                       i1l3105 0D5B                                         i1l3211 0E67  
                                       i1l3221 0E81                                         i1l3213 0E6E  
                                       i1l3231 0F9C                                         i1l3223 0F87  
                                       i1l3215 0E75                                         i1l3241 0FBC  
                                       i1l3233 0FA1                                         i1l3225 0F8C  
                                       i1l3217 0E7A                                         i1l3235 0FA6  
                                       i1l3227 0F91                                         i1l3219 0E80  
                                       i1l3243 0DAC                                         i1l3237 0FAC  
                                       i1l3229 0F96                                         i1l3245 0DAE  
                                       i1l3421 000A                                         i1l3239 0FB5  
                                       i1l3247 0DBB                                         i1l3431 002F  
                                       i1l3423 000F                                         u130_20 06D3  
                                       u130_21 06D2                                         i1l3249 0DBE  
                                       i1l3433 0034                                         i1l3425 0014  
                                       i1l3099 0CE8                                         i1l3427 001F  
                                       i1l3419 0006                                         i1l3429 0024  
                                       u131_20 06E5                                         u131_21 06E4  
                                       i1l2951 0DE2                                         u132_20 06EB  
                                       i1l2953 0DE6                                         u132_21 06EA  
                                       i1l2961 067B                                         i1l2955 0DEC  
                                       i1l2971 06B7                                         i1l2963 068D  
                                       i1l2957 0DED                                         i1l2949 0DD9  
                                       i1l2981 06E5                                         i1l2973 06C0  
                                       i1l2965 0696                                         i1l2983 06EB  
                                       i1l2975 06C8                                         i1l2967 06A8  
                                       u125_20 0DEC                                         u125_21 0DEB  
                                       i1l2985 06F3                                         i1l2977 06CE  
                                       i1l2969 06B1                                         i1l2979 06D3  
                                       u126_20 068D                                         u126_21 068C  
                                       u127_20 06A8                                         u135_20 0D5B  
                                       u127_21 06A7                                         u135_21 0D5A  
                                       u160_20 0FA1                                         u128_20 06B7  
                                       u160_21 0FA0                                         u128_21 06B6  
                                       u161_20 0FB5                                         u129_20 06CE  
                                       u161_21 0FB4                                         u129_21 06CD  
                                       u162_20 0DBB                                         u162_21 0DBA  
                                       u157_20 0E6E                                         u157_21 0E6D  
                                       u158_20 0E80                                         u158_21 0E7F  
                                       u159_20 0F91                                         u183_20 000A  
                                       u159_21 0F90                                         u183_21 0009  
                                       u184_20 000F                                         u184_21 000E  
                                       u185_20 0014                                         u185_21 0013  
                                       u186_20 001F                                         u186_21 001E  
                                       u187_20 0024                                         u187_21 0023  
                                       u188_20 002F                                         u188_21 002E  
                                       u189_20 0034                                         u189_21 0033  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
             door_status_changed@open_or_close 0064                    seek_confirmation@cancel_num 0077  
                                       ___wmul 0E48                                      ??___awdiv 007B  
                          save_hall_codes@open 0076                            _EUSART_Transmit_ISR 0E67  
                                       _button 0049                               ___awdiv@quotient 005C  
                      __end_of_DATAEE_ReadByte 0D48                               __end_of_send_req 0F87  
                              ?_WDT_Initialize 0070                               __end_of_timer_up 0702  
                                    ??_save_pw 0077       TMR2_SetInterruptHandler@InterruptHandler 0071  
                                compare_pw@len 0074                                  compare_pw@res 0077  
                              _request_storage 004F                               __end_of_stop_cmd 0DAC  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 002A  
                            _SYSTEM_Initialize 0D84                        __end_of__initialization 0066  
                            ??_save_hall_codes 0075                          __end_of_TMR2_CallBack 0D61  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 0D12  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 0D0C  
                 __size_of_ADC_StartConversion 0003                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0002                            ??_SYSTEM_Initialize 0074  
                                    ?_TMR2_ISR 0070                               _DATAEE_WriteByte 0E2A  
                 __size_of_door_status_changed 00E2                             __size_of_del_array 001D  
                             ?_TMR2_Initialize 0070                        _ADC_GetConversionResult 0CDE  
                               _OPTION_REGbits 0095                                   _data_storage 20EF  
                         _eusartRxStatusBuffer 00A0                              _send_msg_stopping 0EAD  
              ??_EUSART_SetOverrunErrorHandler 0073                             ?_send_msg_stopping 0073  
                    __end_of_SYSTEM_Initialize 0D97                          ??_EUSART_Transmit_ISR 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                              _read_hall_codes 0D61                           __end_of_EUSART_Write 0F28  
                         send_msg_stopping@len 0075                            ??_send_msg_stopping 0076  
                         send_msg_stopping@msg 0073                                 _status_storage 004E  
                  __size_of_EUSART_Receive_ISR 0039                                  _button_status 004A  
                                   __pmaintext 006A                  ?_EUSART_SetTxInterruptHandler 0071  
             _EUSART_TxDefaultInterruptHandler 0044                                        ?___wmul 0071  
                                   ??_TMR2_ISR 0071                                     __pintentry 0004  
                                   _hall_codes 006E                                        _BAUDCON 019F  
                           __size_of_send_stat 0018                                        _APFCON0 011D  
                                      _APFCON1 011E                   ??_EUSART_DefaultErrorHandler 0071  
                      __size_of_ADC_Initialize 0008                      __end_of_send_msg_stopping 0ED4  
                             ?_DATAEE_ReadByte 0070                                  _eusartRxCount 0055  
                __size_of_EUSART_RxDataHandler 001A                                        _OSCTUNE 0098  
                     ??_EUSART_SetErrorHandler 0073                                     _compare_pw 07A7  
                               main@last_state 0046                              __end_of_del_array 0E2A  
                         DATAEE_WriteByte@bAdd 0072                                    send_req@var 005A  
                         _ADC_InterruptHandler 003A                                      ?_send_req 0070  
          __size_of_EUSART_DefaultErrorHandler 0004                     ??_TMR2_SetInterruptHandler 0073  
                                    ?_timer_up 0070                                        ___awdiv 0702  
                              __size_of___wmul 001F                                  _working_state 0053  
                    ??_ADC_GetConversionResult 0071                           save_hall_codes@close 0074  
                                    ?_stop_cmd 0070                                        _cmd_exe 0051  
                                      __ptext1 0DF3                                        __ptext2 0D97  
                                      __ptext3 07E7                                        __ptext4 0F57  
                                      __ptext5 0EAD                                        __ptext6 0CF0  
                                      __ptext7 0EFE                                        __ptext8 0E0D  
                                      __ptext9 0F28                               main@control_byte 0048  
                                   del_array@x 0076                          _OSCILLATOR_Initialize 0D30  
                                    _T2CONbits 001C                        __end_of_read_hall_codes 0D72  
                     ??_PIN_MANAGER_Initialize 0071                                        _save_pw 0762  
                           _new_hall_code_open 004C                     __size_of_SYSTEM_Initialize 0013  
                                      clrloop0 0D49                                        main@res 006B  
                         end_of_initialization 0066                              __end_of_send_stat 07FF  
        __end_of_EUSART_SetOverrunErrorHandler 0D06         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0D00                       send_stat@status_protocol 005B  
                                send_cmd@F3018 00BF                              _EUSART_Initialize 0FC0  
                 __end_of_ADC_IsConversionDone 0D1F                              _seek_confirmation 0F28  
                                   ??_send_req 0079                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 0D27  
                           ?_seek_confirmation 0071                                     ??_timer_up 0070  
                       door_status_changed@val 005E                    __size_of_wait_for_requested 001A  
                                   ??_stop_cmd 0071                            ??_EUSART_Initialize 0073  
                             ??_WDT_Initialize 0071                 ??_EUSART_SetTxInterruptHandler 0073  
                                    _PORTBbits 000D                            ?_EUSART_is_rx_ready 0070  
                          ??_seek_confirmation 0079                     __size_of_send_msg_stopping 0027  
                              _save_hall_codes 0E89                          __size_of_EUSART_Write 002A  
                          _ADC_StartConversion 0CE1                                    ?_compare_pw 0072  
              __size_of_EUSART_SetErrorHandler 0006                       __end_of_DATAEE_WriteByte 0E48  
                          _door_status_changed 0599                                  send_req@F3022 00BC  
                    __end_of_EUSART_Initialize 1000                           ??_EUSART_is_rx_ready 0071  
                    __end_of_seek_confirmation 0F57                                      _TXSTAbits 019E  
                         ?_ADC_StartConversion 0070           __end_of_TMR2_DefaultInterruptHandler 0800  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 07FF  
                         ?_door_status_changed 005E             __end_of_EUSART_DefaultErrorHandler 0CE8  
                   _EUSART_DefaultErrorHandler 0CE4                                 __end_of___wmul 0E67  
                                 _EUSART_Write 0EFE                              __size_of_TMR2_ISR 0016  
                    seek_confirmation@wait_num 0071                                 _ADC_Initialize 0D1F  
                       ?_OSCILLATOR_Initialize 0070                            start_initialization 003C  
                             ?_read_hall_codes 0070                __size_of_PIN_MANAGER_Initialize 0017  
                                ??_EUSART_Read 0071   EUSART_SetRxInterruptHandler@interruptHandler 0071  
 EUSART_SetTxInterruptHandler@interruptHandler 0071                                  send_stat@stat 005A  
                          DATAEE_ReadByte@bAdd 0071                 ?_EUSART_SetOverrunErrorHandler 0071  
                        ??_ADC_StartConversion 0071                                _cmd_exe_counter 0034  
                   _EUSART_FramingErrorHandler 0040                                       ??___wmul 0075  
                       _EUSART_SetErrorHandler 0CF4                          ??_door_status_changed 0060  
                       __end_of_ADC_Initialize 0D27                                    __pdataBANK0 006E  
                          __size_of_compare_pw 0040                        __end_of_save_hall_codes 0EAD  
                ?_TMR2_DefaultInterruptHandler 0070                         __size_of_TMR2_CallBack 000D  
                                  __pbssBIGRAM 20EF                    __end_of_EUSART_Transmit_ISR 0E89  
                                  __pbssCOMMON 007C                                      ___latbits 0001  
                                __pcstackBANK0 005A                           _ADC_IsConversionDone 0D18  
                     __size_of_TMR2_Initialize 0012                     __end_of_EUSART_Receive_ISR 0FC0  
                   __size_of_EUSART_Initialize 0040               _EUSART_RxDefaultInterruptHandler 0042  
                   __size_of_seek_confirmation 002F                            __end_of_EUSART_Read 0EFE  
                                    _del_array 0E0D                   __end_of_EUSART_RxDataHandler 0DF3  
                       _PIN_MANAGER_Initialize 0DC2                           EUSART_Read@readValue 0072  
                                    _cmd_state 0052                              __size_of_send_req 0030  
                                     ?___awdiv 0077                                ?_ADC_Initialize 0070  
                                 _eusartRxHead 007C                                   _eusartTxHead 0059  
                                 _eusartRxTail 0056                                   _eusartTxTail 0058  
                            __size_of_timer_up 0087                   ??_INTERRUPT_InterruptManager 0071  
                      _eusartTxBufferRemaining 0057                              __size_of_stop_cmd 0015  
                        wait_for_requested@req 0072                     seek_confirmation@retry_num 0075  
                                _cmd_timer_len 0020                                     save_pw@len 0076  
                        ?_ADC_IsConversionDone 0070                                       ?_save_pw 0074  
                                 del_array@len 0073                       __size_of_DATAEE_ReadByte 000C  
                               _eusartRxBuffer 00A8                                 _eusartTxBuffer 00B0  
                               ___wmul@product 0075                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0071                                   _receive_time 002C  
                                    clear_ram0 0D48                                  _TMR2_CallBack 0D54  
                                     _PIE1bits 0091                              _eusartRxLastError 0054  
                                   ?_del_array 0071                                      _send_stat 07E7  
          __size_of_INTERRUPT_InterruptManager 0036                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0073                              _EUSART_is_tx_done 0CF0  
    __end_of_EUSART_DefaultOverrunErrorHandler 0CEC     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0CE8                                       _TMR2_ISR 0DAC  
                           ?_EUSART_is_tx_done 0070                               ?_save_hall_codes 0074  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0071  
                          ??_EUSART_is_tx_done 0071                                      main@input 006D  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0006  
                    ?_TMR2_SetInterruptHandler 0071                          DATAEE_WriteByte@bData 0071  
                                 ??_compare_pw 0075                                    _EUSART_Read 0ED4  
                            ?_DATAEE_WriteByte 0071                              ??_TMR2_Initialize 0073  
                               ?_TMR2_CallBack 0070                             ??_DATAEE_WriteByte 0072  
                                   _EECON1bits 0195                      __end_of_EUSART_is_tx_done 0CF4  
                                   ?_send_stat 0070                       ?_ADC_GetConversionResult 0070  
                               del_array@array 0071                     __end_of_wait_for_requested 0E0D  
                      ??_OSCILLATOR_Initialize 0071                            _EUSART_ErrorHandler 003C  
                             __size_of___awdiv 0060                    ?_EUSART_DefaultErrorHandler 0070  
                           __end_of_compare_pw 07E7                       main@data_storage_counter 0047  
                     send_req@request_protocol 005B                         ??_ADC_IsConversionDone 0071  
                           send_msg_stopping@x 0077                                    _button_time 00B8  
                                     _cmd_time 0024                           _EUSART_RxDataHandler 0DD9  
                             __size_of_save_pw 0045                                       __ptext10 0762  
                                     __ptext11 0E89                                       __ptext20 0CEC  
                                     __ptext12 0E2A                                       __ptext21 0D72  
                                     __ptext13 0D61                                       __ptext30 0CF4  
                                     __ptext22 0D12                                       __ptext14 0599  
                                     __ptext31 0D1F                                       __ptext23 0DC2  
                                     __ptext15 0E48                                       __ptext40 07FF  
                                     __ptext32 0D27                                       __ptext24 0D30  
                                     __ptext16 0702                                       __ptext41 067B  
                                     __ptext33 0ED4                                       __ptext25 0FC0  
                                     __ptext17 07A7                                       __ptext42 0E67  
                                     __ptext34 0CE1                                       __ptext26 0D0C  
                                     __ptext18 0D3C                                       __ptext43 0F87  
                                     __ptext35 0D18                                       __ptext27 0D06  
                                     __ptext19 0D84                                       __ptext44 0CE8  
                                     __ptext36 0CDE                                       __ptext28 0D00  
                                     __ptext45 0CDD                                       __ptext29 0CFA  
                                     __ptext46 0CE4                                       __ptext38 0DAC  
                                     __ptext47 0DD9                                       __ptext39 0D54  
                  DATAEE_WriteByte@GIEBitValue 0073                                      save_pw@pw 0074  
                                  _lock_status 004D                    __size_of_EUSART_is_rx_ready 0009  
                                __size_of_main 052F                              ??_DATAEE_ReadByte 0071  
                                  ??_del_array 0075                        ?_EUSART_SetErrorHandler 0071  
                                     _send_req 0F57  EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                          _new_hall_code_close 004B                                       _timer_up 067B  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 003A  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0D00  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0CFA  
                                     _stop_cmd 0D97                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                        __size_of_WDT_Initialize 0004  
                             compare_pw@eedata 0078                                       intlevel1 0000  
                              ??_TMR2_CallBack 0071                               compare_pw@indata 0076  
                  __end_of_ADC_StartConversion 0CE4                       __size_of_read_hall_codes 0011  
                      ?_PIN_MANAGER_Initialize 0070                  seek_confirmation@continue_num 0073  
              __end_of_ADC_GetConversionResult 0CE1                 __end_of_EUSART_SetErrorHandler 0CFA  
                                     save_pw@x 0078                    __end_of_door_status_changed 067B  
                   __size_of_EUSART_is_tx_done 0004                                    ??_send_stat 0079  
                             ??_ADC_Initialize 0071           __end_of_EUSART_SetRxInterruptHandler 0D0C  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0D06  
                           _EUSART_Receive_ISR 0F87  EUSART_SetFramingErrorHandler@interruptHandler 0071  
                          ?_EUSART_Receive_ISR 0070                          TMR2_ISR@CountCallBack 0036  
                           EUSART_Write@txData 0072                   __size_of_EUSART_Transmit_ISR 0022  
               __end_of_PIN_MANAGER_Initialize 0DD9                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 0038  
